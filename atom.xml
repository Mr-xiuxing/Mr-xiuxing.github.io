<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.xiuxing&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mrxiuxing.cn/"/>
  <updated>2020-04-13T08:58:38.000Z</updated>
  <id>http://mrxiuxing.cn/</id>
  
  <author>
    <name>Mr.xiuxing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python爬取天眼查</title>
    <link href="http://mrxiuxing.cn/posts/b8f914a1.html"/>
    <id>http://mrxiuxing.cn/posts/b8f914a1.html</id>
    <published>2020-04-13T08:58:38.000Z</published>
    <updated>2020-04-13T08:58:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>If you can take it, you can make it. ——《坚不可摧》</center></strong></em><br><em><strong><center>敢于实践，方能实现。</center></strong></em></p><a id="more"></a><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考，不得用于商业用途。</b></p><h2 id="整体思路">整体思路</h2><p><img src="/posts/b8f914a1/tycmind.png" alt><br>  首先使用requests从手机端网页获取公司的ID，然后请求Fiddler 4 抓取到的小程序API接口，最后持久化储存至CSV文件。</p><h2 id="配置">配置</h2><h3 id="Fiddler-4-配置">Fiddler 4 配置</h3><p>  打开Fiddler 4 ，找到上方 Tools 并点击，选择Options，按照下图勾选设置。<br><img src="/posts/b8f914a1/fiddler1.png" alt><br><img src="/posts/b8f914a1/fiddler2.png" alt></p><h3 id="IOS-配置">IOS 配置</h3><p>  请先确保手机与电脑在同一局域网下。查看windows的IP地址，Win + R，输入cmd进入命令行窗口，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p><img src="/posts/b8f914a1/ipconfig.png" alt><br>  因为我连接的是WiFi，所以直接查看IPv4地址即可。<br>  设置手机代理：打开设置 --&gt; 选择无线局域网 --&gt; 点击你所连接WiFi的蓝色区域 --&gt; 滑到底部，点击配置代理 --&gt; 选择手动，按照下图输入你的IP地址以及端口号 --&gt; 点击右上角储存。<br><img src="/posts/b8f914a1/ios.png" alt></p><p>  打开iPhone的Safari浏览器，输入你电脑的IP地址:端口号，格式为IP：Port,加入你的IP地址为127.0.0.1，端口号为8888，那么你就在你的浏览器输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:8888</span><br></pre></td></tr></table></figure><p>  进入证书下载页面，点击底部的FiddlerRoot certificate</p><p><img src="/posts/b8f914a1/2_ios.png" alt><br>  点击允许</p><p><img src="/posts/b8f914a1/3_ios.png" alt></p><p>安装证书：<br>1.打开设置 --&gt; 通用  --&gt; 描述文件<br>2.点击刚下载的描述文件 --&gt; 点击右上角安装 --&gt; 输入密码安装 --&gt; 点击右上角完成<br>3.返回通用窗口 --&gt; 点击关于本机 --&gt; 滑到底部，选择证书信任设置 --&gt; 开启对我们刚安装完成证书的信任</p><p>  在手机端输入 <a href="http://baidu.com" target="_blank" rel="noopener">baidu.com</a> ,观察Fiddler 4，发现已经有了这条记录。</p><p><img src="/posts/b8f914a1/fiddlerbaidu.png" alt></p><h2 id="获取API接口">获取API接口</h2><p>  完成上面配置后，打开微信天眼查小程序（请先确保已经登录），在搜索框输入京东，我们选择 北京京东世纪贸易有限公司这一条，往下滑，点击企业背景区域的工商信息。回到Fiddler查看，点击Body最大的那一条：</p><p><img src="/posts/b8f914a1/fiddlerjd.png" alt></p><p>  很明显，这就是我们需要的。在上半部分请求头中的 X-AUTH-TOKEN 以及 Authorization是必须的，如果没有这两个参数，我们接下来的请求会被重定向到别的页面，我们的行为被认定为非人类了。如下图：</p><p><img src="/posts/b8f914a1/pageerror.png" alt></p><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 抓取天眼查小程序API接口</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings()    <span class="comment"># 忽略HTTPS警告</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从手机端网页获取所有公司ID</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_company_id</span><span class="params">(page_url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: UserAgent(verify_ssl=<span class="literal">False</span>).random,</span><br><span class="line">        <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">        <span class="string">"cookie"</span>: <span class="string">""</span>    <span class="comment"># 你的cookie</span></span><br><span class="line">    &#125;</span><br><span class="line">    html = requests.get(page_url, headers=headers, verify=<span class="literal">False</span>).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    all_company_id = tree.xpath(<span class="string">'//*[@id="search"]/div[2]/div/div/div[2]/div[1]/a/@href'</span>)</span><br><span class="line">    <span class="keyword">for</span> company_id <span class="keyword">in</span> all_company_id:</span><br><span class="line">        company_id = company_id.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        pares_company_info(company_id)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析API获取公司信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pares_company_info</span><span class="params">(company_id)</span>:</span></span><br><span class="line">    api_url = <span class="string">f'https://api9.tianyancha.com/services/v3/t/details/appComIcV4/<span class="subst">&#123;company_id&#125;</span>?pageSize=1000'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (iPhone; CPU iPhone OS 13_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 MicroMessenger/7.0.12(0x17000c27) NetType/WIFI Language/zh_CN"</span>,</span><br><span class="line">        <span class="string">"Host"</span>: <span class="string">"api9.tianyancha.com"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">        <span class="string">"X-AUTH-TOKEN"</span>: <span class="string">""</span>,    <span class="comment"># 换成你的</span></span><br><span class="line">        <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate, br"</span>,</span><br><span class="line">        <span class="string">"Connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="string">"version"</span>: <span class="string">"TYC-XCX-WX"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"https://servicewechat.com/wx9f2867fc22873452/31/page-frame.html"</span>,</span><br><span class="line">        <span class="string">"Authorization"</span>: <span class="string">""</span>,    <span class="comment"># 换成你的</span></span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-cn"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    json_str = requests.get(api_url, headers=headers, verify=<span class="literal">False</span>).json()</span><br><span class="line">    item = json_str.get(<span class="string">'data'</span>)[<span class="string">'baseInfo'</span>]</span><br><span class="line">    <span class="keyword">try</span>:    <span class="comment"># 这里只提取了部分，可以按照需求添加</span></span><br><span class="line">        name = item.get(<span class="string">'name'</span>)    <span class="comment"># 公司名称</span></span><br><span class="line">        legalPersonName = item.get(<span class="string">'legalPersonName'</span>)    <span class="comment"># 法定代表人</span></span><br><span class="line">        regStatus = item.get(<span class="string">'regStatus'</span>)    <span class="comment"># 经营状态</span></span><br><span class="line">        regCapital = item.get(<span class="string">'regCapital'</span>)    <span class="comment"># 注册资本</span></span><br><span class="line">        regLocation = item.get(<span class="string">'regLocation'</span>)    <span class="comment"># 注册地址</span></span><br><span class="line">        companyOrgType = item.get(<span class="string">'companyOrgType'</span>, <span class="string">' '</span>)    <span class="comment"># 企业类型</span></span><br><span class="line">        businessScope = item.get(<span class="string">'businessScope'</span>, <span class="string">' '</span>)    <span class="comment"># 经营范围</span></span><br><span class="line">        company_info = &#123;</span><br><span class="line">            <span class="string">"name"</span>: name, <span class="string">"legalPersonName"</span>: legalPersonName, <span class="string">"regStatus"</span>: regStatus,</span><br><span class="line">            <span class="string">"regCapital"</span>: regCapital, <span class="string">"regLocation"</span>: regLocation, <span class="string">"companyOrgType"</span>: companyOrgType,</span><br><span class="line">            <span class="string">"businessScope"</span>: businessScope</span><br><span class="line">        &#125;</span><br><span class="line">        print(company_info)</span><br><span class="line">        save_to_csv(filename, company_info)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'error_id.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(company_id + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存到CSV文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span><span class="params">(filename, company_info)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"legalPersonName"</span>, <span class="string">"regStatus"</span>, <span class="string">"regCapital"</span>,</span><br><span class="line">                      <span class="string">"regLocation"</span>, <span class="string">"companyOrgType"</span>, <span class="string">"businessScope"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writerow(company_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    filename = <span class="string">'company_info.csv'</span></span><br><span class="line">    <span class="comment"># 创建csv文件，并添加表头信息</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"legalPersonName"</span>, <span class="string">"regStatus"</span>, <span class="string">"regCapital"</span>,</span><br><span class="line">                      <span class="string">"regLocation"</span>, <span class="string">"companyOrgType"</span>, <span class="string">"businessScope"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writeheader()</span><br><span class="line">    base_url = <span class="string">'https://m.tianyancha.com/top/companies/p&#123;&#125;'</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        print(<span class="string">f'正在爬取第<span class="subst">&#123;page&#125;</span>页。。。'</span>)</span><br><span class="line">        url = base_url.format(page)</span><br><span class="line">        get_company_id(url)</span><br><span class="line">        time.sleep(random.uniform(<span class="number">15</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>  从手机端网页获取所有公司ID这个函数需要填入你的cookie。获取方式：使用Chrome打开天眼查，登录之后，按F12打开检查，切换到手机模式，然后刷新一下页面，就可以提取到cookie了，要选择 m.开头链接的cookie。 在解析API获取公司信息函数 header中的X-AUTH-TOKEN 以及 Authorization填入你用Fiddler获取到的值。就可以了。</p><h2 id="爬取效果">爬取效果</h2><p><img src="/posts/b8f914a1/result.png" alt></p><h2 id="写在最后">写在最后</h2><p>  如果PC端网页反爬虫不容易解决，手机端网页也不容易解决。那么就可以考虑小程序的接口或APP的接口。还有就是爬虫要休息，只要我爬的足够慢，你就搞不懂我是人类还是非人类了。</p><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考，不得用于商业用途。</b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;If you can take it, you can make it. ——《坚不可摧》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;敢于实践，方能实现。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="http://mrxiuxing.cn/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>python实现冒泡排序和选择排序</title>
    <link href="http://mrxiuxing.cn/posts/682abd47.html"/>
    <id>http://mrxiuxing.cn/posts/682abd47.html</id>
    <published>2020-04-12T11:50:29.000Z</published>
    <updated>2020-04-12T15:29:36.336Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Every obstacle is an opportunity. ——《快乐的大脚》</center></strong></em><br><em><strong><center>每一次挫折都是一次机会。</center></strong></em></p><a id="more"></a><h2 id="冒泡排序">冒泡排序</h2><h3 id="原理">原理</h3><p>1.比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>2.对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>3.针对所有的元素重复以上的步骤，除了最后一个。<br>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(nums_list)</span>:</span></span><br><span class="line">    flag = <span class="number">0</span>    <span class="comment"># 是否交换的标志</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums_list) - <span class="number">1</span>):    <span class="comment"># 这个循环负责设置冒泡排序进行的次数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums_list) - j - <span class="number">1</span>):    <span class="comment"># i为列表下标</span></span><br><span class="line">            <span class="keyword">if</span> nums_list[i] &gt; nums_list[i + <span class="number">1</span>]:</span><br><span class="line">                nums_list[i], nums_list[i + <span class="number">1</span>] = nums_list[i + <span class="number">1</span>], nums_list[i]</span><br><span class="line">                flag += <span class="number">1</span></span><br><span class="line">                print(<span class="string">f"目前交换<span class="subst">&#123;flag&#125;</span>次了, 列表现在是：<span class="subst">&#123;nums_list&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'这个列表原本就是有序列表，不需要排序了！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'这个列表共交换了<span class="subst">&#123;flag&#125;</span>次。'</span>)</span><br><span class="line">    <span class="keyword">return</span> nums_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(bubble_sort([<span class="number">66</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]))</span><br><span class="line">print()</span><br><span class="line">print(bubble_sort([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">目前交换<span class="number">1</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">2</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">3</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">66</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">4</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">5</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">6</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">7</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">8</span>次了, 列表现在是：[<span class="number">14</span>, <span class="number">19</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">9</span>次了, 列表现在是：[<span class="number">14</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">10</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">这个列表共交换了<span class="number">10</span>次。</span><br><span class="line">[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line"></span><br><span class="line">这个列表原本就是有序列表，不需要排序了！</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="选择排序">选择排序</h2><h3 id="原理-2">原理</h3><p>第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。</p><h3 id="代码实现-2">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(nums_list)</span>:</span></span><br><span class="line">    flag = <span class="number">0</span>  <span class="comment"># 是否交换的标志</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums_list)<span class="number">-1</span>):</span><br><span class="line">        min_index = i    <span class="comment"># 将本次循环第一个位置值的下标设为i</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(nums_list)):    <span class="comment"># 和当前i元素之后的所有值进行比较</span></span><br><span class="line">            <span class="keyword">if</span> nums_list[j] &lt; nums_list[min_index]:</span><br><span class="line">                min_index = j    <span class="comment"># 使min_index为本次循环最小值下标</span></span><br><span class="line">        nums_list[i], nums_list[min_index] = nums_list[min_index], nums_list[i]</span><br><span class="line">        flag += <span class="number">1</span></span><br><span class="line">        print(<span class="string">f"目前交换<span class="subst">&#123;flag&#125;</span>次了, 列表现在是：<span class="subst">&#123;nums_list&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'这个列表原本就是有序列表，不需要排序了！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'这个列表共交换了<span class="subst">&#123;flag&#125;</span>次。'</span>)</span><br><span class="line">    <span class="keyword">return</span> nums_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(selection_sort([<span class="number">66</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]))</span><br><span class="line">print()</span><br><span class="line">print(bubble_sort([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">目前交换<span class="number">1</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">2</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">3</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">4</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">5</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">6</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">这个列表共交换了<span class="number">6</span>次。</span><br><span class="line">[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Every obstacle is an opportunity. ——《快乐的大脚》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;每一次挫折都是一次机会。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JDK安装及环境配置</title>
    <link href="http://mrxiuxing.cn/posts/5f24fd4.html"/>
    <id>http://mrxiuxing.cn/posts/5f24fd4.html</id>
    <published>2020-04-10T05:12:20.000Z</published>
    <updated>2020-04-10T05:12:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>When the Lord closes a door, somewhere he opens a window. ——《音乐之声》</center></strong></em><br><em><strong><center>上帝关上一扇门，他会在某处打开一扇窗。</center></strong></em></p><a id="more"></a><h2 id="JDK下载">JDK下载</h2><p>  oracle官网地址：<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a> 。这里选择了Java SE 13 ,你也可以选择其他版本。<br><img src="/posts/5f24fd4/1jdk13.png" alt><br>  点击JDK Download 也就上图中红框圈住的地方。进入版本选择页面，选择Windows x64 Installer 对应的版本，即下图红框圈住的那个。<br><img src="/posts/5f24fd4/2jdk13.png" alt><br>  这时会弹出一个让你接受协议的弹窗，按照下图所示点击，即可下载。<br><img src="/posts/5f24fd4/3jdk13.png" alt><br>  下载完成<br><img src="/posts/5f24fd4/4jdk13.png" alt></p><h2 id="JDK安装">JDK安装</h2><p>  双击刚下载完成的安装包，点击是<br><img src="/posts/5f24fd4/5jdk13.png" alt><br>  点击下一步<br><img src="/posts/5f24fd4/6jdk13.png" alt><br>  默认安装位置是C:\Program Files\，(如果你不想安装在C盘可以点击更改选择其他盘符且路径不要包含中文)这里我是直接下一步，也就是默认安装路径。<br><img src="/posts/5f24fd4/7jdk13.png" alt><br>  稍等片刻，直至出现下图，点击关闭。<br><img src="/posts/5f24fd4/8jdk13.png" alt></p><h2 id="JDK配置环境变量">JDK配置环境变量</h2><p>  安装完成还不够，还需要去配置环境变量。使用 win + pause break键打开计算机属性窗口，如下图示，点击左边的红框部分 高级系统设置。<br><img src="/posts/5f24fd4/9jdk13.png" alt><br>  对于没有全键盘的电脑来说可能没有pause break键，如果在你的桌面有此电脑图标，你可以直接右键然后点击属性；如果你的桌面没有此电脑，你可以先打开文件资源管理器，如下图所示：点击此电脑右键再选择属性，也可以打开计算机属性窗口。<br><img src="/posts/5f24fd4/10jdk13.png" alt><br>  进入计算机属性窗口，点击左侧高级系统设置，进入系统属性窗口，然后点击环境变量，进入环境变量窗口。<br><img src="/posts/5f24fd4/11jdk13.png" alt><br><img src="/posts/5f24fd4/12jdk13.png" alt><br>  环境变量分为用户环境变量和系统环境变量，我们在系统变量新建一个变量名为JAVA_HOME，变量值为你的JDK安装路径，我这里是C:\Program Files\Java\jdk-13.0.2，然后点击确定。如下图示：<br><img src="/posts/5f24fd4/13jdk13.png" alt><br>  选中PATH，点击编辑<br><img src="/posts/5f24fd4/14jdk13.png" alt><br>  新建填入%JAVA_HOME%\bin，然后点击确定，如下图示：<br><img src="/posts/5f24fd4/15jdk13.png" alt><br>  点击确定<br><img src="/posts/5f24fd4/16jdk13.png" alt><br>  点击确定<br><img src="/posts/5f24fd4/17jdk13.png" alt><br>  至此环境变量配置完毕。</p><h2 id="验证JDK环境变量">验证JDK环境变量</h2><p>  使用win + R打开运行，输出cmd，回车，进入命令行窗口。<br><img src="/posts/5f24fd4/18jdk13.png" alt><br><img src="/posts/5f24fd4/19jdk13.png" alt><br>  在命令行分别输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><p><img src="/posts/5f24fd4/20jdk13.png" alt><br>  如果你的输出结果类似上图信息，则表示安装成功，否则请检查JAVA_HOME和Path的设置。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;When the Lord closes a door, somewhere he opens a window. ——《音乐之声》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;上帝关上一扇门，他会在某处打开一扇窗。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JDK" scheme="http://mrxiuxing.cn/categories/JDK/"/>
    
    
      <category term="JDK" scheme="http://mrxiuxing.cn/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>爬取豆瓣音乐Top250(多线程、多进程)</title>
    <link href="http://mrxiuxing.cn/posts/572ae169.html"/>
    <id>http://mrxiuxing.cn/posts/572ae169.html</id>
    <published>2020-04-08T07:41:20.000Z</published>
    <updated>2020-04-08T07:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>If you stay positive, you have a shot at a sliver lining. ——《乌云背后的幸福线》</center></strong></em><br><em><strong><center>山重水复疑无路，柳暗花明又一村。</center></strong></em></p><a id="more"></a><h2 id="站点分析">站点分析</h2><p>  本次抓取目标是豆瓣音乐Top250排行榜，目标站点为 <a href="https://music.douban.com/top250" target="_blank" rel="noopener">https://music.douban.com/top250</a> ，打开之后便可以查看榜单。<br><img src="/posts/572ae169/1top250.png" alt></p><p>  将网页滑到最下方，发现有分页，点击切换到第2页，观察URL的变化。发现页面的URL变成了 <a href="https://music.douban.com/top250?start=25" target="_blank" rel="noopener">https://music.douban.com/top250?start=25</a> ，如下图：<br><img src="/posts/572ae169/2top250.png" alt></p><p>  比之前的URL多了一个start参数,初步推断这是一个偏移量的参数。再点击下一页，start参数变成了50。多次切换页码offset都有改变，由此得出规律，start代表偏移量值。也就是说Top250我们只需要分开请求10次即可，而10次的参数分别设置为0、25、50…225即可。<br>  使用Chrome浏览器开发者模式查看源代码。选中任意一个条目，发现其详情页链接在class属性为ngb的a节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_music_url = tree.xpath(<span class="string">'//*[@class="nbg"]/@href'</span>)</span><br></pre></td></tr></table></figure><p>  进入专辑页面，需要抓取的信息都在这里，不过有的信息使用XPath不太好获取，所以对于这些不好提取的信息使用了正则表达式。如流派的内容：<br><img src="/posts/572ae169/3top250.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">styles = re.findall(<span class="string">r'&lt;span class="pl"&gt;流派:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)</span><br><span class="line">    <span class="keyword">if</span> len(styles) == <span class="number">0</span>:</span><br><span class="line">        style = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        style = styles[<span class="number">0</span>].strip()</span><br></pre></td></tr></table></figure><h2 id="完整代码">完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line"><span class="comment"># start_time = datetime.now()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent(verify_ssl=<span class="literal">False</span>).random,    <span class="comment"># 随机UA</span></span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>    <span class="comment"># 关闭长链接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有音乐详情页链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    html = requests.get(url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    all_music_url = tree.xpath(<span class="string">'//*[@class="nbg"]/@href'</span>)</span><br><span class="line">    <span class="keyword">for</span> music_url <span class="keyword">in</span> all_music_url:</span><br><span class="line">        get_music_info(music_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析详情页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_info</span><span class="params">(music_url)</span>:</span></span><br><span class="line">    html = requests.get(music_url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    name = tree.xpath(<span class="string">'//*[@id="wrapper"]/h1/span/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 音乐名称</span></span><br><span class="line">    author = tree.xpath(<span class="string">'//*[@id="info"]/span/span/a/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 演唱者</span></span><br><span class="line">    styles = re.findall(<span class="string">r'&lt;span class="pl"&gt;流派:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 流派</span></span><br><span class="line">    <span class="keyword">if</span> len(styles) == <span class="number">0</span>:</span><br><span class="line">        style = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        style = styles[<span class="number">0</span>].strip()</span><br><span class="line">    time = re.findall(<span class="string">r'&lt;span class="pl"&gt;发行时间:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)[<span class="number">0</span>].strip()    <span class="comment"># 发行时间</span></span><br><span class="line">    publishers = re.findall(<span class="string">r'&lt;span class="pl"&gt;出版者:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 出版者</span></span><br><span class="line">    score = tree.xpath(<span class="string">'//*[@class="ll rating_num"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(publishers) == <span class="number">0</span>:</span><br><span class="line">        publisher = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        publisher = publishers[<span class="number">0</span>].strip()</span><br><span class="line">    music_info = &#123;</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"author"</span>: author,</span><br><span class="line">        <span class="string">"style"</span>: style,</span><br><span class="line">        <span class="string">"time"</span>: time,</span><br><span class="line">        <span class="string">"publisher"</span>: publisher,</span><br><span class="line">        <span class="string">"score"</span>: score</span><br><span class="line">    &#125;</span><br><span class="line">    print(music_info)</span><br><span class="line">    save_to_csv(filename, music_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存到CSV文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span><span class="params">(filename, music_info)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"author"</span>, <span class="string">"style"</span>, <span class="string">"time"</span>, <span class="string">"publisher"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writerow(music_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [<span class="string">'https://music.douban.com/top250?start=&#123;&#125;'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>)]</span><br><span class="line">    filename = <span class="string">'musicTop250.csv'</span></span><br><span class="line">    <span class="comment"># 创建musicTop250.csv文件，并添加表头信息</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"author"</span>, <span class="string">"style"</span>, <span class="string">"time"</span>, <span class="string">"publisher"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writeheader()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        get_music_url(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结束时间</span></span><br><span class="line">    <span class="comment"># end_time = datetime.now()</span></span><br><span class="line">    <span class="comment"># print(f'用时：&#123;(end_time - start_time).seconds&#125;秒')</span></span><br></pre></td></tr></table></figure><h2 id="多线程版">多线程版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line">start_time = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程锁</span></span><br><span class="line">lock = Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent(verify_ssl=<span class="literal">False</span>).random,    <span class="comment"># 随机UA</span></span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>    <span class="comment"># 关闭长链接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从URL列表中获取URl</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> urls</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">if</span> len(urls) == <span class="number">0</span>:</span><br><span class="line">        lock.release()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    lock.release()</span><br><span class="line">    <span class="keyword">return</span> urls.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有音乐详情页链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_url</span><span class="params">(url, thread_name)</span>:</span></span><br><span class="line">    html = requests.get(url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    all_music_url = tree.xpath(<span class="string">'//*[@class="nbg"]/@href'</span>)</span><br><span class="line">    <span class="keyword">for</span> music_url <span class="keyword">in</span> all_music_url:</span><br><span class="line">        get_music_info(music_url, thread_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析详情页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_info</span><span class="params">(music_url, thread_name)</span>:</span></span><br><span class="line">    html = requests.get(music_url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    name = tree.xpath(<span class="string">'//*[@id="wrapper"]/h1/span/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 音乐名称</span></span><br><span class="line">    author = tree.xpath(<span class="string">'//*[@id="info"]/span/span/a/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 演唱者</span></span><br><span class="line">    styles = re.findall(<span class="string">r'&lt;span class="pl"&gt;流派:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 流派</span></span><br><span class="line">    <span class="keyword">if</span> len(styles) == <span class="number">0</span>:</span><br><span class="line">        style = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        style = styles[<span class="number">0</span>].strip()</span><br><span class="line">    time = re.findall(<span class="string">r'&lt;span class="pl"&gt;发行时间:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)[<span class="number">0</span>].strip()    <span class="comment"># 发行时间</span></span><br><span class="line">    publishers = re.findall(<span class="string">r'&lt;span class="pl"&gt;出版者:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 出版者</span></span><br><span class="line">    score = tree.xpath(<span class="string">'//*[@class="ll rating_num"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(publishers) == <span class="number">0</span>:</span><br><span class="line">        publisher = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        publisher = publishers[<span class="number">0</span>].strip()</span><br><span class="line">    music_info = &#123;</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"author"</span>: author,</span><br><span class="line">        <span class="string">"style"</span>: style,</span><br><span class="line">        <span class="string">"time"</span>: time,</span><br><span class="line">        <span class="string">"publisher"</span>: publisher,</span><br><span class="line">        <span class="string">"score"</span>: score</span><br><span class="line">    &#125;</span><br><span class="line">    print(thread_name, music_info)</span><br><span class="line">    <span class="comment"># save_to_csv(filename, music_info)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存到CSV文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span><span class="params">(filename, music_info)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"author"</span>, <span class="string">"style"</span>, <span class="string">"time"</span>, <span class="string">"publisher"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writerow(music_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicSpiderThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = get_url()</span><br><span class="line">            <span class="keyword">if</span> url != <span class="string">""</span>:</span><br><span class="line">                get_music_url(url, self.name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [<span class="string">'https://music.douban.com/top250?start=&#123;&#125;'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>)]</span><br><span class="line">    <span class="comment"># filename = 'musicTop250.csv'</span></span><br><span class="line">    <span class="comment"># with open(filename, 'a', encoding='utf-8') as f:</span></span><br><span class="line">    <span class="comment">#     fieldnames = ["name", "author", "style", "time", "publisher", "score"]</span></span><br><span class="line">    <span class="comment">#     writer = csv.DictWriter(f, fieldnames=fieldnames)</span></span><br><span class="line">    <span class="comment">#     writer.writeheader()</span></span><br><span class="line">    print(len(urls))</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>): <span class="comment"># 开启4个线程</span></span><br><span class="line">        thread = MusicSpiderThread(<span class="string">'thread-&#123;&#125;'</span>.format(i))</span><br><span class="line">        threads.append(thread)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结束时间</span></span><br><span class="line">    end_time = datetime.now()</span><br><span class="line">    print(<span class="string">f'用时：<span class="subst">&#123;(end_time-start_time).seconds&#125;</span>秒'</span>)</span><br></pre></td></tr></table></figure><h2 id="多进程版">多进程版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line">start_time = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent(verify_ssl=<span class="literal">False</span>).random,    <span class="comment"># 随机UA</span></span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>    <span class="comment"># 关闭长链接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有音乐详情页链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    html = requests.get(url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    all_music_url = tree.xpath(<span class="string">'//*[@class="nbg"]/@href'</span>)</span><br><span class="line">    <span class="keyword">for</span> music_url <span class="keyword">in</span> all_music_url:</span><br><span class="line">        get_music_info(music_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析详情页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_info</span><span class="params">(music_url)</span>:</span></span><br><span class="line">    html = requests.get(music_url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    name = tree.xpath(<span class="string">'//*[@id="wrapper"]/h1/span/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 音乐名称</span></span><br><span class="line">    author = tree.xpath(<span class="string">'//*[@id="info"]/span/span/a/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 演唱者</span></span><br><span class="line">    styles = re.findall(<span class="string">r'&lt;span class="pl"&gt;流派:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 流派</span></span><br><span class="line">    <span class="keyword">if</span> len(styles) == <span class="number">0</span>:</span><br><span class="line">        style = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        style = styles[<span class="number">0</span>].strip()</span><br><span class="line">    time = re.findall(<span class="string">r'&lt;span class="pl"&gt;发行时间:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)[<span class="number">0</span>].strip()    <span class="comment"># 发行时间</span></span><br><span class="line">    publishers = re.findall(<span class="string">r'&lt;span class="pl"&gt;出版者:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 出版者</span></span><br><span class="line">    score = tree.xpath(<span class="string">'//*[@class="ll rating_num"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(publishers) == <span class="number">0</span>:</span><br><span class="line">        publisher = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        publisher = publishers[<span class="number">0</span>].strip()</span><br><span class="line">    music_info = &#123;</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"author"</span>: author,</span><br><span class="line">        <span class="string">"style"</span>: style,</span><br><span class="line">        <span class="string">"time"</span>: time,</span><br><span class="line">        <span class="string">"publisher"</span>: publisher,</span><br><span class="line">        <span class="string">"score"</span>: score</span><br><span class="line">    &#125;</span><br><span class="line">    print(music_info)</span><br><span class="line">    <span class="comment"># save_to_csv(filename, music_info)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存到CSV文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span><span class="params">(filename, music_info)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"author"</span>, <span class="string">"style"</span>, <span class="string">"time"</span>, <span class="string">"publisher"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writerow(music_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [<span class="string">'https://music.douban.com/top250?start=&#123;&#125;'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>)]</span><br><span class="line">    <span class="comment"># filename = 'musicTop250.csv'</span></span><br><span class="line">    <span class="comment"># with open(filename, 'a', encoding='utf-8') as f:</span></span><br><span class="line">    <span class="comment">#     fieldnames = ["name", "author", "style", "time", "publisher", "score"]</span></span><br><span class="line">    <span class="comment">#     writer = csv.DictWriter(f, fieldnames=fieldnames)</span></span><br><span class="line">    <span class="comment">#     writer.writeheader()</span></span><br><span class="line">    <span class="comment"># for url in urls:</span></span><br><span class="line">    <span class="comment">#     get_music_url(url)</span></span><br><span class="line"></span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)    <span class="comment"># 开启4个进程</span></span><br><span class="line">    pool.map(get_music_url, urls)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结束时间</span></span><br><span class="line">    end_time = datetime.now()</span><br><span class="line">    print(<span class="string">f'用时：<span class="subst">&#123;(end_time - start_time).seconds&#125;</span>秒'</span>)</span><br></pre></td></tr></table></figure><h2 id="用时对比">用时对比</h2><p>  为了测试，并没有把抓取到的结构化数据存储到文件，而是直接输出到控制台。在同一台机器上运行了上面多线程与多进程的代码，多线程开启4个线程用时104秒，多进程开启4个进程用时123秒。感觉不是很快，可能跟我这边的网络不太好有关系。豆瓣这边快速抓取一定数量后，会提示你IP异常，然后让你登录，对此，你可以将登录后的cookies放到headers中。</p><h2 id="写在最后">写在最后</h2><p>  对于多线程多进程爬虫效率固然可观，但缺点也很明显，你需要考虑更多的细节，并且多线程和多进程的程序并不好调试，操作不好的话容易造成死锁或脏数据。对于一些小型站点个人感觉没必要使用多线程或多进程，对于大型站点或者你实在想要高速爬取，推荐使用框架。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;If you stay positive, you have a shot at a sliver lining. ——《乌云背后的幸福线》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;山重水复疑无路，柳暗花明又一村。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="多线程" scheme="http://mrxiuxing.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多进程" scheme="http://mrxiuxing.cn/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="XPath" scheme="http://mrxiuxing.cn/tags/XPath/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程多进程编程</title>
    <link href="http://mrxiuxing.cn/posts/e72e67c0.html"/>
    <id>http://mrxiuxing.cn/posts/e72e67c0.html</id>
    <published>2020-04-01T06:13:00.000Z</published>
    <updated>2020-04-01T06:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>There must be a good reason for our suffering. ——《加勒比海盗》</center></strong></em><br><em><strong><center>苦尽则甘来。</center></strong></em></p><a id="more"></a><h2 id="进程与线程">进程与线程</h2><h3 id="进程">进程</h3><p>  计算机程序只是存储在磁盘上的可执行二进制(或其他类型)文件。只有把它们加载到内存中并被操作系统调用,才拥有其生命期。进程(有时称为重量级进程)则是一个执行中的程序。 每个进程都拥有自己的地址空间、 内存、 数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上所有进程的执行,并为这些进程合理地分配时间。进程也可以通过派生(fork 或 spawn)新的进程来执行其他任务,不过因为每个新进程也都拥有自己的内存和数据栈等,所以只能采用进程间通信(IPC)的方式共享信息。</p><h3 id="线程">线程</h3><p>  线程是程序执行时的最小单位(有时候称为轻量级进程),不过它们是在同一个进程下执行的,它是进程的一个执行流，并共享相同的上下文。可以将它们认为是在一个主进程或&quot;主线程&quot;中并行运行的一些&quot;迷你进程&quot; 。</p><p>  线程包括开始、执行顺序和结束三部分。它有一个指令指针,用于记录当前运行的上下文。当其他线程运行时,它可以被抢占(中断)和临时挂起(也称为睡眠)。</p><p>  一个进程中的各个线程与主线程之间可以共享同一块数据空间,因此相比于独立的进程而言,线程间的信息共享和通信更加容易。线程一般是以并发方式执行的,正是由于这种并行和数据共享机制,使得多任务间的协作成为可能。当然,在单核 CPU 系统中,因为真正的并发是不可能的,所以线程的执行实际上还是同步执行的，只是系统会根据调度算法在不同的时间安排某一个线程在CPU上执行一小会，然后让其他线程在CPU上再执行一小会，通过这种在多个线程间不断切换的方式让多个线程交替执行。因此，在宏观上看，即使在单核CPU的系统上仍然像多个线程并发运行一样。</p><h2 id="GIL即全局解释器锁">GIL即全局解释器锁</h2><p>  Python之父荷兰人吉多·范罗苏姆(Guido van Rossum)在CPU单核时代为了充分地利用单核CPU的使用率，在解释器层面实现了一把全局互斥锁。</p><p>  官方说明：In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</p><p>  翻译：Python官方解释器（CPython解释器）的内存管理是不安全的，因此它有一个全局解释器锁（Global Interpreter Lock简称GIL），它使得在任何时刻都只有一个线程在执行Python字节码。这也是使得标准版本的Python并不能实现真正的多线程并发的直接原因。</p><p>  不过对于现在的多核处理器时代来说就是：一核有难，多核围观。</p><h2 id="Python多线程">Python多线程</h2><h3 id="Thread类与线程函数">Thread类与线程函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name, sec)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param name: 名字</span></span><br><span class="line"><span class="string">    :param sec: 休眠时间，单位：秒</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"Hello："</span>, name, <span class="string">"时间："</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">"see you"</span>, name, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建第一个线程对象，通过target关键字参数传入指定函数，通过args传入指定函数所需参数，以元组形式</span></span><br><span class="line">    thread1 = threading.Thread(target=func, args=(<span class="string">"xiuxing"</span>, <span class="number">5</span>))</span><br><span class="line">    <span class="comment"># 启动第一个线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    <span class="comment"># 创建第二个线程对象，通过target关键字参数传入指定函数，通过args传入指定函数所需参数，以元组形式</span></span><br><span class="line">    thread2 = threading.Thread(target=func, args=(<span class="string">"Mr.xiuxing"</span>, <span class="number">10</span>))</span><br><span class="line">    <span class="comment"># 启动第二个线程</span></span><br><span class="line">    thread2.start()</span><br><span class="line">    <span class="comment"># 等待第一个线程函数执行完毕</span></span><br><span class="line">    thread1.join()</span><br><span class="line">    <span class="comment"># 等待第二个线程函数执行完毕</span></span><br><span class="line">    thread2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;Hello： xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">55</span> <span class="number">2020</span></span><br><span class="line">   Hello： Mr.xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">55</span> <span class="number">2020</span></span><br><span class="line">   see you xiuxing Wed Apr  <span class="number">1</span> <span class="number">16</span>:<span class="number">36</span>:<span class="number">00</span> <span class="number">2020</span></span><br><span class="line">   see you Mr.xiuxing Wed Apr  <span class="number">1</span> <span class="number">16</span>:<span class="number">36</span>:<span class="number">05</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><h3 id="Thread类与线程对象">Thread类与线程对象</h3><p>  Thread类构造方法的target关键字参数不仅可以是一个函数，还可以是一个对象，可以称这个对象为线程对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># func 表示线程函数， args表示线程函数的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当线程启动时会调用该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.func(*self.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name, sec)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello："</span>, name, <span class="string">"时间："</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">"see you"</span>, name, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"程序开始时间："</span>, ctime())</span><br><span class="line">    <span class="comment"># 创建第一个线程对象，通过target关键字参数传入指定对象</span></span><br><span class="line">    thread1 = threading.Thread(target=MyThread(func, (<span class="string">"xiuxing"</span>, <span class="number">5</span>)))</span><br><span class="line">    <span class="comment"># 启动第一个线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    <span class="comment"># 创建第二个线程对象，通过target关键字参数传入指定对象</span></span><br><span class="line">    thread2 = threading.Thread(target=MyThread(func, (<span class="string">"Mr.xiuxing"</span>, <span class="number">10</span>)))</span><br><span class="line">    <span class="comment"># 启动第二个线程</span></span><br><span class="line">    thread2.start()</span><br><span class="line">    <span class="comment"># 创建第三个线程对象，通过target关键字参数传入指定对象</span></span><br><span class="line">    thread3 = threading.Thread(target=MyThread(func, (<span class="string">"Sir"</span>, <span class="number">20</span>)))</span><br><span class="line">    <span class="comment"># 启动第三个线程</span></span><br><span class="line">    thread3.start()</span><br><span class="line">    <span class="comment"># 等待第一个线程函数执行完毕</span></span><br><span class="line">    thread1.join()</span><br><span class="line">    <span class="comment"># 等待第二个线程函数执行完毕</span></span><br><span class="line">    thread2.join()</span><br><span class="line">    <span class="comment"># 等待第三个线程函数执行完毕</span></span><br><span class="line">    thread3.join()</span><br><span class="line">    print(<span class="string">"程序结束时间："</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;程序开始时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">06</span> <span class="number">2020</span></span><br><span class="line">   Hello： xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">06</span> <span class="number">2020</span></span><br><span class="line">   Hello： Mr.xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">06</span> <span class="number">2020</span></span><br><span class="line">   Hello： Sir 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">06</span> <span class="number">2020</span></span><br><span class="line">   see you xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">11</span> <span class="number">2020</span></span><br><span class="line">   see you Mr.xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">16</span> <span class="number">2020</span></span><br><span class="line">   see you Sir Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">26</span> <span class="number">2020</span></span><br><span class="line">   程序结束时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">26</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><h3 id="继承Thread类">继承Thread类</h3><p>  继承threading.Thread，重构父类的构造方法和 run 方法，但不将线程函数写进run方法中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="comment"># 重写父类构造方法， func为线程函数，name为线程名，args为传入线程函数的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args, name)</span>:</span></span><br><span class="line">        super().__init__(target=func, name=name, args=args)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写run方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._target(*self._args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name, sec)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello："</span>, name, <span class="string">"时间："</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">"see you"</span>, name, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"程序开始时间："</span>, ctime())</span><br><span class="line">    <span class="comment"># 创建第一个线程对象，传入线程函数，线程函数参数(以元组形式)，线程名</span></span><br><span class="line">    thread1 = MyThread(func, (<span class="string">"xiuxing"</span>, <span class="number">5</span>), <span class="string">'线程1'</span>)</span><br><span class="line">    <span class="comment"># 创建第二个线程对象，传入线程函数，线程函数参数(以元组形式)，线程名</span></span><br><span class="line">    thread2 = MyThread(func, (<span class="string">"Mr.xiuxing"</span>, <span class="number">10</span>), <span class="string">'线程2'</span>)</span><br><span class="line">    <span class="comment"># 启动第一个线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    print(thread1.name)</span><br><span class="line">    <span class="comment"># 启动第二个线程</span></span><br><span class="line">    thread2.start()</span><br><span class="line">    print(thread2.name)</span><br><span class="line">    <span class="comment"># 等待第一个线程函数执行完毕</span></span><br><span class="line">    thread1.join()</span><br><span class="line">    <span class="comment"># 等待第二个线程函数执行完毕</span></span><br><span class="line">    thread2.join()</span><br><span class="line">    print(<span class="string">"程序结束时间："</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;程序开始时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">51</span> <span class="number">2020</span></span><br><span class="line">   Hello： xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">51</span> <span class="number">2020</span></span><br><span class="line">   线程<span class="number">1</span></span><br><span class="line">   Hello： Mr.xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">51</span> <span class="number">2020</span></span><br><span class="line">   线程<span class="number">2</span></span><br><span class="line">   see you xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">56</span> <span class="number">2020</span></span><br><span class="line">   see you Mr.xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">46</span>:<span class="number">01</span> <span class="number">2020</span></span><br><span class="line">   程序结束时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">46</span>:<span class="number">01</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><p>  继承threading.Thread，重构父类的构造方法，并将线程函数写进run方法中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="comment"># 重写父类构造方法， f_name、sec为线程函数参数，name为线程名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, f_name, sec, name)</span>:</span></span><br><span class="line">        super().__init__(name=name)</span><br><span class="line">        self.f_name = f_name</span><br><span class="line">        self.sec = sec</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将线程函数写进run方法中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Hello："</span>, self.f_name, <span class="string">"时间："</span>, ctime())</span><br><span class="line">        sleep(self.sec)</span><br><span class="line">        print(<span class="string">"see you"</span>, self.f_name, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"程序开始时间："</span>, ctime())</span><br><span class="line">    <span class="comment"># 创建第一个线程对象，传入重构后run方法参数以及线程名</span></span><br><span class="line">    thread1 = MyThread(<span class="string">"xiuxing"</span>, <span class="number">5</span>, <span class="string">'线程1'</span>)</span><br><span class="line">    <span class="comment"># 创建第二个线程对象，传入重构后run方法参数以及线程名</span></span><br><span class="line">    thread2 = MyThread(<span class="string">"Mr.xiuxing"</span>, <span class="number">10</span>, <span class="string">'线程2'</span>)</span><br><span class="line">    <span class="comment"># 启动第一个线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    print(thread1.name)</span><br><span class="line">    <span class="comment"># 启动第二个线程</span></span><br><span class="line">    thread2.start()</span><br><span class="line">    print(thread2.name)</span><br><span class="line">    <span class="comment"># 等待第一个线程函数执行完毕</span></span><br><span class="line">    thread1.join()</span><br><span class="line">    <span class="comment"># 等待第二个线程函数执行完毕</span></span><br><span class="line">    thread2.join()</span><br><span class="line">    print(<span class="string">"程序结束时间："</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;程序开始时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">02</span> <span class="number">2020</span></span><br><span class="line">   Hello： xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">02</span> <span class="number">2020</span></span><br><span class="line">   线程<span class="number">1</span></span><br><span class="line">   Hello： Mr.xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">02</span> <span class="number">2020</span></span><br><span class="line">   线程<span class="number">2</span></span><br><span class="line">   see you xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">07</span> <span class="number">2020</span></span><br><span class="line">   see you Mr.xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">12</span> <span class="number">2020</span></span><br><span class="line">   程序结束时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">12</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><p>  从上面两个例子可以看出，run方法不一定要在MyThread类中重写，因为Thread中已经有默认实现的了。如果想扩展也可以重写。</p><h3 id="线程锁">线程锁</h3><p>  多线程的目的是为了让多个程序并发执行，线程之间是进行随机调度，但是在某些情况下让多个程序同时运行会有很多麻烦，如果这些并发运行的程序还共享数据，很有可能会产生脏数据(当有多个程序同时读写一个或一组变量时，因为读写顺序的问题造成最终结果与期望值不一致)。<br>  线程锁的目的是将一段代码锁住，一旦获得了锁权限，除非解锁，否则其他任何代码都无法再次获得锁权限。也就是在同一时刻仅允许一个线程执行操作。<br>  想要使用线程锁，需要先创建Lock类的实例，然后通过Lock对象的acquire方法获得锁权限，当需要完成原子操作的代码执行完后，再使用Lock对象的release方法解锁。<b>锁对象需要放在线程函数的外面作为一个全局变量，这样所有的线程函数实例就可以共享这个变量了。</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> atexit <span class="keyword">import</span> register</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock, currentThread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建锁对象</span></span><br><span class="line">lock = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取锁权限</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        f = open(<span class="string">'text.txt'</span>, <span class="string">'a'</span>)</span><br><span class="line">        print(<span class="string">"Thread Name ="</span>, currentThread().name, <span class="string">'i ='</span>, i)</span><br><span class="line">        f.write(<span class="string">"Thread Name = "</span>+currentThread().name+<span class="string">' i = '</span>+str(i)+<span class="string">'\n'</span>)</span><br><span class="line">        f.close()</span><br><span class="line">        sleep((random.randint(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line">    <span class="comment"># 释放线程锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 通过循环创建并启动三个线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        Thread(target=func).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当程序结束时会调用这个函数</span></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'线程执行完毕：'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>  先将func函数中的 lock.acquire() 和 lock.release() 语句注释，即在不使用线程锁的情况下运行程序，观察输出结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">4</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">4</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">4</span></span><br><span class="line">线程执行完毕： Tue Apr  <span class="number">7</span> <span class="number">15</span>:<span class="number">13</span>:<span class="number">20</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><p>  结果显而易见，如果没有使用线程锁，当调用sleep函数让线程休眠时，当前线程会释放CPU计算资源，而其他线程就会趁机抢占CPU计算资源，因此程序在启动的三个线程中交替执行。<br>  现在为func函数加上线程锁，再次运行程序，观察输出结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">4</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">4</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">4</span></span><br><span class="line">线程执行完毕： Tue Apr  <span class="number">7</span> <span class="number">15</span>:<span class="number">19</span>:<span class="number">50</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><p>  如果为func函数加上线程锁，只用当某个线程的线程函数执行完毕，才会运行另一个线程函数。</p><h3 id="信号量">信号量</h3><p>  信号量(Semaphore)，用于控制获取资源的线程数量。它使用与线程锁同样的方法名消耗和释放资源。acquire方法用于消耗资源，调用该方法计数器 -1，release方法用于释放资源，调用该方法计数器 +1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> BoundedSemaphore, Lock, Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建信号量对象，并设置计数器最大值，计数器不能超过这个值</span></span><br><span class="line">semaphore = BoundedSemaphore(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 输出当前计数器的值，输出结果：2</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 获取资源，计数器 -1</span></span><br><span class="line">semaphore.acquire()</span><br><span class="line"><span class="comment"># 输出结果：1</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 获取资源，计数器 -1</span></span><br><span class="line">semaphore.acquire()</span><br><span class="line"><span class="comment"># 输出结果：0</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 当计数器为0时，不能再获取资源， 所以acquire方法会返回False</span></span><br><span class="line"><span class="comment"># 输出结果：False</span></span><br><span class="line">print(semaphore.acquire(<span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 释放资源，计数器 +1</span></span><br><span class="line">semaphore.release()</span><br><span class="line"><span class="comment"># 输出结果 ：1</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 释放资源，计数器 +1</span></span><br><span class="line">semaphore.release()</span><br><span class="line"><span class="comment"># 输出结果 ：2</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 抛出异常，当计数器达到最大值时，不能再释放资源</span></span><br><span class="line">semaphore.release()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"E:/Code/Test/信号量.py"</span>, line <span class="number">31</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    semaphore.release()</span><br><span class="line">  File <span class="string">"c:\program\anaconda\Lib\threading.py"</span>, line <span class="number">482</span>, <span class="keyword">in</span> release</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"Semaphore released too many times"</span>)</span><br><span class="line">ValueError: Semaphore released too many times</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>  当计数器为0时调用acquire方法会有两种结果。第一种：当acquire方法的参数值为True或不指定参数时，acquire会处于阻塞状态，直到release释放资源后。第二种：acquire方法的参数值为False，当计数器为0时调用acquire方法不会发生阻塞，而是返回False，表示未获得资源，如果成功获取资源则会返回True。<br>  release方法在释放资源时，如果计数器已经达到最大值，会抛出异常，表示没有资源可供释放。</p><h2 id="生产者消费者模型">生产者消费者模型</h2><p>  生产者生产商品不用等待消费者处理，将其放到缓冲队列，消费者不用找生产者要数据，而是从缓冲队列提取商品处理。即生产者和消费者彼此之间不直接通讯，而是通过缓冲队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock, Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程锁</span></span><br><span class="line">lock = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从Thread派生的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args)</span>:</span></span><br><span class="line">        super().__init__(target=func, args=args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者向队列中添加商品</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producerQ</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 获取线程锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(ctime(), <span class="string">'生产了一个对象，并将其添加到队列中'</span>, end=<span class="string">' '</span>)</span><br><span class="line">    <span class="comment"># 向队列中添加商品</span></span><br><span class="line">    queue.put(<span class="string">'商品'</span>)</span><br><span class="line">    print(<span class="string">'队列大小'</span>, queue.qsize())</span><br><span class="line">    <span class="comment"># 释放线程锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者从队列中获取商品</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumerQ</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 获取线程锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="comment"># 向队列中添加商品</span></span><br><span class="line">    queue.get(<span class="number">1</span>)</span><br><span class="line">    print(ctime(), <span class="string">'消费了一个对象，队列大小'</span>, queue.qsize())</span><br><span class="line">    <span class="comment"># 释放线程锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成多个生产者</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(queue, loops)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        producerQ(queue)</span><br><span class="line">        sleep(randrange(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成多个消费者</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(queue, loops)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        consumerQ(queue)</span><br><span class="line">        sleep(randrange(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">funcs = [producer, consumer]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    l_loops = randrange(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">    q = Queue(<span class="number">32</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建2个线程运行producer函数和consumer</span></span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> funcs:</span><br><span class="line">        t = MyThread(func, (q, l_loops))</span><br><span class="line">        threads.append(t)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="comment"># 等待线程结束</span></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    print(<span class="string">'所有工作完成'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">20</span> <span class="number">2020</span> 生产了一个对象，并将其添加到队列中 队列大小 <span class="number">1</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">20</span> <span class="number">2020</span> 消费了一个对象，队列大小 <span class="number">0</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">21</span> <span class="number">2020</span> 生产了一个对象，并将其添加到队列中 队列大小 <span class="number">1</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">21</span> <span class="number">2020</span> 消费了一个对象，队列大小 <span class="number">0</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">22</span> <span class="number">2020</span> 生产了一个对象，并将其添加到队列中 队列大小 <span class="number">1</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">22</span> <span class="number">2020</span> 消费了一个对象，队列大小 <span class="number">0</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">23</span> <span class="number">2020</span> 生产了一个对象，并将其添加到队列中 队列大小 <span class="number">1</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">23</span> <span class="number">2020</span> 消费了一个对象，队列大小 <span class="number">0</span></span><br><span class="line">所有工作完成</span><br></pre></td></tr></table></figure><h2 id="Python多进程">Python多进程</h2><p>  尽管多线程可以实现并发，但由于多线程之间是共享了当前进程的内存，也就是说：线程可以申请到的资源有限。想要更进一步利用CPU性能，就需要使用多进程。在Python中可以使用multiprocessing 模块的Pool类创建进程池。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Run process %s (%s)...'</span> % (current_process().name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (current_process().name, (end - start)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        pool.apply_async(func)    <span class="comment"># apply_async实现非阻塞模式，apply实现阻塞模式</span></span><br><span class="line">    print(<span class="string">'Waiting for all sub-processes done...'</span>)</span><br><span class="line">    pool.close()    <span class="comment"># 先调用close()才能调用join()</span></span><br><span class="line">    pool.join()    <span class="comment"># 等待所有子进程执行完毕</span></span><br><span class="line">    print(<span class="string">'All sub-processes done.'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Parent process <span class="number">7120.</span></span><br><span class="line">Waiting <span class="keyword">for</span> all sub-processes done...</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-3</span> (<span class="number">13136</span>)...</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-1</span> (<span class="number">13868</span>)...</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-2</span> (<span class="number">4636</span>)...</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-4</span> (<span class="number">10076</span>)...</span><br><span class="line">Task SpawnPoolWorker<span class="number">-2</span> runs <span class="number">0.09</span> seconds.</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-2</span> (<span class="number">4636</span>)...</span><br><span class="line">Task SpawnPoolWorker<span class="number">-3</span> runs <span class="number">0.28</span> seconds.</span><br><span class="line">Task SpawnPoolWorker<span class="number">-4</span> runs <span class="number">0.42</span> seconds.</span><br><span class="line">Task SpawnPoolWorker<span class="number">-2</span> runs <span class="number">1.81</span> seconds.</span><br><span class="line">Task SpawnPoolWorker<span class="number">-1</span> runs <span class="number">2.70</span> seconds.</span><br><span class="line">All sub-processes done.</span><br></pre></td></tr></table></figure><p><b>未完待续。。。有时间再补充</b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;There must be a good reason for our suffering. ——《加勒比海盗》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;苦尽则甘来。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://mrxiuxing.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="多线程" scheme="http://mrxiuxing.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多进程" scheme="http://mrxiuxing.cn/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="GIL锁" scheme="http://mrxiuxing.cn/tags/GIL%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>模拟登录淘宝并抓取指定商品(Selenium + pyquery + MongoDB)</title>
    <link href="http://mrxiuxing.cn/posts/fc939d6e.html"/>
    <id>http://mrxiuxing.cn/posts/fc939d6e.html</id>
    <published>2020-03-23T09:51:54.000Z</published>
    <updated>2020-03-23T09:51:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>The future has not been written. There is no fate but what we make for ourselves. ——《终结者3》</center></strong></em><br><em><strong><center>一切未成定局，未来等你去开创。</center></strong></em></p><a id="more"></a><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考，不得用于商业用途。</b></p><h2 id="使用微博账号登录淘宝">使用微博账号登录淘宝</h2><p>  目前的淘宝，如果未登录是不能搜索商品的，如果使用淘宝的账号密码需要验证验证码，然后就想着用其他账号登录淘宝–微博账号。使用微博账号登录淘宝需要先绑定淘宝账号。步骤：登录淘宝 —— 点击你的用户名 —— 点击账号管理 —— 点击微博绑定设置，然后按照提示一步步来就好。<br><img src="/posts/fc939d6e/weibosetting.png" alt></p><h3 id="登录流程">登录流程</h3><p><img src="/posts/fc939d6e/weiboliucheng.png" alt></p><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taobao</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://login.taobao.com/member/login.jhtml'</span></span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># options.add_experimental_option("prefs", &#123;"profile.managed_default_content_settings.images": 2&#125;)  # 不加载图片,加快访问速度</span></span><br><span class="line">        options.add_experimental_option(<span class="string">'excludeSwitches'</span>, [<span class="string">'enable-automation'</span>])  <span class="comment"># 设置为开发者模式，防止被各大网站识别出来使用了Selenium</span></span><br><span class="line">        self.browser = webdriver.Chrome(options=options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)  <span class="comment"># 超时时长为10s</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, weibo_username, weibo_password)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用微博登录，避免验证</span></span><br><span class="line"><span class="string">        :param weibo_username: 微博用户名</span></span><br><span class="line"><span class="string">        :param weibo_password: 微博密码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.PARTIAL_LINK_TEXT, <span class="string">'微博登录'</span>))).click()    <span class="comment"># 使用微博登录</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.username &gt; .W_input'</span>))).send_keys(weibo_username)    <span class="comment"># 输入账号</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.password &gt; .W_input'</span>))).send_keys(weibo_password)    <span class="comment"># 输入密码</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@class="btn_tip"]/a/span'</span>))).click()    <span class="comment"># 点击登录</span></span><br><span class="line">        <span class="comment"># 打印淘宝会员昵称</span></span><br><span class="line">        taobao_user = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.site-nav-user &gt; a.site-nav-login-info-nick'</span>)))</span><br><span class="line">        print(taobao_user.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    weibo_username = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博账号</span></span><br><span class="line">    weibo_password = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博密码</span></span><br><span class="line">    taobao = Taobao()</span><br><span class="line">    taobao.login(weibo_username, weibo_password)</span><br></pre></td></tr></table></figure><h2 id="抓取商品">抓取商品</h2><p>  使用selenium模拟登录后是跳转到了淘宝首页，我们可以继续模拟搜索商品以及翻页行为。</p><h3 id="搜索商品">搜索商品</h3><p>  在搜索框输入商品名，点击搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, kw)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param kw: 商品名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>))).send_keys(kw)</span><br><span class="line">    self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.search-button &gt; button.btn-search.tb-bg'</span>))).click()</span><br></pre></td></tr></table></figure><h3 id="翻页行为">翻页行为</h3><p>  提取一共多少页all_page_num，提取当前页activate_page_num，如果activate_page_num小于all_page_num，模拟点击下一页，否则改变flag (isEND)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下一页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        all_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.total'</span>))).get_attribute(<span class="string">"innerHTML"</span>).split()[<span class="number">1</span>])</span><br><span class="line">        activate_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.active &gt; span.num'</span>))).get_attribute(<span class="string">"innerHTML"</span>))</span><br><span class="line">        <span class="keyword">if</span> activate_page_num &lt; all_page_num:</span><br><span class="line">            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.next a.J_Ajax.num.icon-tag'</span>))).click()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.isEND = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        self.next_page()</span><br></pre></td></tr></table></figure><h3 id="解析页面">解析页面</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        doc = pq(self.browser.page_source)</span><br><span class="line">        items = doc(<span class="string">'#mainsrp-itemlist .items .item'</span>).items()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            product = [&#123;</span><br><span class="line">                <span class="string">"image"</span>: item.find(<span class="string">'.pic .img'</span>).attr(<span class="string">'data-src'</span>),  <span class="comment"># 图片地址</span></span><br><span class="line">                <span class="string">"price"</span>: item.find(<span class="string">'.price'</span>).text(),  <span class="comment"># 价格</span></span><br><span class="line">                <span class="string">"deal"</span>: item.find(<span class="string">'.deal-cnt'</span>).text(),  <span class="comment"># 购买人次</span></span><br><span class="line">                <span class="string">"title"</span>: item.find(<span class="string">'.title'</span>).text(),  <span class="comment"># 标题</span></span><br><span class="line">                <span class="string">"shop"</span>: item.find(<span class="string">'.shop'</span>).text(),  <span class="comment"># 店铺</span></span><br><span class="line">                <span class="string">"location"</span>: item.find(<span class="string">'.location'</span>).text(),  <span class="comment"># 店铺地址</span></span><br><span class="line">            &#125;]</span><br><span class="line">            <span class="comment"># print(product)</span></span><br><span class="line">            self.data.extend(product)</span><br><span class="line">        self.next_page()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        self.parse()</span><br></pre></td></tr></table></figure><h3 id="持久化储存至MongoDB">持久化储存至MongoDB</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        print(<span class="string">"储存到MongoDB成功"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"储存到MongoDB失败"</span>)</span><br></pre></td></tr></table></figure><h3 id="整合所有代码">整合所有代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taobao</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, trade_name)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEND = <span class="literal">False</span>    <span class="comment"># 判断是否为最后一页</span></span><br><span class="line">        self.trade_name = trade_name    <span class="comment"># 要搜索的商品名及MongoDB表名</span></span><br><span class="line">        self.url = <span class="string">'https://login.taobao.com/member/login.jhtml'</span></span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># options.add_experimental_option("prefs", &#123;"profile.managed_default_content_settings.images": 2&#125;)  # 不加载图片,加快访问速度</span></span><br><span class="line">        options.add_experimental_option(<span class="string">'excludeSwitches'</span>, [<span class="string">'enable-automation'</span>])  <span class="comment"># 设置为开发者模式，防止被各大网站识别出来使用了Selenium</span></span><br><span class="line">        self.browser = webdriver.Chrome(options=options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)  <span class="comment"># 超时时长为10s</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client[<span class="string">'taobao'</span>]</span><br><span class="line">        self.collection = db[self.trade_name]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, weibo_username, weibo_password)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用微博登录，避免验证</span></span><br><span class="line"><span class="string">        :param weibo_username: 微博用户名</span></span><br><span class="line"><span class="string">        :param weibo_password: 微博密码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.PARTIAL_LINK_TEXT, <span class="string">'微博登录'</span>))).click()    <span class="comment"># 使用微博登录</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.username &gt; .W_input'</span>))).send_keys(weibo_username)    <span class="comment"># 输入账号</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.password &gt; .W_input'</span>))).send_keys(weibo_password)    <span class="comment"># 输入密码</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@class="btn_tip"]/a/span'</span>))).click()    <span class="comment"># 点击登录</span></span><br><span class="line">        <span class="comment"># 打印淘宝会员昵称</span></span><br><span class="line">        taobao_user = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.site-nav-user &gt; a.site-nav-login-info-nick'</span>)))</span><br><span class="line">        print(taobao_user.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, kw)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param kw: 搜索关键字</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>))).send_keys(kw)</span><br><span class="line">        self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.search-button &gt; button.btn-search.tb-bg'</span>))).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下一页</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_page</span><span class="params">(self, page=None)</span>:</span>    <span class="comment"># 如果不指定页码，则抓取全部</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> page:</span><br><span class="line">                all_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.total'</span>))).get_attribute(<span class="string">"innerHTML"</span>).split()[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                all_page_num = page</span><br><span class="line">            activate_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.active &gt; span.num'</span>))).get_attribute(<span class="string">"innerHTML"</span>))</span><br><span class="line">            <span class="keyword">if</span> activate_page_num &lt; all_page_num:</span><br><span class="line">                self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.next a.J_Ajax.num.icon-tag'</span>))).click()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.isEND = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            self.next_page()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析页面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            doc = pq(self.browser.page_source)</span><br><span class="line">            items = doc(<span class="string">'#mainsrp-itemlist .items .item'</span>).items()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                product = [&#123;</span><br><span class="line">                    <span class="string">"image"</span>: item.find(<span class="string">'.pic .img'</span>).attr(<span class="string">'data-src'</span>),  <span class="comment"># 图片地址</span></span><br><span class="line">                    <span class="string">"price"</span>: item.find(<span class="string">'.price'</span>).text(),  <span class="comment"># 价格</span></span><br><span class="line">                    <span class="string">"deal"</span>: item.find(<span class="string">'.deal-cnt'</span>).text(),  <span class="comment"># 购买人次</span></span><br><span class="line">                    <span class="string">"title"</span>: item.find(<span class="string">'.title'</span>).text(),  <span class="comment"># 标题</span></span><br><span class="line">                    <span class="string">"shop"</span>: item.find(<span class="string">'.shop'</span>).text(),  <span class="comment"># 店铺</span></span><br><span class="line">                    <span class="string">"location"</span>: item.find(<span class="string">'.location'</span>).text(),  <span class="comment"># 店铺地址</span></span><br><span class="line">                &#125;]</span><br><span class="line">                <span class="comment"># print(product)</span></span><br><span class="line">                self.data.extend(product)</span><br><span class="line">            self.next_page()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            self.parse()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 持久化储存至MongoDB</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">                <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            print(<span class="string">"储存到MongoDB成功"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">"储存到MongoDB失败"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.search(self.trade_name)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.isEND:    <span class="comment"># 循环条件 存在下一页</span></span><br><span class="line">            self.parse()</span><br><span class="line">        self.save_to_mongo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    weibo_username = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博账号</span></span><br><span class="line">    weibo_password = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博密码</span></span><br><span class="line">    trade_name = <span class="string">'梅艳芳'</span>    <span class="comment"># 改成你想要抓取的商品</span></span><br><span class="line">    taobao = Taobao(trade_name)</span><br><span class="line">    taobao.login(weibo_username, weibo_password)</span><br><span class="line">    taobao.main()</span><br></pre></td></tr></table></figure><h2 id="效果展示">效果展示</h2><h3 id="爬取效果">爬取效果</h3><p><img src="/posts/fc939d6e/taobaoend.gif" alt></p><h3 id="结果展示">结果展示</h3><p><img src="/posts/fc939d6e/result.png" alt></p><h2 id="写在最后">写在最后</h2><p>  梅艳芳：她，不是一两句话就能说清楚的。很多90后应该都不知道这个名字了。很多次我问我不同的朋友：你知道梅艳芳吗？他们的回答出奇的一致，梅艳芳？你说的是梅兰芳吧！我抓取了关于她的所有商品，很多都是0人付款。或许是时代在前进，属于她的时代已经往事如烟，随风飘散，人们渐渐将她遗忘。但是，我写这段话的时候她的那首《梦里共醉》仿佛依然萦绕在我的耳畔。</p><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考，不得用于商业用途。</b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;The future has not been written. There is no fate but what we make for ourselves. ——《终结者3》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;一切未成定局，未来等你去开创。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="http://mrxiuxing.cn/tags/Selenium/"/>
    
      <category term="pyquery" scheme="http://mrxiuxing.cn/tags/pyquery/"/>
    
      <category term="MongoDB" scheme="http://mrxiuxing.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>响应状态码及其详细描述</title>
    <link href="http://mrxiuxing.cn/posts/867e7a3d.html"/>
    <id>http://mrxiuxing.cn/posts/867e7a3d.html</id>
    <published>2020-03-19T04:04:46.000Z</published>
    <updated>2020-03-19T04:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>We all make our choices. The hard part is living with them. ——《妙笔生花》</center></strong></em><br><em><strong><center>人的一生要做出很多选择，但是最难得是带着自己的选择去生活下去。</center></strong></em></p><a id="more"></a><table><thead><tr><th style="text-align:center">状态码10x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td>继续</td><td>客户端应继续提出请求。服务器已收到部分请求，正等待其余部分</td></tr><tr><td style="text-align:center">101</td><td>切换协议</td><td>服务器根据客户端的请求切换协议。只能向上请求更高级的协议，如切换到HTTP的新版本协议</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码20x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td>请求成功</td><td>服务器已经处理了请求</td></tr><tr><td style="text-align:center">201</td><td>已创建</td><td>请求成功，并且服务器创建了新的资源</td></tr><tr><td style="text-align:center">202</td><td>已接受</td><td>服务器已接受请求，但并未处理</td></tr><tr><td style="text-align:center">203</td><td>非授权信息</td><td>请求成功。但返回的数据不在原始服务器，可能来自另一个数据源</td></tr><tr><td style="text-align:center">204</td><td>已创建</td><td>请求成功，并且服务器创建了新的资源</td></tr><tr><td style="text-align:center">205</td><td>无内容</td><td>服务器成功处理，但未返回任何内容</td></tr><tr><td style="text-align:center">206</td><td>部分内容</td><td>服务器成功处理了部分请求</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码30x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">300</td><td>多种选择</td><td>请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端(如浏览器)选择</td></tr><tr><td style="text-align:center">301</td><td>永久移动</td><td>请求的资源已经永久移动到新位置，即永久重定向</td></tr><tr><td style="text-align:center">302</td><td>临时移动</td><td>请求的网页暂时跳转到其他页面，即临时重定向</td></tr><tr><td style="text-align:center">303</td><td>查看其他地址</td><td>与301类似。使用GET或POST请求查看</td></tr><tr><td style="text-align:center">304</td><td>未修改</td><td>此次请求的资源未发生修改，继续使用上次的资源</td></tr><tr><td style="text-align:center">305</td><td>使用代理</td><td>所请求的资源必须通过代理访问</td></tr><tr><td style="text-align:center">306</td><td>未使用</td><td>已经被废弃的HTTP状态码</td></tr><tr><td style="text-align:center">307</td><td>临时重定向</td><td>与302类似。使用GET请求重定向</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码4xx</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">400</td><td>错误请求</td><td>服务器无法解析该请求</td></tr><tr><td style="text-align:center">401</td><td>未授权</td><td>请求要求认证用户的身份</td></tr><tr><td style="text-align:center">402</td><td>保留</td><td>在未来可能使用的状态码</td></tr><tr><td style="text-align:center">403</td><td>禁止访问</td><td>服务器理解客户端的请求，但是拒绝执行该请求</td></tr><tr><td style="text-align:center">404</td><td>未找到</td><td>服务器找不到请求的资源</td></tr><tr><td style="text-align:center">405</td><td>方法禁用</td><td>服务器禁用了请求中指定的方法</td></tr><tr><td style="text-align:center">406</td><td>不接收</td><td>无法使用请求的内容响应对应资源</td></tr><tr><td style="text-align:center">407</td><td>需要代理授权</td><td>请求要求代理的身份认证，与401类似，但请求者应使用代理进行授权</td></tr><tr><td style="text-align:center">408</td><td>请求超时</td><td>服务器请求超时</td></tr><tr><td style="text-align:center">409</td><td>冲突</td><td>服务器未返回客户端的PUT请求可能会返回此状态码，服务器处理请求时发生了冲突</td></tr><tr><td style="text-align:center">410</td><td>已删除</td><td>请求的资源已永久删除</td></tr><tr><td style="text-align:center">411</td><td>需要有效长度</td><td>服务器不接受不含有有效长度字段的请求</td></tr><tr><td style="text-align:center">412</td><td>未满足前提条件</td><td>客户端请求信息的先决条件错误</td></tr><tr><td style="text-align:center">413</td><td>请求实体过大</td><td>请求实体过大，超出服务器处理能力</td></tr><tr><td style="text-align:center">414</td><td>请求URL过长</td><td>请求网址过长，服务器无法处理</td></tr><tr><td style="text-align:center">415</td><td>不支持类型</td><td>请求格式不被请求页面支持</td></tr><tr><td style="text-align:center">416</td><td>请求范围不符</td><td>客户端请求的范围无效</td></tr><tr><td style="text-align:center">417</td><td>未满足期望值</td><td>服务器无法满足Except的请求头信息</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码50x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">500</td><td>服务器内部错误</td><td>服务器内部错误，无法完成请求</td></tr><tr><td style="text-align:center">501</td><td>未实现</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td style="text-align:center">502</td><td>网关错误</td><td>服务器作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到一个无效的请求</td></tr><tr><td style="text-align:center">503</td><td>服务不可用</td><td>由于超载或者系统维护，服务器暂时无法处理客户端的请求</td></tr><tr><td style="text-align:center">504</td><td>网关超时</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td style="text-align:center">505</td><td>HTTP版本不支持</td><td>服务器不支持请求的HTTP版本，无法完成处理</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;We all make our choices. The hard part is living with them. ——《妙笔生花》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;人的一生要做出很多选择，但是最难得是带着自己的选择去生活下去。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://mrxiuxing.cn/categories/HTTP/"/>
    
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="HTTP" scheme="http://mrxiuxing.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器之函数运行时间</title>
    <link href="http://mrxiuxing.cn/posts/6670c259.html"/>
    <id>http://mrxiuxing.cn/posts/6670c259.html</id>
    <published>2020-03-17T09:16:59.000Z</published>
    <updated>2020-03-17T09:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>If you put your mind to it, you can accomplish anything. ——《回到未来》</center></strong></em><br><em><strong><center>有志者，事竟成。</center></strong></em></p><a id="more"></a><h2 id="目标">目标</h2><p>  在《requests中文乱码问题》这篇文章中提到了两种解决方式，这两种方式究竟哪种方式是值得推荐的那？一般来说抓取网页与持久化储存是最耗时的，要想提高抓取效率就得从这两方面入手。那我们就从时间入手，在不改变原代码的情况下，可以使用装饰器来运算两种方式运行所需要的时间。</p><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行时间装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_time</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start_ts = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end_ts = time.time()</span><br><span class="line">        second = end_ts - start_ts</span><br><span class="line">        <span class="keyword">return</span> second</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@run_time</span></span><br><span class="line"><span class="comment"># 手动指定编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@run_time</span></span><br><span class="line"><span class="comment"># 使用apparent_encoding根据网页内容分析编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml2</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 n 次平均时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_runs_times</span><span class="params">(func,url, times=<span class="number">10</span>)</span>:</span></span><br><span class="line">    runtime_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(times):</span><br><span class="line">        runtime = func(url)</span><br><span class="line">        runtime_list.append(runtime)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;func.__name__&#125;</span> runs <span class="subst">&#123;times&#125;</span> times：<span class="subst">&#123;sum(runtime_list) / times&#125;</span>s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn/'</span></span><br><span class="line">get_runs_times(getHtml,url, <span class="number">100</span>)</span><br><span class="line">get_runs_times(getHtml2,url, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;getHtml runs 100 times：0.19394637107849122s</span><br><span class="line">&gt;&gt;&gt;getHtml2 runs 100 times：0.46304878234863284s</span><br></pre></td></tr></table></figure><h2 id="结论">结论</h2><p>  答案很明显手动指定编码格式运行100次的平均时间更少，甚至连使用apparent_encoding根据网页内容分析编码方式的1/2都不到。手动指定编码格式只需要你查看网页源代码头部的charset就可以省下一半时间，所以我的建议是：如果出现中文乱码，手动指定编码格式即可。</p><h2 id="其他">其他</h2><p>  细心的小伙伴应该会发现在时间装饰器中，使用了@wraps(func)，它是使用 from functools import wraps 导入的，那么它有什么作用那？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。</span><br></pre></td></tr></table></figure><p>  这可以让我们在装饰器里面访问在装饰之前的函数的属性。例如在计算运行n次平均时间的函数中我们获取了函数的__name__ 属性,这也就使得这个函数更加通用了。如果去掉装饰器中的@wraps(func)这一句，那么在计算运行n次平均时间的函数中__name__ 属性获取到的就是wrapper了。</p><p>  此外在计算运行n次平均时间的函数中我们还使用了f&quot;{}{}{}&quot;，也就是f-string，亦称为格式化字符串常量(formatted string literals),是Python3.6新引入的一种字符串格式化方法。f-string在形式上是以 f 或 F 修饰符引领的字符串（f’xxx’或 F’xxx’），以大括号 {} 标明被替换的字段；f-string在本质上并不是字符串常量，而是一个在运行时运算求值的表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">f'<span class="subst">&#123;func.__name__&#125;</span> runs <span class="subst">&#123;times&#125;</span> times：<span class="subst">&#123;sum(runtime_list) / times&#125;</span>s'</span>)</span><br></pre></td></tr></table></figure><p>  在上面的例子中我们使用f-string格式化了函数属性，传递了变量，甚至可直接在其中进行运算。它还有很多有趣的用法，大家快去发掘吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;If you put your mind to it, you can accomplish anything. ——《回到未来》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;有志者，事竟成。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://mrxiuxing.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>requests中文乱码问题</title>
    <link href="http://mrxiuxing.cn/posts/d166c216.html"/>
    <id>http://mrxiuxing.cn/posts/d166c216.html</id>
    <published>2020-03-17T06:49:52.000Z</published>
    <updated>2020-03-17T06:49:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Talent is luck. The important thing in life is courage. ——《曼哈顿》</center></strong></em><br><em><strong><center>有天赋是运气，生活中更为重要的是要有勇气。</center></strong></em></p><a id="more"></a><h2 id="发现问题">发现问题</h2><p>在使用requests.get()去抓取网页时，发现中文乱码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>大概是这个样子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"site-state"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives/"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>æ¥å¿<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-categories"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/categories/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>åç±»<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tags/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>æ ç­¾<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="问题原因">问题原因</h2><p>  当调用 Response.text 方法时，Requests首先在Response Headers检测是否存在指定的编码方式，如果不存在，则会使用 charade 来尝试猜测编码方式。在请求的网站中，如果Response Headers中的Content-Type只指定了Type，没有指定charset类型，并且 Content-Type 头部字段包含 text 的值时Requests才不去猜测编码方式。在这种情况下，默认字符集为ISO-8859-1，也就出现了中文乱码现象，这时就需要我们去指定编码方式。</p><h2 id="解决问题">解决问题</h2><h3 id="一-手动指定编码">一.手动指定编码</h3><p>  可以通过查看网页源代码中head下的charset=&quot;XXX&quot;来确定网页编码，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, maximum-scale&#x3D;2&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;theme-color&quot; content&#x3D;&quot;#222&quot;&gt;</span><br></pre></td></tr></table></figure><p>  很容易就发现网页的编码方式是UTF-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>  问题解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"site-state"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives/"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>日志<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-categories"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/categories/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tags/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-apparent-encoding根据网页内容分析编码方式">二.apparent_encoding根据网页内容分析编码方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>  问题同样解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"site-state"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives/"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>日志<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-categories"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/categories/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tags/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p><b>PS: 这两种方式究竟哪种才是值得推荐的那？<br>欲知结果如何，请看下篇文章<a href="https://salling.com.cn/posts/6670c259.html" target="_blank" rel="noopener">《Python装饰器之函数运行时间》</a></b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Talent is luck. The important thing in life is courage. ——《曼哈顿》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;有天赋是运气，生活中更为重要的是要有勇气。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="http://mrxiuxing.cn/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>Xpath解析本地Html文件</title>
    <link href="http://mrxiuxing.cn/posts/86d537dd.html"/>
    <id>http://mrxiuxing.cn/posts/86d537dd.html</id>
    <published>2020-03-16T07:34:05.000Z</published>
    <updated>2020-03-16T07:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>We work in the darkness to serve the light. ——《刺客信条》</center></strong></em><br><em><strong><center>我们鞠躬于黑暗，却向往着光明。</center></strong></em></p><a id="more"></a><h2 id="问题">问题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">提取如下html结构中的信息</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>坤坤<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>human<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>24<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>伊娃<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>机器人<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>生产日期：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2019-01-01<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>豆豆<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>动物<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>晗晗<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>人类<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">并生成如下数据结构：</span><br><span class="line">&#123;</span><br><span class="line">  'human': [&#123; age: 24, name: '坤坤' &#125;,&#123; age: 21, name: '晗晗' &#125;],</span><br><span class="line">  'robot': [&#123; dateTime: '2019-01-01', name: '伊娃' &#125;],</span><br><span class="line">  'animal': [&#123; age: 3, name: '豆豆' &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析">解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">"index.html"</span>,<span class="string">"rb"</span>)</span><br><span class="line">content=f.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">tree=etree.HTML(content)</span><br><span class="line">content = &#123;&#125;</span><br><span class="line">human = []</span><br><span class="line">robot = []</span><br><span class="line">animal = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tree.xpath(<span class="string">'//div/div'</span>):</span><br><span class="line">    name = item.xpath(<span class="string">'./p[1]/span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    label = item.xpath(<span class="string">'./p[2]/span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    age = item.xpath(<span class="string">'./p[3]/span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'human'</span> <span class="keyword">in</span> label <span class="keyword">or</span> <span class="string">'人类'</span> <span class="keyword">in</span> label:</span><br><span class="line">        human.append(&#123;<span class="string">'age'</span>:age, <span class="string">'name'</span>:name&#125;)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'机器人'</span> <span class="keyword">in</span> label:</span><br><span class="line">        robot.append(&#123;<span class="string">'dataTime'</span>:age, <span class="string">'name'</span>:name&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        animal.append(&#123;<span class="string">'age'</span>: age, <span class="string">'name'</span>: name&#125;)</span><br><span class="line">    content[<span class="string">'human'</span>] = human</span><br><span class="line">    content[<span class="string">'robot'</span>] = robot</span><br><span class="line">    content[<span class="string">'animal'</span>] = animal</span><br><span class="line"></span><br><span class="line">res = json.dumps(content, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&#123;</span><br><span class="line">    "human": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"24"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"坤坤"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"21"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"晗晗"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "robot": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"dataTime"</span>: <span class="string">"2019-01-01"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"伊娃"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "animal": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"3"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"豆豆"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">open 读取本地HTML并进行编码</span><br><span class="line">etree.HTML() 构造XPath解析对象</span><br><span class="line">利用xpath提取需要的信息</span><br><span class="line">json.dumps() 将字典转为json对象，indent 设置缩进字符个数，ensure_ascii&#x3D;False 中文不被转为unicode</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;We work in the darkness to serve the light. ——《刺客信条》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;我们鞠躬于黑暗，却向往着光明。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="xpath" scheme="http://mrxiuxing.cn/categories/xpath/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="XPath" scheme="http://mrxiuxing.cn/tags/XPath/"/>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>计算并打印出每个字符串中排列在任意x前面的所有y的个数</title>
    <link href="http://mrxiuxing.cn/posts/21e58870.html"/>
    <id>http://mrxiuxing.cn/posts/21e58870.html</id>
    <published>2020-03-16T07:34:05.000Z</published>
    <updated>2020-03-16T07:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Victory belongs to those that believe in it the most， and believe in it the longest. ——《珍珠港》</center></strong></em><br><em><strong><center>胜利属于那些信念坚定、永不动摇的人。</center></strong></em></p><a id="more"></a><h2 id="问题">问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有如下数组，请计算并打印出每个字符串中排列在任意x前面的所有y的个数。 </span><br><span class="line">arr &#x3D; [&#39;xxyyxyyyyyxxx&#39;, &#39;yyxxxxy&#39;, &#39;xyyyxxyx&#39;, &#39;xxxx&#39;, &#39;xxxyyy&#39;]</span><br></pre></td></tr></table></figure><h2 id="解析">解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_s</span><span class="params">(s_list)</span>:</span></span><br><span class="line">    res_list = []</span><br><span class="line">    pattern = re.compile(<span class="string">r'(y+)x'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s_list:</span><br><span class="line">        res = pattern.findall(i)</span><br><span class="line">        res_list.append(len(<span class="string">''</span>.join(res)))</span><br><span class="line">    <span class="keyword">return</span> res_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [<span class="string">'xxyyxyyyyyxxx'</span>, <span class="string">'yyxxxxy'</span>, <span class="string">'xyyyxxyx'</span>, <span class="string">'xxxx'</span>, <span class="string">'xxxyyy'</span>]</span><br><span class="line">print(change_s(arr))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用正则匹配字符串中所有以x结尾的任意y字符串。</span><br><span class="line">compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象。</span><br><span class="line">findall 在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</span><br><span class="line">将每个字符串中符合规则的y字符串列表拼接成字符串，计算每个字符串y的个数并添加至列表中，最后返回列表。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Victory belongs to those that believe in it the most， and believe in it the longest. ——《珍珠港》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;胜利属于那些信念坚定、永不动摇的人。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Python高阶函数与lambda表达式</title>
    <link href="http://mrxiuxing.cn/posts/6f18f638.html"/>
    <id>http://mrxiuxing.cn/posts/6f18f638.html</id>
    <published>2020-03-08T10:18:50.000Z</published>
    <updated>2020-03-08T10:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>It is okay to fail, as long as you keep trying! ——《科学怪狗》</center></strong></em><br><em><strong><center>只要你坚持尝试，失败也没有关系！</center></strong></em></p><a id="more"></a><h2 id="lambda表达式">lambda表达式</h2><p>  <b>为了避免创建一次性的辅助性函数</b></p><h3 id="语法">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda &lt;argument&gt;, &lt;expression&gt;</span><br></pre></td></tr></table></figure><h2 id="map">map()</h2><p>  <b>根据提供的函数对指定序列做映射。返回包含每次函数返回值的新列表。</b></p><h3 id="语法-2">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br></pre></td></tr></table></figure><h3 id="将一个包含整数的列表转换为这些整数字符串的另一个列表">将一个包含整数的列表转换为这些整数字符串的另一个列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for循环实现</span></span><br><span class="line">oldList = list(range(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">newList = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> oldList:</span><br><span class="line">    newList.append(str(num))</span><br><span class="line">print(newList)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map实现</span></span><br><span class="line">oldList = list(range(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">newList = list(map(str, oldList))</span><br><span class="line">print(newList)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><h3 id="计算平方和">计算平方和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map + 函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line">res = list(map(square, list(range(<span class="number">1</span>, <span class="number">5</span>))))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map + lambda实现</span></span><br><span class="line">res = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, list(range(<span class="number">1</span>, <span class="number">5</span>))))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><h2 id="filter">filter()</h2><p>  <b>过滤掉序列中不符合条件的元素，返回由符合条件元素组成的新列表。返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换。</b></p><h3 id="语法-3">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(function, iterable)</span><br></pre></td></tr></table></figure><h3 id="过滤出列表中的所有奇数">过滤出列表中的所有奇数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter + 函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">tmplist = filter(is_odd, list(range(<span class="number">1</span>, <span class="number">11</span>)))</span><br><span class="line">newlist = list(tmplist)</span><br><span class="line">print(newlist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter + lambda实现</span></span><br><span class="line">tmplist = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span>, list(range(<span class="number">1</span>, <span class="number">11</span>)))</span><br><span class="line">newlist = list(tmplist)</span><br><span class="line">print(newlist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="reduce">reduce()</h2><p>  <b>对参数序列中元素进行累积。函数将一个数据集合（列表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</b></p><h3 id="语法-4">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(function, iterable[, initializer])</span><br></pre></td></tr></table></figure><h3 id="计算一个整数列表的和">计算一个整数列表的和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reduce + 函数实现</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">res = reduce(add, list(range(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reduce + lambda实现</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">res = reduce(<span class="keyword">lambda</span> x, y: x+y, list(range(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="number">10</span></span><br></pre></td></tr></table></figure><p><b>参考文章：</b><br><a href="https://www.runoob.com/python/python-func-map.html" target="_blank" rel="noopener">Python map() 函数 | 菜鸟教程</a><br><a href="https://www.runoob.com/python/python-func-filter.html" target="_blank" rel="noopener">Python filter() 函数 | 菜鸟教程</a><br><a href="https://www.runoob.com/python/python-func-reduce.html" target="_blank" rel="noopener">Python reduce() 函数 | 菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;It is okay to fail, as long as you keep trying! ——《科学怪狗》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;只要你坚持尝试，失败也没有关系！&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://mrxiuxing.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令(五) ps：显示当前进程状态</title>
    <link href="http://mrxiuxing.cn/posts/71fe7104.html"/>
    <id>http://mrxiuxing.cn/posts/71fe7104.html</id>
    <published>2020-03-07T06:53:18.000Z</published>
    <updated>2020-03-07T06:53:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>The only thing that matters is what you believe. ——《达芬奇密码》</center></strong></em><br><em><strong><center>重要的是你内心的信仰。</center></strong></em></p><a id="more"></a><h2 id="语法">语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [options] [--help]</span><br></pre></td></tr></table></figure><h2 id="参数">参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-A 列出所有的行程</span><br><span class="line">-w 显示加宽可以显示较多的资讯</span><br><span class="line">-au 显示较详细的资讯</span><br><span class="line">-aux 显示所有包含其他使用者的行程</span><br><span class="line">au(x) 输出格式 :</span><br><span class="line">        USER    PID     %CPU    %MEM    VSZ   RSS       TTY      STAT START   TIME  COMMAND</span><br><span class="line">        USER：行程拥有者</span><br><span class="line">        PID：pid</span><br><span class="line">        %CPU：占用的 CPU 使用率</span><br><span class="line">        %MEM：占用的物理内存使用率</span><br><span class="line">        VSZ：占用的虚拟内存的大小</span><br><span class="line">        RSS：占用的固定内存的大小</span><br><span class="line">        TTY：终端的次要装置号码 (minor device number of tty)</span><br><span class="line">        STAT：该行程目前的状态，主要状态有:</span><br><span class="line">                D：无法中断的休眠状态 (通常 IO 的进程)</span><br><span class="line">                R：正在执行中</span><br><span class="line">                S：静止状态</span><br><span class="line">                s：包含子进程</span><br><span class="line">                T：暂停执行</span><br><span class="line">                Z：不存在但暂时无法消除</span><br><span class="line">                W：没有足够的记忆体分页可分配</span><br><span class="line">                &lt;：高优先序的行程</span><br><span class="line">                N：低优先序的行程</span><br><span class="line">                L：将页面锁定到内存中（用于实时和自定义IO）</span><br><span class="line">                l：多线程（使用CLONE_THREAD,类似NPTL线程）</span><br><span class="line">                +：位于后台的进程组</span><br><span class="line">        START：行程开始时间</span><br><span class="line">        TIME：执行的时间</span><br><span class="line">        COMMAND：所执行的指令</span><br></pre></td></tr></table></figure><h2 id="实例">实例</h2><h3 id="查看所有进程信息">查看所有进程信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -A</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_A.png" alt></p><h3 id="查看指定用户信息">查看指定用户信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pa -u xiuxing</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_u_xiuxing.png" alt></p><h3 id="查看全格式的全部进程">查看全格式的全部进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_ef.png" alt></p><h3 id="以树状结构显示进程">以树状结构显示进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -axjf</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_axjf.png" alt></p><h3 id="配合grep查看某进程状态">配合grep查看某进程状态</h3><p>  查看MySQL进程状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep mysql</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_aux_grep_mysql.png" alt></p><h3 id="将所有进程信息输出到指定文件中">将所有进程信息输出到指定文件中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux &gt; ps01.txt      # 将所有进程信息输出到ps01.txt文件中</span><br><span class="line">head -n 10 ps01.txt     # 将ps01.txt文件的前10行输出</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_ps01.png" alt></p><p><b>参考文章：</b><br><a href="https://www.runoob.com/linux/linux-comm-ps.html" target="_blank" rel="noopener">Linux ps命令 | 菜鸟教程</a><br><a href="http://blog.chinaunix.net/uid-8695538-id-2017726.html" target="_blank" rel="noopener">Linux下ps aux命令中STAT的参数含义</a><br><a href="https://www.cnblogs.com/xiangtingshen/p/10920236.html" target="_blank" rel="noopener">linux下ps命令-狂奔</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;The only thing that matters is what you believe. ——《达芬奇密码》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;重要的是你内心的信仰。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://mrxiuxing.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://mrxiuxing.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04挂载exfat格式的U盘</title>
    <link href="http://mrxiuxing.cn/posts/d45d30f8.html"/>
    <id>http://mrxiuxing.cn/posts/d45d30f8.html</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>In order to be brave, we got to be a little scared. ——《摩天营救》</center></strong></em><br><em><strong><center>感到害怕才能学会勇敢。</center></strong></em></p><a id="more"></a><h2 id="安装支持exfat的软件">安装支持exfat的软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install exfat-fuse</span><br></pre></td></tr></table></figure><h2 id="重启">重启</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure><p>  <b>在重启的时候就可以插上U盘，我的就是重启之后直接就挂载上了，并且显示在桌面上。</b>如果重启之后没有直接挂载上，请执行下面的步骤。</p><h2 id="列出磁盘信息">列出磁盘信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><p><img src="/posts/d45d30f8/sudofdisk_l.png" alt><br>  找到你要挂载的U盘</p><p><img src="/posts/d45d30f8/yours_u.png" alt></p><h2 id="挂载">挂载</h2><h3 id="创建挂载目录">创建挂载目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;mnt&#x2F;USB</span><br></pre></td></tr></table></figure><h3 id="执行挂载命令">执行挂载命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount &#x2F;dev&#x2F;sdc &#x2F;mnt&#x2F;USB</span><br></pre></td></tr></table></figure><p><img src="/posts/d45d30f8/sudomount.png" alt><br>  挂载完成之后，U盘里的文件就可以在/mnt/USB目录找到了。</p><h2 id="卸载">卸载</h2><p>  先执行下面的命令卸载U盘，再将其拔出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;USB</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;In order to be brave, we got to be a little scared. ——《摩天营救》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;感到害怕才能学会勇敢。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="http://mrxiuxing.cn/categories/Ubuntu/"/>
    
    
      <category term="Linux" scheme="http://mrxiuxing.cn/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://mrxiuxing.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Python3.7环境下Django1.11创建app时报错</title>
    <link href="http://mrxiuxing.cn/posts/784c1c7e.html"/>
    <id>http://mrxiuxing.cn/posts/784c1c7e.html</id>
    <published>2020-03-03T10:54:52.000Z</published>
    <updated>2020-03-03T10:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Speed a little more time trying to make something of yourelf and a little less time trying to impress people. ——《早餐俱乐部》</center></strong></em><br><em><strong><center>花少点时间去取悦别人，多花时间来经营自己。</center></strong></em></p><a id="more"></a><h2 id="错误信息">错误信息</h2><p>  在Python3.7环境下使用django1.11创建app时出现以下错误：<br><img src="/posts/784c1c7e/startapp.png" alt></p><h2 id="解决方案">解决方案</h2><h3 id="方案一：修改出现错误的文件（亲测可用）">方案一：修改出现错误的文件（亲测可用）</h3><p>  直接点击上图红色框框圈住的文件地址，或者找到你的环境下的site-packages\django\contrib\admin\widgets.py文件<br>将：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> params:</span><br><span class="line">    related_url += <span class="string">'?'</span> + <span class="string">'&amp;amp;'</span>.join(</span><br><span class="line">        <span class="string">'%s=%s'</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items(),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>更改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> params:</span><br><span class="line">    related_url += <span class="string">'?'</span> + <span class="string">'&amp;amp;'</span>.join(</span><br><span class="line">        <span class="string">'%s=%s'</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>  也就是将’%s=%s’ % (k, v) for k, v in params.items(),这句最后面的逗号去掉</p><h3 id="方案二：更新django版本">方案二：更新django版本</h3><p>  这是从网上看到的另一种解决方案,我本人没有测验过，如果第一种方法解决不了的话，可以试一试这种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;1.11.17</span><br></pre></td></tr></table></figure><p><b>参考文章：</b><br><a href="https://blog.csdn.net/qq_41850110/article/details/100116785" target="_blank" rel="noopener">https://blog.csdn.net/qq_41850110/article/details/100116785</a><br><a href="https://blog.csdn.net/tyt_xiaotao/article/details/87887482" target="_blank" rel="noopener">https://blog.csdn.net/tyt_xiaotao/article/details/87887482</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Speed a little more time trying to make something of yourelf and a little less time trying to impress people. ——《早餐俱乐部》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;花少点时间去取悦别人，多花时间来经营自己。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="错误" scheme="http://mrxiuxing.cn/categories/%E9%94%99%E8%AF%AF/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://mrxiuxing.cn/tags/Django/"/>
    
      <category term="错误" scheme="http://mrxiuxing.cn/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy爬取天天基金网站基金数据</title>
    <link href="http://mrxiuxing.cn/posts/38ef7f6b.html"/>
    <id>http://mrxiuxing.cn/posts/38ef7f6b.html</id>
    <published>2020-02-25T11:32:59.000Z</published>
    <updated>2020-02-25T11:32:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>To always face my abversity head on. ——《冰雪奇缘2》</center></strong></em><br><em><strong><center>永远都要直面挫折。</center></strong></em></p><a id="more"></a><h2 id="抓取目标">抓取目标</h2><p>  本次抓取目标是天天基金网的基金数据，如基金代码、基金名称、最近一个月收益率、最近六个月收益率、最近三年收益率以及基金公司、基金规模等一系列指标，这些信息抓取之后将会保存到本地的CSV文件中。</p><h2 id="思路分析">思路分析</h2><p>  我们选取的站点是：<a href="http://fund.eastmoney.com/allfund.html" target="_blank" rel="noopener">http://fund.eastmoney.com/allfund.html</a> 如下图示：<br><img src="/posts/38ef7f6b/index.png" alt><br><img src="/posts/38ef7f6b/index2.png" alt><br>  可以看出所有的基金所有的基金代码以及基金名称都在这里，但是我们想要的不止这些，所以需要进入到每一个基金的详情页去。如下图：<br><img src="/posts/38ef7f6b/parse1.png" alt><br>  那我们就以我们选取的站点：<a href="http://fund.eastmoney.com/allfund.html" target="_blank" rel="noopener">http://fund.eastmoney.com/allfund.html</a> 为起始站点，提取每个基金的详情页链接，然后在详情页中解析我们想要的数据。</p><h2 id="新建项目">新建项目</h2><p>  接下来，我们用Scrapy来实现这个抓取过程。首先创建一个项目，命令如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject fund</span><br></pre></td></tr></table></figure><p>  进入项目中，新建一个项目，名为eastmoney,命令如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider eastmoney fund.eastmoney.com</span><br></pre></td></tr></table></figure><p>  我们先修改spider，实现start_requests()方法，然后用parse_info()进行解析。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EastmoneySpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'eastmoney'</span></span><br><span class="line">    allowed_domains = [<span class="string">'fund.eastmoney.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://fund.eastmoney.com/allfund.html'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        urls = response.xpath(<span class="string">'//*[@id="code_content"]/div/ul/li/div/a[1]/@href'</span>)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            url = response.urljoin(url.extract())</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url,callback=self.parse_info)</span><br></pre></td></tr></table></figure><h2 id="创建Item">创建Item</h2><p>  接下来，我们解析基金详情页我们需要的信息并生成Item。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FundItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    code = scrapy.Field()    <span class="comment"># 基金代码</span></span><br><span class="line">    name = scrapy.Field()    <span class="comment"># 基金名称</span></span><br><span class="line">    service_Charge = scrapy.Field()    <span class="comment"># 手续费</span></span><br><span class="line">    purchase_amount = scrapy.Field()    <span class="comment"># 起购金额</span></span><br><span class="line">    recent1Month = scrapy.Field()  <span class="comment"># 最近一月</span></span><br><span class="line">    recent3Month = scrapy.Field()  <span class="comment"># 最近三月</span></span><br><span class="line">    recent6Month = scrapy.Field()  <span class="comment"># 最近六月</span></span><br><span class="line">    recent1Year = scrapy.Field()  <span class="comment"># 最近一年</span></span><br><span class="line">    recent3Year = scrapy.Field()  <span class="comment"># 最近三年</span></span><br><span class="line">    from_Build = scrapy.Field()  <span class="comment"># 成立以来</span></span><br><span class="line">    type = scrapy.Field()    <span class="comment"># 基金类型</span></span><br><span class="line">    fund_scale = scrapy.Field()    <span class="comment"># 基金规模</span></span><br><span class="line">    establishment_date = scrapy.Field()    <span class="comment"># 成立日</span></span><br><span class="line">    company = scrapy.Field()    <span class="comment"># 基金公司</span></span><br></pre></td></tr></table></figure><h2 id="提取数据">提取数据</h2><p>  开始解析基金详情页，实现parse_info()方法，因为详情页的布局并不是统一的，所以用到了try except， 如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fund.items <span class="keyword">import</span> FundItem</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_info</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = FundItem()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            item[<span class="string">'code'</span>] = response.xpath(<span class="string">'//*[@class="fundcodeInfo"]/span[1]/text()'</span>).extract()[<span class="number">0</span>]    <span class="comment"># 基金代码</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            item[<span class="string">'code'</span>] = response.xpath(<span class="string">'//*[@class="fundDetail-tit"]/div/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'name'</span>] = response.xpath(<span class="string">'//*[@class="fundDetail-tit"]/div[1]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 基金名称</span></span><br><span class="line">        item[<span class="string">'service_Charge'</span>] = response.xpath(<span class="string">'//*[@class="buyWayStatic"]/div[5]/span[2]/span[2]/text()'</span>).extract_first(<span class="string">'暂停申购'</span>)   <span class="comment"># 手续费</span></span><br><span class="line">        item[<span class="string">'purchase_amount'</span>] = response.xpath(<span class="string">'//*[@id="moneyAmountTxt"]/@data-placeholder'</span>).extract_first(<span class="string">'暂停申购'</span>)    <span class="comment"># 起购金额</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            item[<span class="string">'recent1Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem01"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 最近一月</span></span><br><span class="line">            item[<span class="string">'recent3Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem02"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 最近三月</span></span><br><span class="line">            item[<span class="string">'recent6Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem03"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 最近六月</span></span><br><span class="line">            item[<span class="string">'recent1Year'</span>] = response.xpath(<span class="string">'//*[@class="dataItem01"]/dd[3]/span[2]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 最近一年</span></span><br><span class="line">            item[<span class="string">'recent3Year'</span>] = response.xpath(<span class="string">'//*[@class="dataItem02"]/dd[3]/span[2]/text()'</span>).extract()[<span class="number">0</span>]    <span class="comment"># 最近三年</span></span><br><span class="line">            item[<span class="string">'from_Build'</span>] = response.xpath(<span class="string">'//*[@class="dataItem03"]/dd[3]/span[2]/text()'</span>).extract()[<span class="number">0</span>]    <span class="comment"># 成立以来</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            item[<span class="string">'recent1Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem01"]/dd[1]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'recent3Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem02"]/dd[1]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'recent6Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem03"]/dd[1]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'recent1Year'</span>] = response.xpath(<span class="string">'//*[@class="dataItem01"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'recent3Year'</span>] = response.xpath(<span class="string">'//*[@class="dataItem02"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'from_Build'</span>] = response.xpath(<span class="string">'//*[@class="dataItem03"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'type'</span>] = response.xpath(<span class="string">'//*[@class="infoOfFund"]/table/tr[1]/td[1]/a/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'fund_scale'</span>] = response.xpath(<span class="string">'//*[@class="infoOfFund"]/table/tr[1]/td[2]/text()'</span>).extract()[<span class="number">0</span>].split(<span class="string">"："</span>)[<span class="number">1</span>]    <span class="comment"># 基金规模</span></span><br><span class="line">        item[<span class="string">'establishment_date'</span>] = response.xpath(<span class="string">'//*[@class="infoOfFund"]/table/tr[2]/td[1]/text()'</span>).extract()[<span class="number">0</span>].split(<span class="string">"："</span>)[<span class="number">1</span>]    <span class="comment"># 成立日期</span></span><br><span class="line">        item[<span class="string">'company'</span>] = response.xpath(<span class="string">'//*[@class="infoOfFund"]/table/tr[2]/td[2]/a/text()'</span>).extract()[<span class="number">0</span>]    <span class="comment"># 公司</span></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h2 id="数据储存">数据储存</h2><p>  最终我们的数据是要储存到本地的CSV文件中。我们在这里实现ToCSVPipeline类，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> fund.items <span class="keyword">import</span> FundItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToCSVPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.f = open(<span class="string">"fund.csv"</span>, <span class="string">"a"</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">""</span>)</span><br><span class="line">        <span class="comment"># 设置表头，要跟spider传过来的字典key名称相同</span></span><br><span class="line">        self.fieldnames = [<span class="string">"code"</span>, <span class="string">"name"</span>, <span class="string">"service_Charge"</span>, <span class="string">"purchase_amount"</span>, <span class="string">"recent1Month"</span>, <span class="string">"recent3Month"</span>, <span class="string">"recent6Month"</span>,</span><br><span class="line">                           <span class="string">"recent1Year"</span>, <span class="string">"recent3Year"</span>, <span class="string">"from_Build"</span>, <span class="string">"type"</span>, <span class="string">"fund_scale"</span>, <span class="string">"establishment_date"</span>, <span class="string">"company"</span>]</span><br><span class="line">        self.writer = csv.DictWriter(self.f, fieldnames=self.fieldnames)</span><br><span class="line">        self.writer.writeheader()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.writer.writerow(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure><h2 id="设置随机UA">设置随机UA</h2><p>  我们需要做一些防范爬虫的措施才可以顺利完成数据爬取。在Middleware中设置随机User-Agent。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UseAgentMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user_agent=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.ua = UserAgent(verify_ssl=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.ua:</span><br><span class="line">            random_ua = self.ua.random</span><br><span class="line">            request.headers[<span class="string">"User-Agent"</span>] = random_ua</span><br></pre></td></tr></table></figure><p>  fake_useragent可以随机生成User-Agent，但是这个库是需要安装的，安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fake-useragent</span><br></pre></td></tr></table></figure><p>  具体的其他方式使用有兴趣的可以度娘一下。</p><h2 id="配置setting">配置setting</h2><p>  首先我们需要关闭robots规则，否则是无法爬取数据的；我们还需要将Pipline管道以及middleware开启，不然的话，我们设置的储存方式以及随机UA就没有办法使用了。具体如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">'fund.middlewares.UseAgentMiddleware'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'fund.pipelines.ToCSVPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行">运行</h2><p>  到此为止，整个爬虫就实现完毕了。我们在项目根目录下运行如下命令启动爬虫：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl eastmoney</span><br></pre></td></tr></table></figure><p>  输出部分结果如下所示：<br><img src="/posts/38ef7f6b/spider_log.png" alt><br>  运行一段时间后，我们便可以在项目根目录下下看到CSV文件了，爬取的数据如下图所示：<br><img src="/posts/38ef7f6b/tocsv.png" alt></p><h2 id="代码地址">代码地址</h2><p>  <strong><a href="https://github.com/Mrxiuxing/Spider/tree/master/fund" target="_blank" rel="noopener">https://github.com/Mrxiuxing/Spider/tree/master/fund</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;To always face my abversity head on. ——《冰雪奇缘2》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;永远都要直面挫折。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="http://mrxiuxing.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>爬取拉钩(Selenium + pyquery + MongoDB)</title>
    <link href="http://mrxiuxing.cn/posts/7a8334ea.html"/>
    <id>http://mrxiuxing.cn/posts/7a8334ea.html</id>
    <published>2020-02-23T03:03:23.000Z</published>
    <updated>2020-02-23T03:03:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>When one can see no future, all one can do is the next right thing. ——《冰雪奇缘2》</center></strong></em><br><em><strong><center>如果看不清未来，就走好当下的路。</center></strong></em></p><a id="more"></a><h2 id="抓取目标">抓取目标</h2><p>  利用Selenium抓取拉钩Python相关职位并用pyquery解析得到Python相关职位的职位名称、所在城市、薪资、需要经验、教育程度以及公司名称，并将其保存到MongoDB。</p><h2 id="思路分析">思路分析</h2><p>  既然准备使用Selenium那我们就全程让他模拟人的行为去进行一些操作。初步思路如下：<br><img src="/posts/7a8334ea/mind.png" alt></p><h2 id="站点分析">站点分析</h2><p>  站点的搜索框以及搜索按钮如下：<br><img src="/posts/7a8334ea/index_1.png" alt><br>  进入职位详情页后，我们可以发现每一个职位都对应一个 li 标签中。<br><img src="/posts/7a8334ea/2index_1.png" alt><br>  点击其中一个 li 标签，可以看到职位的详细信息。<br><img src="/posts/7a8334ea/2index_2.png" alt><br>  最后我们查看一下&quot;下一页&quot;按钮的信息<br><img src="/posts/7a8334ea/2index_3.png" alt></p><h2 id="初始化代码">初始化代码</h2><p>  首先构造一个WebDriver对象，使用的是浏览器Chrome，然后模拟人的行为：在搜索框中输入想要搜索的职位，然后点击搜索。初始化MongoDB，首先创建了一个MongoDB连接对象，然后指定了Collection的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEnd = <span class="literal">False</span>    <span class="comment"># 判定是不是最后一页的Flag</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)</span><br><span class="line">        self.browser.get(<span class="string">'https://www.lagou.com/'</span>)</span><br><span class="line">        input_search = self.browser.find_element_by_id(<span class="string">'search_input'</span>)    <span class="comment"># 搜索框</span></span><br><span class="line">        input_search.send_keys(<span class="string">'Python'</span>)    <span class="comment"># 在搜索框输入职位名称</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        button = self.browser.find_element_by_class_name(<span class="string">'search_button'</span>)    <span class="comment"># 搜索按钮</span></span><br><span class="line">        button.click()    <span class="comment"># 模拟点击</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client.lagou</span><br><span class="line">        self.collection = db.Python</span><br></pre></td></tr></table></figure><h2 id="解析职位列表">解析职位列表</h2><p>  我们直接获取页面源代码，然后构造PyQuery解析对象，接着提取了职位列表，此时使用的CSS选择器是#s_position_list .item_con_list .con_list_item，它会匹配整个页面的每一个职位。因为它匹配的结果是多个，所以我们对它进行了以此遍历，用for循环将每一个结果分别进行解析，每一次循环把它赋值为item变量，每一个item变量都是一个PyQuery对象，然后调用它的find()方法，传入CSS选择器，就可以得到每一个职位的特定内容了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        doc = pq(self.browser.page_source)</span><br><span class="line">        items = doc(<span class="string">'#s_position_list .item_con_list .con_list_item'</span>).items()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            money_experience_educational = item.find(<span class="string">'.position .p_bot .li_b_l'</span>).text().split(<span class="string">' '</span>)</span><br><span class="line">            product = [&#123;</span><br><span class="line">                <span class="string">"position"</span>: item.find(<span class="string">'.p_top .position_link h3'</span>).text(),</span><br><span class="line">                <span class="string">"city"</span>: item.find(<span class="string">'.position .p_top .add em'</span>).text(),</span><br><span class="line">                <span class="string">"money"</span>: money_experience_educational[<span class="number">0</span>],</span><br><span class="line">                <span class="string">"experience"</span>: money_experience_educational[<span class="number">1</span>],</span><br><span class="line">                <span class="string">"educational"</span>: money_experience_educational[<span class="number">3</span>],</span><br><span class="line">                <span class="string">"company"</span>: item.find(<span class="string">'.company .company_name a'</span>).text(),</span><br><span class="line">            &#125;]</span><br><span class="line">            self.data.extend(product)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        self.parse_page()</span><br></pre></td></tr></table></figure><h2 id="翻页操作">翻页操作</h2><p>  首先判断是不是最后一页，不是的话才模拟点击下一页，否则的改变Flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> pq(self.browser.page_source)(<span class="string">'.pager_container span:last-child'</span>).attr(<span class="string">'class'</span>) != <span class="string">'pager_next pager_next_disabled'</span>:</span><br><span class="line">        pager_next = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'pager_next'</span>)))</span><br><span class="line">        pager_next.click()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.isEnd = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="保存到MongoDB">保存到MongoDB</h2><p>  因为在之前初始化了MongoDB，所以这里直接将数据插入到MongoDB。update_one()方法：更新或插入一条数据。这里使用update_one()方法一条一条插入是为了去重数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        print(<span class="string">'储存到MongoDB成功'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">'储存到MongoDB失败'</span>)</span><br></pre></td></tr></table></figure><h2 id="定义爬取函数">定义爬取函数</h2><p>  这里提取了每一页的当前页码，使我们可以很方便的观察爬取进度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> self.isEnd:</span><br><span class="line">        page = self.browser.find_element_by_class_name(<span class="string">'pager_is_current'</span>).text</span><br><span class="line">        print(<span class="string">'正在爬取第 '</span> + page + <span class="string">' 页 ...'</span>)</span><br><span class="line">        self.parse_page()</span><br><span class="line">        self.turn_page()</span><br><span class="line">    self.save_to_mongo()</span><br><span class="line">    print(<span class="string">'爬取结束'</span>)</span><br></pre></td></tr></table></figure><h2 id="试运行">试运行</h2><p>  此时的全部代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEnd = <span class="literal">False</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)</span><br><span class="line">        self.browser.get(<span class="string">'https://www.lagou.com/'</span>)</span><br><span class="line">        input_search = self.browser.find_element_by_id(<span class="string">'search_input'</span>)    <span class="comment"># 搜索框</span></span><br><span class="line">        input_search.send_keys(<span class="string">'Python'</span>)    <span class="comment"># 在搜索框输入职位名称</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        button = self.browser.find_element_by_class_name(<span class="string">'search_button'</span>)    <span class="comment"># 搜索按钮</span></span><br><span class="line">        button.click()    <span class="comment"># 模拟点击</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client.lagou</span><br><span class="line">        self.collection = db.Python</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 解析网页数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            doc = pq(self.browser.page_source)</span><br><span class="line">            items = doc(<span class="string">'#s_position_list .item_con_list .con_list_item'</span>).items()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                money_experience_educational = item.find(<span class="string">'.position .p_bot .li_b_l'</span>).text().split(<span class="string">' '</span>)</span><br><span class="line">                product = [&#123;</span><br><span class="line">                    <span class="comment"># "link": item.find('.p_top .position_link').attr('href'),</span></span><br><span class="line">                    <span class="string">"position"</span>: item.find(<span class="string">'.p_top .position_link h3'</span>).text(),</span><br><span class="line">                    <span class="string">"city"</span>: item.find(<span class="string">'.position .p_top .add em'</span>).text(),</span><br><span class="line">                    <span class="string">"money"</span>: money_experience_educational[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">"experience"</span>: money_experience_educational[<span class="number">1</span>],</span><br><span class="line">                    <span class="string">"educational"</span>: money_experience_educational[<span class="number">3</span>],</span><br><span class="line">                    <span class="string">"company"</span>: item.find(<span class="string">'.company .company_name a'</span>).text(),</span><br><span class="line">                &#125;]</span><br><span class="line">                self.data.extend(product)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            self.parse_page()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 翻页操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> pq(self.browser.page_source)(<span class="string">'.pager_container span:last-child'</span>).attr(<span class="string">'class'</span>) != <span class="string">'pager_next pager_next_disabled'</span>:</span><br><span class="line">            pager_next = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'pager_next'</span>)))</span><br><span class="line">            pager_next.click()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.isEnd = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 储存至MongoDB</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">                <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            print(<span class="string">'储存到MongoDB成功'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">'储存到MongoDB失败'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 爬取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.isEnd:</span><br><span class="line">            page = self.browser.find_element_by_class_name(<span class="string">'pager_is_current'</span>).text</span><br><span class="line">            print(<span class="string">'正在爬取第 '</span> + page + <span class="string">' 页 ...'</span>)</span><br><span class="line">            self.parse_page()</span><br><span class="line">            self.turn_page()</span><br><span class="line">        self.save_to_mongo()</span><br><span class="line">        print(<span class="string">'爬取结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    obj = LagouSpider()</span><br><span class="line">    obj.crawl()</span><br></pre></td></tr></table></figure><p>  我们运行一下代码发现出现了：<font color="red">selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable</font> 错误。我们再看一看浏览器现在是什么情况，发现浏览器出现了弹窗，如下图:<br><img src="/posts/7a8334ea/index_tanchuang.png" alt><br>  因为弹窗selenium找不到搜索框的元素，所以出现了错误。既然你出现弹窗想让我点击一下，那我就点一下呗！通过检查源代码，定位你想点击的按钮，这里我选择的是北京站。既然错误发生在输入框输入前，那就把代码添加在此之前，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEnd = <span class="literal">False</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)</span><br><span class="line">        self.browser.get(<span class="string">'https://www.lagou.com/'</span>)</span><br><span class="line">        <span class="comment"># 首页弹窗模拟点击</span></span><br><span class="line">        index_tab = self.browser.find_element_by_xpath(<span class="string">'//*[@id="changeCityBox"]/ul/li[1]/a'</span>)</span><br><span class="line">        index_tab.click()</span><br><span class="line">        input_search = self.browser.find_element_by_id(<span class="string">'search_input'</span>)    <span class="comment"># 搜索框</span></span><br><span class="line">        input_search.send_keys(<span class="string">'Python'</span>)    <span class="comment"># 在搜索框输入职位名称</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        button = self.browser.find_element_by_class_name(<span class="string">'search_button'</span>)    <span class="comment"># 搜索按钮</span></span><br><span class="line">        button.click()    <span class="comment"># 模拟点击</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client.lagou</span><br><span class="line">        self.collection = db.Python</span><br></pre></td></tr></table></figure><p>  我们再运行一下试试。然后顺利点击首页弹窗，顺利在输入框输入职位，顺利点击搜索，然后进入到职位详情页，突然就蹦出来这么一个玩意：<br><img src="/posts/7a8334ea/tanchuang2.png" alt><br>  怎么办呐！还能怎么办！点呗！！！为了防止频繁出现这样的弹窗，干脆写一个函数吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">body_btn</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        body_btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.body-btn'</span>)))</span><br><span class="line">        <span class="comment"># body_btn = self.browser.find_element_by_css_selector('div.body-btn')</span></span><br><span class="line">        <span class="keyword">if</span> body_btn:</span><br><span class="line">            body_btn.click()</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>  经过多次试验，当弹窗的class的属性为 body-container 的时候，弹窗是不会展示在页面的；当弹窗的class的属性为 body-container showData 的时候，弹窗才会展示在页面。修改抓取函数代码，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> self.isEnd:</span><br><span class="line">        page = self.browser.find_element_by_class_name(<span class="string">'pager_is_current'</span>).text</span><br><span class="line">        print(<span class="string">'正在爬取第 '</span> + page + <span class="string">' 页 ...'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            showData = self.browser.find_element_by_css_selector(<span class="string">'[class="body-container showData"]'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            showData = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> showData:</span><br><span class="line">            self.body_btn()</span><br><span class="line">        self.parse_page()</span><br><span class="line">        self.turn_page()</span><br><span class="line">    self.save_to_mongo()</span><br><span class="line">    print(<span class="string">'爬取结束'</span>)</span><br></pre></td></tr></table></figure><h2 id="整合所有代码">整合所有代码</h2><p>  经过一系列的弹窗，最终代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEnd = <span class="literal">False</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)</span><br><span class="line">        self.browser.get(<span class="string">'https://www.lagou.com/'</span>)</span><br><span class="line">        <span class="comment"># 首页弹窗模拟点击</span></span><br><span class="line">        index_tab = self.browser.find_element_by_xpath(<span class="string">'//*[@id="changeCityBox"]/ul/li[1]/a'</span>)</span><br><span class="line">        index_tab.click()</span><br><span class="line">        input_search = self.browser.find_element_by_id(<span class="string">'search_input'</span>)    <span class="comment"># 搜索框</span></span><br><span class="line">        input_search.send_keys(<span class="string">'Python'</span>)    <span class="comment"># 在搜索框输入职位名称</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        button = self.browser.find_element_by_class_name(<span class="string">'search_button'</span>)    <span class="comment"># 搜索按钮</span></span><br><span class="line">        button.click()    <span class="comment"># 模拟点击</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client.lagou</span><br><span class="line">        self.collection = db.Python</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析网页数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            doc = pq(self.browser.page_source)</span><br><span class="line">            items = doc(<span class="string">'#s_position_list .item_con_list .con_list_item'</span>).items()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                money_experience_educational = item.find(<span class="string">'.position .p_bot .li_b_l'</span>).text().split(<span class="string">' '</span>)</span><br><span class="line">                product = [&#123;</span><br><span class="line">                    <span class="string">"position"</span>: item.find(<span class="string">'.p_top .position_link h3'</span>).text(),</span><br><span class="line">                    <span class="string">"city"</span>: item.find(<span class="string">'.position .p_top .add em'</span>).text(),</span><br><span class="line">                    <span class="string">"money"</span>: money_experience_educational[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">"experience"</span>: money_experience_educational[<span class="number">1</span>],</span><br><span class="line">                    <span class="string">"educational"</span>: money_experience_educational[<span class="number">3</span>],</span><br><span class="line">                    <span class="string">"company"</span>: item.find(<span class="string">'.company .company_name a'</span>).text(),</span><br><span class="line">                &#125;]</span><br><span class="line">                self.data.extend(product)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            self.parse_page()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 翻页操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> pq(self.browser.page_source)(<span class="string">'.pager_container span:last-child'</span>).attr(<span class="string">'class'</span>) != <span class="string">'pager_next pager_next_disabled'</span>:</span><br><span class="line">            pager_next = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'pager_next'</span>)))</span><br><span class="line">            pager_next.click()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.isEnd = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 职位详情页弹窗</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">body_btn</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            body_btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.body-btn'</span>)))</span><br><span class="line">            <span class="keyword">if</span> body_btn:</span><br><span class="line">                body_btn.click()</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 储存至MongoDB</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">                <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            print(<span class="string">'储存到MongoDB成功'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">'储存到MongoDB失败'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 爬取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.isEnd:</span><br><span class="line">            page = self.browser.find_element_by_class_name(<span class="string">'pager_is_current'</span>).text</span><br><span class="line">            print(<span class="string">'正在爬取第 '</span> + page + <span class="string">' 页 ...'</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                showData = self.browser.find_element_by_css_selector(<span class="string">'[class="body-container showData"]'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                showData = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> showData:</span><br><span class="line">                self.body_btn()</span><br><span class="line">            self.parse_page()</span><br><span class="line">            self.turn_page()</span><br><span class="line">        self.browser.close()</span><br><span class="line">        self.save_to_mongo()</span><br><span class="line">        print(<span class="string">'爬取结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    obj = LagouSpider()</span><br><span class="line">    obj.crawl()</span><br></pre></td></tr></table></figure><h2 id="效果展示">效果展示</h2><h3 id="爬取效果">爬取效果</h3><p><img src="/posts/7a8334ea/end.gif" alt></p><h3 id="数据展示">数据展示</h3><p><img src="/posts/7a8334ea/end.png" alt></p><h2 id="写在最后">写在最后</h2><p>  你也可以使用Headless模式，也就是无界面模式，这样爬取的时候就不会弹出浏览器了。具体代码如下：</p><p>将初始化时的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.browser = webdriver.Chrome()</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">self.browser = webdriver.Chrome(chrome_options=chrome_options)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;When one can see no future, all one can do is the next right thing. ——《冰雪奇缘2》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;如果看不清未来，就走好当下的路。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="http://mrxiuxing.cn/tags/Selenium/"/>
    
      <category term="pyquery" scheme="http://mrxiuxing.cn/tags/pyquery/"/>
    
      <category term="MongoDB" scheme="http://mrxiuxing.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Python数据储存(TXT、JSON、CSV)</title>
    <link href="http://mrxiuxing.cn/posts/16fc5052.html"/>
    <id>http://mrxiuxing.cn/posts/16fc5052.html</id>
    <published>2020-02-16T09:29:25.000Z</published>
    <updated>2020-02-16T09:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Do you take anyone else’s word about what is right and wrong. ——《21座桥》</center></strong></em><br><em><strong><center>不要人云亦云。</center></strong></em></p><a id="more"></a><h2 id="语法">语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(file, mode&#x3D;&#39;r&#39;, buffering&#x3D;None, encoding&#x3D;None, errors&#x3D;None, newline&#x3D;None, closefd&#x3D;True)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file : 包含了目标名称的字符串值。</span><br><span class="line">mode : 决定了打开文件的模式。默认文件访问模式为只读(r)。</span><br><span class="line">buffering : 如果 buffering 的值被设为 0，就不会有寄存。如果 buffering 的值取 1，访问文件时会寄存行。</span><br><span class="line">            如果将 buffering 的值设为大于 1 的整数，表明了这就是的寄存区的缓冲大小。</span><br><span class="line">            如果取负值，寄存区的缓冲大小则为系统默认。</span><br><span class="line">encoding: 对文件规定打开的编码</span><br><span class="line">newline &#x3D; &quot;&quot;：读取文件真正的换行符，在window里面为&quot;\r\n&quot;,Linux和Python里面为&quot;\n&quot;</span><br></pre></td></tr></table></figure><h2 id="打开方式">打开方式</h2><table><thead><tr><th style="text-align:center">模式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:center">rb</td><td>以二进制只读方式打开一个文件。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center">r+</td><td>以读写方式打开一个文件。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center">rb+</td><td>以二进制读写方式打开一个文件。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center">w</td><td>以写入方式打开一个文件。如果该文件已存在，则将其覆盖。如果该文件不存在，则创建新文件。</td></tr><tr><td style="text-align:center">wb</td><td>以二进制写入方式打开一个文件。如果该文件已存在，则将其覆盖。如果该文件不存在，则创建新文件。</td></tr><tr><td style="text-align:center">w+</td><td>以读写方式打开一个文件。如果该文件已存在，则会将其覆盖。如果该文件不存在，则创建新文件。</td></tr><tr><td style="text-align:center">wb+</td><td>以二进制读写格式打开一个文件。如果该文件已存在，则会将其覆盖。如果该文件不存在，则创建新文件。</td></tr><tr><td style="text-align:center">a</td><td>以追加方式打开一个文件。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，则创建新文件进行写入。</td></tr><tr><td style="text-align:center">ab</td><td>以二进制追加方式打开一个文件。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，则创建新文件进行写入。</td></tr><tr><td style="text-align:center">a+</td><td>以读写方式打开一个文件。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，则创建新文件用于读写。</td></tr><tr><td style="text-align:center">ab+</td><td>以二进制追加方式打开一个文件。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，则创建新文件用于读写。</td></tr></tbody></table><h2 id="file对象">file对象</h2><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">file.close()</td><td>关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td style="text-align:center">file.flush()</td><td>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td></tr><tr><td style="text-align:center">file.fileno()</td><td>返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td></tr><tr><td style="text-align:center">file.isatty()</td><td>如果文件连接到一个终端设备返回 True，否则返回 False。</td></tr><tr><td style="text-align:center">file.next()</td><td>返回文件下一行。</td></tr><tr><td style="text-align:center">file.read([size])</td><td>从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td style="text-align:center">file.readline([size])</td><td>读取整行，包括 “\n” 字符。</td></tr><tr><td style="text-align:center">file.readlines([sizehint])</td><td>读取所有行并返回列表，若给定sizeint&gt;0，则是设置一次读多少字节，这是为了减轻读取压力。</td></tr><tr><td style="text-align:center">file.seek(offset[, whence])</td><td>设置文件当前位置</td></tr><tr><td style="text-align:center">file.tell()</td><td>返回文件当前位置。</td></tr><tr><td style="text-align:center">file.truncate([size])</td><td>截取文件，截取的字节通过size指定，默认为当前文件位置。</td></tr><tr><td style="text-align:center">file.write(str)</td><td>将字符串写入文件，返回的是写入的字符长度。</td></tr><tr><td style="text-align:center">file.writelines(sequence)</td><td>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr></tbody></table><h2 id="TXT文本储存">TXT文本储存</h2><h3 id="将字符串写入TXT文件">将字符串写入TXT文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"Do you take anyone else's word about what is right and wrong.\n"</span></span><br><span class="line">file = open(<span class="string">'txtfile.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">file.write(str1)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><h3 id="简化写法">简化写法</h3><p>  使用with as语法。在with控制块结束时，文件会自动关闭，也就不用调用close()方法了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'txtfile.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(str1)</span><br></pre></td></tr></table></figure><h3 id="将中文字符串写入TXT文件">将中文字符串写入TXT文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'txtfile.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Python数据储存\n'</span>)</span><br></pre></td></tr></table></figure><p>  然后就发现它乱码了。<br><img src="/posts/16fc5052/Python_lm.png" alt><br>  解决方法：用utf-8的格式打开文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'txtfile.txt'</span>, <span class="string">'a+'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Python数据储存\n'</span>)</span><br></pre></td></tr></table></figure><p>  输出：<br><img src="/posts/16fc5052/nlm.png" alt><br>  同理：如果需要读取含有中文的文件的时候，也需要指定utf-8的格式来打开</p><h3 id="读取TXT文件">读取TXT文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'txtfile.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><p>  输出：<br><img src="/posts/16fc5052/r_res.png" alt><br>  <strong>其他用法请查看前面file对象的相关方法以及说明</strong></p><h2 id="JSON文件储存">JSON文件储存</h2><p>  Python为我们提供了简单易用的JSON库实现文件的读写操作，我们可以调用JSON库的loads()方法将JSON文本字符串转为JSON对象，可以通过loads()方法将JSON对象转为文本字符串。</p><h3 id="读取JSON字符串">读取JSON字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">'''[&#123;</span></span><br><span class="line"><span class="string">    "name": "SQL必知必会",</span></span><br><span class="line"><span class="string">    "publication": "2009-01"</span></span><br><span class="line"><span class="string">    &#125;, &#123;</span></span><br><span class="line"><span class="string">    "name": "C++ Primer Plus",</span></span><br><span class="line"><span class="string">    "publication": "2012-07"</span></span><br><span class="line"><span class="string">&#125;]'''</span></span><br><span class="line"></span><br><span class="line">print(type(str1))</span><br><span class="line">data = json.loads(str1)</span><br><span class="line">print(data)</span><br><span class="line">print(type(data))</span><br></pre></td></tr></table></figure><p>  输出：<br><img src="/posts/16fc5052/r_json.png" alt></p><p>  这里使用loads()方法将字符串转换为JSON对象。由于最外层是中括号，所以最终数据类型是列表。这样我们就可以用索引来获取对应的内容了。例如：获取第一个元素里的name属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(data[<span class="number">0</span>][<span class="string">'name'</span>])</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure><p>  得到的结果都是：<br><img src="/posts/16fc5052/r_json2.png" alt><br>  <strong>需要注意的是，JSON数据需要用双引号来包围，不能使用单引号，否则的话，例如：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'''[&#123;</span></span><br><span class="line"><span class="string">    'name': 'SQL必知必会',</span></span><br><span class="line"><span class="string">    'publication": "2009-01'</span></span><br><span class="line"><span class="string">    &#125;, &#123;</span></span><br><span class="line"><span class="string">    'name': 'C++ Primer Plus',</span></span><br><span class="line"><span class="string">    'publication': '2012-07'</span></span><br><span class="line"><span class="string">&#125;]'''</span></span><br><span class="line">data = json.loads(str1)</span><br></pre></td></tr></table></figure><p>  运行结果如下：<br><img src="/posts/16fc5052/error_json.png" alt><br>  <strong>这里会出现JSON解析错误，原因就是数据使用单引号包围。</strong></p><h3 id="将JSON对象写入文本">将JSON对象写入文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"SQL必知必会"</span>,</span><br><span class="line">    <span class="string">"publication"</span>: <span class="string">"2009-01"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"C++ Primer Plus"</span>,</span><br><span class="line">    <span class="string">"publication"</span>: <span class="string">"2012-07"</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>  利用dumps()方法我们可以将JSON对象转为字符串，然后再调用write()方法写入文本。如图：<br><img src="/posts/16fc5052/w_json.png" alt><br>  因为JSON对象含有中文字符，所以需要ensure_ascii=False保证不会以ASCII编码，以确保中文的正常转换。当然，如果JSON对象中不含有有中文，你可以不必指定这个参数。下面是<strong>错误</strong>的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data))</span><br></pre></td></tr></table></figure><p>  输出：<br><img src="/posts/16fc5052/w_json2.png" alt><br>  如果你想保存JSON格式，可以添加indent参数，代表缩进字符个数。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>  结果如下：<br><img src="/posts/16fc5052/w_json3.png" alt><br>  这样得到的内容会自动带缩进，格式会更加清晰。</p><h3 id="从JSON文本中读取内容">从JSON文本中读取内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    str1 = f.read()</span><br><span class="line">    data = json.loads(str1)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><p>  因为文本中含有中文所以，需要指定编码，否则会乱码。运行结果如下：<br><img src="/posts/16fc5052/r_json3.png" alt></p><h2 id="CSV文件储存">CSV文件储存</h2><h3 id="写入一行数据">写入一行数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'Mike'</span>, <span class="string">'20'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="string">'23'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="string">'21'</span>])</span><br></pre></td></tr></table></figure><p>  直接以文本打开如下：<br><img src="/posts/16fc5052/w_csv1.png" alt><br>  可以看到写入的文本默认是以逗号分割的，每调用一次writerow()方法即可写入一行数据。用Excel打开的结果如图：<br><img src="/posts/16fc5052/w_csv2.png" alt><br>  如果想修改列与列之间的分隔符，可以传入delimiter参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data2.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">' '</span>)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'Mike'</span>, <span class="string">'20'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="string">'23'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="string">'21'</span>])</span><br></pre></td></tr></table></figure><p>  结果如下：<br><img src="/posts/16fc5052/w_csv3.png" alt></p><h3 id="写入多行数据">写入多行数据</h3><p>  调用writerows()方法可以同时写入多行，而此时参数就需要为二维列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data3.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerows([[<span class="string">'10001'</span>, <span class="string">'Mike'</span>, <span class="string">'20'</span>], [<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="string">'23'</span>], [<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="string">'21'</span>]])</span><br></pre></td></tr></table></figure><p>  结果和一行一行写是相同。如下：<br><img src="/posts/16fc5052/w_csv1.png" alt></p><h3 id="将字典写入CSV文件">将字典写入CSV文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data4.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = ([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10001'</span>, <span class="string">'name'</span>: <span class="string">'Mike'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10002'</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'age'</span>: <span class="string">'23'</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10003'</span>, <span class="string">'name'</span>: <span class="string">'Jordan'</span>, <span class="string">'age'</span>: <span class="string">'21'</span>&#125;)</span><br></pre></td></tr></table></figure><p>  结果如下：<br><img src="/posts/16fc5052/w_csv1.png" alt><br>  如果是想追加写入的话，只需修改文件的打开模式，即open()函数的第二个参数修改为a。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data4.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = ([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10004'</span>, <span class="string">'name'</span>: <span class="string">'Durant'</span>, <span class="string">'age'</span>: <span class="string">'19'</span>&#125;)</span><br></pre></td></tr></table></figure><p>  在上面的基础上内容变为：<br><img src="/posts/16fc5052/w_csv4.png" alt><br>  此外，如果要写入中文内容的话，可能会遇到编码问题，需要指定编码格式。代码改写如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data4.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = ([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10005'</span>, <span class="string">'name'</span>: <span class="string">'张伟'</span>, <span class="string">'age'</span>: <span class="string">'32'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="读取CSV文件">读取CSV文件</h3><p>  因为文本中含有中文，所以指定了编码格式，否则可能会遇到乱码问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data4.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure><p>  运行结果如下：<br><img src="/posts/16fc5052/r_csv1.png" alt><br>  此外，还可以利用pandas的read_csv()方法将数据从CSV中读取出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'data4.csv'</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>  运行结果如下：<br><img src="/posts/16fc5052/r_csv2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Do you take anyone else’s word about what is right and wrong. ——《21座桥》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;不要人云亦云。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://mrxiuxing.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>KeyError:255--Python3连接MySQL数据库时出错</title>
    <link href="http://mrxiuxing.cn/posts/bee88420.html"/>
    <id>http://mrxiuxing.cn/posts/bee88420.html</id>
    <published>2020-02-15T08:14:54.000Z</published>
    <updated>2020-02-15T08:14:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Despite knowing the journey and where it leads, I embrace it. ——《降临》</center></strong></em><br><em><strong><center>即使预见了所有的悲伤，我依然愿意前往。</center></strong></em></p><a id="more"></a><p>  <em><strong>PS: 连接数据库的代码放在了在最后</strong></em><br>  在用pymysql连接MySQL8.0的时候出现了以下错误，如图：<br><img src="/posts/bee88420/KeyError255.png" alt></p><p>  查看pymysql版本<br><img src="/posts/bee88420/pymysql_v.png" alt></p><p>  查看pymysql是否有新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list --outdated    # 检查哪些包需要更新</span><br></pre></td></tr></table></figure><p><img src="/posts/bee88420/outdated.png" alt><br>  发现有新版本，那就更新试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade packagename    # pip升级指定包，packagename为需要升级的包名</span><br><span class="line">conda update packagename             # Anaconda用户使用此命令</span><br></pre></td></tr></table></figure><p><img src="/posts/bee88420/upgrade.png" alt></p><p>  再查看一下pymysql的版本，发现已经从0.7.10升级到了0.9.3<br><img src="/posts/bee88420/pymysql_09.png" alt></p><p>  让我们再次执行一下刚才的代码，发现已经可以了。<br><img src="/posts/bee88420/database_v.png" alt></p><p>Python3使用pymysql连接MySQL数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'haodaye'</span>, port=<span class="number">3306</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">'SELECT VERSION()'</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(<span class="string">"Database Version: "</span>, data)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Despite knowing the journey and where it leads, I embrace it. ——《降临》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;即使预见了所有的悲伤，我依然愿意前往。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://mrxiuxing.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="pymysql" scheme="http://mrxiuxing.cn/tags/pymysql/"/>
    
  </entry>
  
  <entry>
    <title>爬取猫眼电影Top100</title>
    <link href="http://mrxiuxing.cn/posts/bf91ea5a.html"/>
    <id>http://mrxiuxing.cn/posts/bf91ea5a.html</id>
    <published>2020-02-14T14:40:14.000Z</published>
    <updated>2020-02-14T14:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>For what it’s worth, it’s never too late. ——《返老还童》</center></strong></em><br><em><strong><center>有意义的事，什么时候做都不迟。</center></strong></em></p><a id="more"></a><p>  最近因为新型冠状病毒，在家宅着实在无聊，想着找些电影看。于是乎…</p><h2 id="站点分析">站点分析</h2><p>  我们需要抓取的目标站点为 <a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a> ，打开之后便可以查看榜单。如下图，排名第一的电影是霸王别姬。</p><p><img src="/posts/bf91ea5a/board_4.png" alt><br>  将网页滑到最下方，发现有分页，点击切换到第2页，观察URL的变化。发现页面的URL变成了 <a href="https://maoyan.com/board/4?offset=10" target="_blank" rel="noopener">https://maoyan.com/board/4?offset=10</a> ，如下图：</p><p><img src="/posts/bf91ea5a/board_4_offset10.png" alt><br>  比之前的URL多了一个offset参数，而目前显示的结果是排名11 ~ 20的电影，初步推断这是一个偏移量的参数。再点击下一页，offset参数变成了20，显示的结果是排名21 ~ 30的电影。多次切换页码offset都有改变，由此得出规律，offset代表偏移量值，如果偏移量为n，则显示的是排名n+1 ~ n+10的电影。也就是说Top100我们只需要分开请求10次即可，而10次的参数分别设置为0、10、20…90即可。</p><h2 id="抓取单页源码">抓取单页源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">"http://maoyan.com/board/4?offset=&#123;0&#125;"</span>.format(<span class="number">0</span>)</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/80.0.3987.87 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="comment"># 判定响应是否成功，成功则打印响应内容，否则返回None</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            print(response.text)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    get_one_page()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>  运行即可得到网页源码。获取源码之后，就需要解析页面，提提取出我们想要的信息。</p><h2 id="解析单页源码">解析单页源码</h2><p>  我们使用Chrome浏览器，按下F12在开发者模式下的Network监听组件中查看源代码。查看其中一个条目的源代码。一部电影的信息对的是一个dd节点，我们可以使用正则表达式来提取里面电影的信息。首先排名信息是在class为board-index的i节点内；第二个img节点的data-src属性是图片的链接；再往后，电影名称在后面的p节点内，class为name；主演、发布时间、评分等内容以此类推。如图所示：</p><p><img src="/posts/bf91ea5a/Chrome_dd_dd.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(</span><br><span class="line">        <span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;.*?star.*?&gt;(.*?)&lt;/p&gt;.*?'</span></span><br><span class="line">        <span class="string">'releasetime.*?&gt;(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>,</span><br><span class="line">        re.S</span><br><span class="line">    )</span><br><span class="line">    items = re.findall(pattern, html)</span><br><span class="line">    <span class="comment"># print(items)</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'index'</span>: item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'image'</span>: item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'title'</span>: item[<span class="number">2</span>].strip(),</span><br><span class="line">            <span class="string">'actor'</span>: item[<span class="number">3</span>].strip()[<span class="number">3</span>:] <span class="keyword">if</span> len(item[<span class="number">3</span>]) &gt; <span class="number">3</span> <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">            <span class="string">'time'</span>: item[<span class="number">4</span>].strip()[<span class="number">5</span>:] <span class="keyword">if</span> len(item[<span class="number">4</span>]) &gt; <span class="number">5</span> <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">            <span class="string">'score'</span>: item[<span class="number">5</span>].strip() + item[<span class="number">6</span>].strip()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    html = get_one_page()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="保存到文件中">保存到文件中</h2><p>有两种方式：一种是保存到txt文件中，另一种是保存到csv文件中，可根据需求选择其中一中。</p><h3 id="保存到txt文件">保存到txt文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_txtFile</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 利用json.dumps()方法将字典序列化,并将ensure_ascii参数设置为False,保证结果是中文而不是Unicode码</span></span><br><span class="line">        f.write(json.dumps(content, ensure_ascii=<span class="literal">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        write_to_txtfile(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="保存到csv文件">保存到csv文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_csvFile</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"MovieResult.csv"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"index"</span>, <span class="string">"image"</span>, <span class="string">"title"</span>, <span class="string">"actor"</span>, <span class="string">"time"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writeheader()</span><br><span class="line">        writer.writerows(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        rows.append(item)</span><br><span class="line">    write_to_csvfile(rows)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="抓取多个页面">抓取多个页面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    url = <span class="string">'http://maoyan.com/board/4?offset='</span> + str(offset)</span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        <span class="comment"># write_to_txtfile(item)</span></span><br><span class="line">        rows.append(item)</span><br><span class="line">    write_to_csvfile(rows)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        main(offset=i * <span class="number">10</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="整合完整代码">整合完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓取单页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/80.0.3987.87 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则提取</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(</span><br><span class="line">        <span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;.*?star.*?&gt;(.*?)&lt;/p&gt;.*?'</span></span><br><span class="line">        <span class="string">'releasetime.*?&gt;(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>,</span><br><span class="line">        re.S</span><br><span class="line">    )</span><br><span class="line">    items = re.findall(pattern, html)</span><br><span class="line">    <span class="comment"># print(items)</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'index'</span>: item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'image'</span>: item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'title'</span>: item[<span class="number">2</span>].strip(),</span><br><span class="line">            <span class="string">'actor'</span>: item[<span class="number">3</span>].strip()[<span class="number">3</span>:] <span class="keyword">if</span> len(item[<span class="number">3</span>]) &gt; <span class="number">3</span> <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">            <span class="string">'time'</span>: item[<span class="number">4</span>].strip()[<span class="number">5</span>:] <span class="keyword">if</span> len(item[<span class="number">4</span>]) &gt; <span class="number">5</span> <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">            <span class="string">'score'</span>: item[<span class="number">5</span>].strip() + item[<span class="number">6</span>].strip()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入txt文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_txtFile</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'MovieTop100.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># print(type(json.dumps(content)))</span></span><br><span class="line">        f.write(json.dumps(content, ensure_ascii=<span class="literal">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入CSV文件表头</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_csvField</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"MovieTop100.csv"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.DictWriter(f, filename)</span><br><span class="line">        writer.writeheader()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入CSV文件内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_csvRows</span><span class="params">(content, filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"MovieTop100.csv"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.DictWriter(f, filename)</span><br><span class="line">        <span class="comment"># writer.writeheader()    # 在抓取多页面时会造成表头重复</span></span><br><span class="line">        writer.writerows(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset, fieldnames)</span>:</span></span><br><span class="line">    url = <span class="string">'http://maoyan.com/board/4?offset=&#123;0&#125;'</span>.format(offset)</span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        <span class="comment"># print(item)</span></span><br><span class="line">        <span class="comment"># write_to_txtFile(item)</span></span><br><span class="line">        rows.append(item)</span><br><span class="line">    write_to_csvRows(rows, fieldnames)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fieldnames = [<span class="string">"index"</span>, <span class="string">"image"</span>, <span class="string">"title"</span>, <span class="string">"actor"</span>, <span class="string">"time"</span>, <span class="string">"score"</span>]</span><br><span class="line">    write_to_csvField(fieldnames)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        main(offset=i * <span class="number">10</span>, fieldnames=fieldnames)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="最终效果展示">最终效果展示</h2><p><img src="/posts/bf91ea5a/movietop100_csv.png" alt></p><p><em><strong>PS: 本文参考资料《Python3网络开发实战》–崔庆才。</strong></em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;For what it’s worth, it’s never too late. ——《返老还童》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;有意义的事，什么时候做都不迟。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="http://mrxiuxing.cn/tags/requests/"/>
    
  </entry>
  
</feed>
