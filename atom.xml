<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.xiuxing&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mrxiuxing.cn/"/>
  <updated>2020-12-27T05:42:51.000Z</updated>
  <id>http://mrxiuxing.cn/</id>
  
  <author>
    <name>Mr.xiuxing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu Server 20.04 LTS 安装</title>
    <link href="http://mrxiuxing.cn/posts/a4f1f8b3.html"/>
    <id>http://mrxiuxing.cn/posts/a4f1f8b3.html</id>
    <published>2020-12-27T05:42:51.000Z</published>
    <updated>2020-12-27T05:42:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Keep  smiling and never give up, even when things get you down. ——《黑鹰坠落》</center></strong></em><br><em><strong><center>即使现实令你沮丧, 也要保持微笑，永不永不言败。</center></strong></em></p><a id="more"></a><h2 id="本地环境">本地环境</h2><p>  Windows 10 专业版 1909<br>  VMware Workstation 16 Pro</p><h2 id="镜像准备">镜像准备</h2><p>  进入<a href="https://ubuntu.com/download/server" target="_blank" rel="noopener">Ubuntu Server 下载页面</a>，点击Option 3</p><p><img src="/posts/a4f1f8b3/server_01.png" alt></p><p>  进入如下图的页面，点击 Download Ubuntu Server 20.04.1 LTS，就可以下载了。</p><p><img src="/posts/a4f1f8b3/server_02.png" alt></p><p>  这样直接下载的速度大概是2~3m的样子，如果你觉得下载慢，可以使用迅雷下载。这里我使用的是Chrome 可以在搜索栏输入 chrome://downloads/ 既可进入Chrome的下载内容，然后右键复制链接地址在迅雷下载，我使用的是百兆带宽的WiFi，因为连接的设备较多，但依然可以达到5m左右。</p><p><img src="/posts/a4f1f8b3/server_03.png" alt></p><h2 id="VMware-准备">VMware 准备</h2><p>  选择自定义（高级），点击下一步</p><p><img src="/posts/a4f1f8b3/server_04.png" alt></p><p>  点击下一步</p><p><img src="/posts/a4f1f8b3/server_05.png" alt></p><p>  选择稍后安装操作系统，点击下一步</p><p><img src="/posts/a4f1f8b3/server_06.png" alt></p><p>  客户端操作系统选择Linux，版本选择Ubuntu 64 位即可，点击下一步</p><p><img src="/posts/a4f1f8b3/server_07.png" alt></p><p>  虚拟机名称输入你想给虚拟机起的名字，这个名字是展示在VMware上的名字以及后面设置磁盘文件名称的默认文件名；位置，即你想要储存的位置，如果你C盘剩余空间不富裕，就不要选择C盘了；点击下一步</p><p><img src="/posts/a4f1f8b3/server_08.png" alt></p><p>  处理器数量以及每个处理器内核数量可以根据需求设置，但这里后期是可以修改的，所有我选择的是默认；然后点击下一步</p><p><img src="/posts/a4f1f8b3/server_09.png" alt></p><p>  这里是分配给虚拟机内存。可以在1号位置直接输入，也可以在2号位置上下滑动。（但是最好不要出超过最大推荐内存，我的机器是16G内存，这里显示的最大推荐内存是13.4GB，也就是我给这台虚拟机分配的最大内存不能超过13.4GB）点击下一步</p><p><img src="/posts/a4f1f8b3/server_10.png" alt></p><p>  网络连接选择使用桥接网络（这样虚拟机就有了一个除192.168.0.1的类似于192.168.X.X的内网IP）点击下一步</p><p><img src="/posts/a4f1f8b3/server_11.png" alt></p><p>  选择I/O控制器类型，这里选择推荐即可；点击下一步</p><p><img src="/posts/a4f1f8b3/server_12.png" alt></p><p>  选择磁盘类型，这里选择推荐即可；点击下一步</p><p><img src="/posts/a4f1f8b3/server_13.png" alt></p><p>  选择创建新虚拟磁盘；点击下一步</p><p><img src="/posts/a4f1f8b3/server_14.png" alt></p><p>  根据需求设置磁盘大小，因大多数云服务器都是40GB，所以我这里设置的40GB；选择将虚拟机存储为单个文件；点击下一步</p><p><img src="/posts/a4f1f8b3/server_15.png" alt></p><p>  指定磁盘文件，这里默认就好；点击下一步</p><p><img src="/posts/a4f1f8b3/server_16.png" alt></p><p>  这里我们还可以再自定义一下硬件</p><p><img src="/posts/a4f1f8b3/server_17.png" alt></p><p>  如果你对刚才设置的内存或者处理器不太满意可以更改一下，也可以移除一些用不到的设备，如声卡和打印机，如果你不需要更改上面所说的设置，那就点击新CD/DVD（STSA）</p><p><img src="/posts/a4f1f8b3/server_18.png" alt></p><p>  选择使用ISO映像文件，点击浏览，找到你刚刚下载的Ubuntu Server 20.04 镜像文件；点击关闭</p><p><img src="/posts/a4f1f8b3/server_19.png" alt></p><p>  点击完成</p><p><img src="/posts/a4f1f8b3/server_20.png" alt></p><p>  至此，VMware Workonstation 准备完毕</p><p><img src="/posts/a4f1f8b3/server_21.png" alt></p><h2 id="安装-Ubuntu-Server">安装 Ubuntu Server</h2><p>  点击上图中的开启此虚拟机，等待片刻，直到出现下图所示。使用键盘上的上下键选择语言，这里我选择的是English（主要是没有中文），然后按下回车键</p><p><img src="/posts/a4f1f8b3/server_22.png" alt></p><p>  这里选择Continue without updating 回车</p><p><img src="/posts/a4f1f8b3/server_23.png" alt></p><p>  选择键盘布局，或选择“识别键盘”自动检测您的键盘布局 ，我使用的默认设置，回车</p><p><img src="/posts/a4f1f8b3/server_24.png" alt></p><p>  配置至少一个此服务器可用于与其他计算机对话的接口也就是IP，这里使用的是自动分配的IP，你在安装过程中生成的和我的可能不一样，不用担心，直接回车</p><p><img src="/posts/a4f1f8b3/server_25.png" alt></p><p>  以“http://[[user][：pass]@]host[：port]/”的格式配置代理，我没有代理，直接回车</p><p><img src="/posts/a4f1f8b3/server_26.png" alt></p><p>  配置你在使用apt时的镜像源，这是我设置的是 <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> ，也就是阿里云的镜像源。键盘按下上键。进入 mirror address 输入框，输入阿里云镜像源，然后下键回到Done，如下图所示，回车（当然你也可以直接回车然后在安装完系统之后进行配置）</p><p><img src="/posts/a4f1f8b3/server_27.png" alt></p><p>  如果你是新手，不要选中2号位置，（如果选中2号选项，则可以选择设置LVM并使用LUKS加密LVM配置）然后回车即可</p><p><img src="/posts/a4f1f8b3/server_28.png" alt></p><p>   如果你觉得这样设置可以，直接回车</p><p><img src="/posts/a4f1f8b3/server_29.png" alt></p><p>   选择Continue将会清空整个磁盘进行安装，并且你将无法回退到上一步，（这里的清空磁盘指的是你分配给此虚拟机的虚拟磁盘，并不是你的物理磁盘，不用担心）。我们选中Continue，回车</p><p><img src="/posts/a4f1f8b3/server_30.png" alt></p><p>   这里依次输入的是：你的名字、你服务器的名字、用户名、密码、验证密码，设置完回车即可</p><p><img src="/posts/a4f1f8b3/server_31.png" alt></p><p>   这里我们选中 Install OpenSSH server，当然这个也是可以在安装完系统之后安装，这里为了省事就选中了，然后选中 Done 回车</p><p><img src="/posts/a4f1f8b3/server_32.png" alt></p><p>   安装适用于Ubuntu的软件，这里根据需求选择即可，然后选中 Done 回车</p><p><img src="/posts/a4f1f8b3/server_33.png" alt></p><p>   到了这里，便开始 Ubuntu Server 的安装了。安装速度取决于你的网速、磁盘速度、软件选择的多少。</p><p><img src="/posts/a4f1f8b3/server_34.png" alt></p><p>   如果出现了下图所示的情况，你可以选择继续等待，知道安装完毕，也可以选中 Cancel update and reboot（取消更新并重启）这里我选择了取消更新并重启</p><p><img src="/posts/a4f1f8b3/server_35.png" alt></p><p>   取消更新也是需要等待片刻的</p><p><img src="/posts/a4f1f8b3/server_36.png" alt></p><p>   出现如下图所示，直接回车，然后虚拟机就会重启了，等待片刻</p><p><img src="/posts/a4f1f8b3/server_37.png" alt></p><p>   如果出现如下图所示，直接回车，就可以登录系统了</p><p><img src="/posts/a4f1f8b3/server_38.png" alt></p><p>   输入你的用户名，回车；然后输入你的密码（密码是不会显示的，就直接输完回车即可）然后就会来到如下图所示页面</p><p><img src="/posts/a4f1f8b3/server_39.png" alt></p><p>   因为我们在安装系统时取消了更新，所以有些包不是最新的，使用 sudo apt update 然后输入密码，看一下有多少需要更新。如下图所示，有80个包可以更新，可以使用 apt list --upgrade 查看具体是哪些需要更新。（因为在安装系统的时候我们设置了 mirror address 为阿里云，所以这里使用apt时命中的都是阿里云的源）接下来使用 sudo apt upgrade -y 更新包<br><img src="/posts/a4f1f8b3/server_40.png" alt></p><p>  我们可以再次执行 sudo apt update 以及 sudo apt upgrade 发现没有需要更新的包了。</p><p><img src="/posts/a4f1f8b3/server_41.png" alt></p><p>  至此 Ubuntu Server 20.04 安装完毕。因为是在虚拟机安装的，所以千万别忘了快照这个超级实用的功能，为了避免手残造成的失误，方便回退到你设置快照的某一时间节点。</p><p>  我们可以使用 ip addr 查看当前机器的ip地址。有了这个地址我们就可以使用ssh工具连接到这台机器了。如下图，这台机器的地址是 192.168.0.106</p><p><img src="/posts/a4f1f8b3/server_42.png" alt></p><p>   VMware 还有一个强大的功能就是克隆。如果你想搭建集群，又不想一台一台安装，那就可以使用克隆功能（前提：被克隆的机器状态必须是关闭）。还有另一种方法，如本次安装机器的名字是 UbuntuServer，你在安装目录下找到UbuntuServer文件夹，复制一下，换个名字即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Keep  smiling and never give up, even when things get you down. ——《黑鹰坠落》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;即使现实令你沮丧, 也要保持微笑，永不永不言败。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://mrxiuxing.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://mrxiuxing.cn/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://mrxiuxing.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy</title>
    <link href="http://mrxiuxing.cn/posts/6b8faf09.html"/>
    <id>http://mrxiuxing.cn/posts/6b8faf09.html</id>
    <published>2020-11-16T11:32:59.000Z</published>
    <updated>2020-11-16T11:32:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>If you only do what you can do， you will never be more than you are now. ——《功夫熊猫3》</center></strong></em><br><em><strong><center>如果你只做力所能及的事情, 你就没办法进步。</center></strong></em></p><a id="more"></a><h2 id="什么是-Scrapy">什么是 Scrapy</h2><p>  Scrapy是适用于Python的一个快速、高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试。</p><p>  Scrapy是一个适用爬取网站数据、提取结构性数据的应用程序框架，它可以应用在广泛领域：Scrapy 常应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。通常我们可以很简单的通过 Scrapy 框架实现一个爬虫，抓取指定网站的内容或图片。</p><p>  截止2020年11月16日，Scrapy最新版本为2.4，Python版本最低要求3.6+，适用于Linux，Windows，macOS，BSD</p><h2 id="Scrapy-官方站点">Scrapy 官方站点</h2><p>   github地址：<a href="https://github.com/scrapy/scrapy" target="_blank" rel="noopener">https://github.com/scrapy/scrapy</a><br>   官方社区：<a href="https://scrapy.org/" target="_blank" rel="noopener">https://scrapy.org/</a><br>   官方文档：<a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="noopener">https://docs.scrapy.org/en/latest/</a></p><h2 id="安装-Scrapy">安装 Scrapy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><p>你也可以指定源，一般这样会快很多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p>  如果你的scrapy是很早之前安装的，你也可以使用下面的命令进行升级安装。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy -i --upgrade https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p>  我在使用上面的命令进行更新时出现了以下错误：<br><img src="/posts/6b8faf09/scrapy_1.png" alt></p><p>  意思是：gerapy 0.9.2 版本要求 pymysql 的版本为 0.7.10，但是您的 pymysql 版本为 0.10.1，这是不兼容的。不过在上图的最后一行中，我们可以了解到 scrapy 是更新成功的。</p><p>  使用下面的命令查看scrapy 现在的版本。确定scrapy是更新成功了。既然安装成功就暂时先不管这些小问题了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy --version</span><br></pre></td></tr></table></figure><p><img src="/posts/6b8faf09/scrapy_2.png" alt></p><p>  使用 pip install scrapy 安装，极可能会遇到 Twisted 安装报错以及其他包版本的错误。<br>  关于 Twisted 可以在这个网站下载：<a href="https://pypi.org/project/Twisted/#files" target="_blank" rel="noopener">https://pypi.org/project/Twisted/#files</a><br>  在下载之前一定要先确定你机器上的Python版本，在cmd中输入python即可，如下图：</p><p><img src="/posts/6b8faf09/scrapy_3.png" alt></p><p>  可以看出我的python版本是3.7，机器是64位机器，那么我就可以下载下图所示版本：</p><p><img src="/posts/6b8faf09/scrapy_4.png" alt></p><p>  下载完成之后 使用 win + R 输入cmd 打开命令窗口，并输入 pip install 然后将你下载好的Twisted文件拖进命令窗口，然后回车即可安装。</p><p>  安装完 Twisted 再次执行 pip install scrapy 命令进行安装，如果遇到其他包版本问题，按照错误提示安装指定版本的包即可。</p><p>  当然我最推荐的安装方式是：先安装anaconda，然后安装scrapy，这样可以避免很多错误以节约时间。关于anaconda的下载可以到<a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>，关于镜像源的更换可以看<a href="https://jingyan.baidu.com/article/1876c8527be1c3890a137645.html" target="_blank" rel="noopener">百度经验 - anaconda清华源更换</a>这篇文章。</p><p>  在清华源镜像站中 Anaconda3-2020.02-Windows-x86_64.exe 是最新的支持python3.7的版本，Anaconda3-2020.07-Windows-x86_64.exe是最新的支持python3.8的版本，关于其他版本可自行安装测试。</p><h2 id="Scrapy架构">Scrapy架构</h2><p><img src="/posts/6b8faf09/scrapy_5.jpg" alt></p><h3 id="Scrapy-组件">Scrapy 组件</h3><p><b>1、Scrapy Engine (引擎):</b><br>  负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等。</p><p><b>2、Scheduler (调度器):</b><br>  负责接受引擎发送过来的Request请求，并按照一定的方式进行整理排列，入队，当引擎需要时，交还给引擎。</p><p><b>3、Downloader (下载器):</b><br>  负责下载Scrapy Engine(引擎)发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spider来处理。</p><p><b>4、Spider (爬虫):</b><br>  负责处理所有Responses，从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给引擎，再次进入Scheduler(调度器)。</p><p><b>5、Item Pipeline (管道):</b><br>  负责处理Spider中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方。</p><p><b>6、Downloader Middlewares (下载中间件):</b><br>  介于Scrapy引擎和下载器之间的中间件，可以自定义扩展下载功能的组件。</p><p><b>7、Spider Middlewares (爬虫中间件):</b><br>  介于Scrapy引擎和爬虫之间的中间件，可以自定义扩展操作引擎和爬虫中间通信的功能组件。</p><p><b>8、Scheduler Middlewares(调度中间件):</b><br>  介于Scrapy引擎和调度之间的中间件，可以自定义扩展操作引擎和调度器中间通信的功能组件。</p><h3 id="Scrapy-运行流程">Scrapy 运行流程</h3><p>1、Spider：Engine，Engine 起来干活了！Spider 将 第一个 requests 发送给 Engine (引擎)<br>2、Engine：知道了！ Engine 对 requests 不做任何的处理就发送给 Scheduler (调度器)<br>3、Scheduler：看了一眼这个 requests，Scheduler 将 requests 发送给 Engine (引擎) ，并告诉引擎：你把它交给 Downloader (下载器)<br>4、Engine：知道了！ Engine 默默地将 requests (Downloader Middlewares中process_request进行处理) 发送给 Downloader (下载器)<br>5、Downloader：Engine，你看，我下载好了，快夸夸我。Downloader 将 response (Downloader Middlewares中process_response进行处理) 发送给 Engine (引擎)<br>6、Engine：知道了！Engine 将 response 交给 spider (爬虫)<br>7、Spider：Engine，Engine 我处理好了。Spider 将 item 以及下一个 requests 发送给Engine (引擎)<br>8、Engine：知道了！Engine 将 item 交给 Item Pipeline (管道) 过滤储存，将下一个 requests 发送给 Scheduler (调度器)</p><p>  如果你只有一个链接需要抓取，那么在第8步的时候 Engine 将 item 交给 Item Pipeline 后，Engine就会停止，直至 Item Pipeline处理完所有的 item ，整个程序才算停止。在后面我会举例子证明这一点。如果你有很多的链接需要抓取，那么这个流程就是：1 ——&gt; 2 ——&gt; 3 ——&gt; 4 ——&gt; 5 ——&gt; 6 ——&gt; 7 ——&gt; 8 ——&gt; 3 ——&gt; 4 ——&gt; 5 ——&gt; 6 ——&gt; 7 ——&gt; 8 ——&gt; 3 ——&gt; … …  ——&gt; 8 。直至所有 item 处理完成，程序停止。</p><h2 id="文中提到的网站">文中提到的网站</h2><p><a href="https://github.com/scrapy/scrapy" target="_blank" rel="noopener">Scrapy | github</a>, <a href="https://scrapy.org/" target="_blank" rel="noopener">Scrapy | 官方社区</a>, <a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="noopener">Scrapy | 官方文档</a>, <a href="https://pypi.org/project/Twisted/#files" target="_blank" rel="noopener">pypi | Twisted</a>, <a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>, <a href="https://jingyan.baidu.com/article/1876c8527be1c3890a137645.html" target="_blank" rel="noopener">百度经验 | anaconda清华源更换</a></p><h2 id="未完待续-…">未完待续 …</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;If you only do what you can do， you will never be more than you are now. ——《功夫熊猫3》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;如果你只做力所能及的事情, 你就没办法进步。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="http://mrxiuxing.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy输出JSON中文乱码</title>
    <link href="http://mrxiuxing.cn/posts/231c7ec.html"/>
    <id>http://mrxiuxing.cn/posts/231c7ec.html</id>
    <published>2020-08-22T07:14:32.000Z</published>
    <updated>2020-08-22T07:14:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>If you’re not statisfied with the life you’re living, don’t just complain. Do something about it. ——《三十而已》</center></strong></em><br><em><strong><center>对于现状的不满, 你不能只是抱怨, 而是要有勇气做出改变。</center></strong></em></p><a id="more"></a><h2 id="发现问题">发现问题</h2><p>在使用下面的命令运行scrapy使其输出json格式时，出现了中文乱码问题, 如下图:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl spidername -o test.json</span><br></pre></td></tr></table></figure><p><img src="/posts/231c7ec/scrapy_json_1.png" alt></p><h2 id="解决问题">解决问题</h2><h3 id="方法一">方法一</h3><p>运行爬虫时指定编码格式, 即在命令后面增加 <b>-s FEED_EXPORT_ENCODING=utf-8</b>。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl spidername -o test.json -s FEED_EXPORT_ENCODING=utf<span class="number">-8</span></span><br></pre></td></tr></table></figure><h3 id="方法二">方法二</h3><p>方法一虽然可以解决问题，但并没有一劳永逸，每次运行爬虫都需要指定编码格式。所以我们直接在 <b>settings</b> 中指定编码格式。在合适的位置加入下面一行即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FEED_EXPORT_ENCODING = <span class="string">'utf-8'</span></span><br></pre></td></tr></table></figure><p><img src="/posts/231c7ec/scrapy_json_2.png" alt></p><h3 id="方法三">方法三</h3><p>自定义<b>Pipeline</b>,并在<b>settings</b>中开启</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.f = codecs.open(<span class="string">'test.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        self.f.write(<span class="string">'['</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        content = json.dumps(item, ensure_ascii=<span class="literal">False</span>) + <span class="string">',\n'</span></span><br><span class="line">        self.f.write(content)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.f.write(<span class="string">']'</span>)</span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure><p>在<b>settings</b>中找到<b>ITEM_PIPELINES</b>，修改成如下格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'xxx.pipelines.JsonPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义Pipeline之后，就不用使用 <b>-o</b> 指定文件了。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl spidername</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;If you’re not statisfied with the life you’re living, don’t just complain. Do something about it. ——《三十而已》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;对于现状的不满, 你不能只是抱怨, 而是要有勇气做出改变。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://mrxiuxing.cn/categories/Scrapy/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="http://mrxiuxing.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://mrxiuxing.cn/posts/2f57a694.html"/>
    <id>http://mrxiuxing.cn/posts/2f57a694.html</id>
    <published>2020-06-07T10:18:45.000Z</published>
    <updated>2020-06-07T10:18:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>If you keep on believing, the dreams that you wish will come true. ——《仙履奇缘》</center></strong></em><br><em><strong><center>坚持心中有梦，终有一日它会实现。</center></strong></em></p><a id="more"></a><h2 id="概念">概念</h2><p>  正则表达式，又称规则表达式（Regular Expression，在代码中常简写为regex、regexp或RE）。正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p><h2 id="特点">特点</h2><ol><li>灵活性、逻辑性和功能性非常强；</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。</li></ol><h2 id="元字符">元字符</h2><table><thead><tr><th style="text-align:center">字符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，‘n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\\’ 匹配 “\” 而 “\(” 则匹配 “(”。</td></tr><tr><td style="text-align:center">^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \^</td></tr><tr><td style="text-align:center">$</td><td>匹配输入字符串的结尾位置。要匹配 $ 字符本身，请使用 \$</td></tr><tr><td style="text-align:center">*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td style="text-align:center">+</td><td>匹配前面的子表达式一次或多次。例如，‘zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td style="text-align:center">?</td><td>匹配前面的子表达式零次或一次。例如，“do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td style="text-align:center">{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td style="text-align:center">{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，‘o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。‘o{1,}’ 等价于 ‘o+’。‘o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td style="text-align:center">{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}” 将匹配 “fooooood” 中的前三个 o。‘o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td style="text-align:center">?</td><td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，‘o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td style="text-align:center">.</td><td>匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像&quot;(.|\n)&quot;的模式。</td></tr><tr><td style="text-align:center">(pattern)</td><td>匹配 pattern 并获取这一匹配。要匹配圆括号字符，请使用 ‘\(’ 或 ‘\)’。</td></tr><tr><td style="text-align:center">(?:pattern)</td><td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td style="text-align:center">(?=pattern)</td><td>正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)“能匹配&quot;Windows2000&quot;中的&quot;Windows”，但不能匹配&quot;Windows3.1&quot;中的&quot;Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:center">(?!pattern)</td><td>正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如&quot;Windows(?!95|98|NT|2000)“能匹配&quot;Windows3.1&quot;中的&quot;Windows”，但不能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:center">(?&lt;=pattern)</td><td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，&quot;(?&lt;=95|98|NT|2000)Windows&quot;能匹配&quot;2000Windows&quot;中的&quot;Windows&quot;，但不能匹配&quot;3.1Windows&quot;中的&quot;Windows&quot;。</td></tr><tr><td style="text-align:center">(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类似，只是方向相反。例如&quot;(?&lt;!95|98|NT|2000)Windows&quot;能匹配&quot;3.1Windows&quot;中的&quot;Windows&quot;，但不能匹配&quot;2000Windows&quot;中的&quot;Windows&quot;。</td></tr><tr><td style="text-align:center">x|y</td><td>匹配 x 或 y。例如，‘z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td style="text-align:center">[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td style="text-align:center">[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、‘l’、‘i’、‘n’。</td></tr><tr><td style="text-align:center">[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td style="text-align:center">[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td style="text-align:center">\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配&quot;never&quot; 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td style="text-align:center">\B</td><td>匹配非单词边界。‘er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td style="text-align:center">\cx</td><td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td style="text-align:center">\d</td><td>匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td style="text-align:center">\D</td><td>匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td style="text-align:center">\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td style="text-align:center">\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td style="text-align:center">\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td style="text-align:center">\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td style="text-align:center">\S</td><td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td style="text-align:center">\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td style="text-align:center">\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td style="text-align:center">\w</td><td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td style="text-align:center">\W</td><td>匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td style="text-align:center">\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td style="text-align:center">\num</td><td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td style="text-align:center">\n</td><td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值</td></tr><tr><td style="text-align:center">\nm</td><td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td style="text-align:center">\nml</td><td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td style="text-align:center">\un</td><td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="常用正则表达式">常用正则表达式</h2><h3 id="校验数字">校验数字</h3><h4 id="数字">数字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">0</span><span class="number">-9</span>]*$</span><br></pre></td></tr></table></figure><h4 id="n位的数字">n位的数字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;n&#125;$</span><br></pre></td></tr></table></figure><h4 id="至少n位的数字">至少n位的数字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;n,&#125;$</span><br></pre></td></tr></table></figure><h4 id="m-n位的数字">m-n位的数字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;m,n&#125;$</span><br></pre></td></tr></table></figure><h4 id="零和非零开头的数字">零和非零开头的数字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(<span class="number">0</span>|[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)$</span><br></pre></td></tr></table></figure><h4 id="非零开头的最多带两位小数的数字">非零开头的最多带两位小数的数字</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure><h4 id="带1-2位小数的正数或负数">带1-2位小数的正数或负数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure><h4 id="正数、负数、和小数">正数、负数、和小数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\-|\+)?\d+(\.\d+)?$</span><br></pre></td></tr></table></figure><h4 id="有两位小数的正实数">有两位小数的正实数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br></pre></td></tr></table></figure><h4 id="有1-3位小数的正实数">有1~3位小数的正实数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br></pre></td></tr></table></figure><h4 id="非零的正整数">非零的正整数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">1</span><span class="number">-9</span>]\d*$</span><br><span class="line">^([<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$</span><br><span class="line">^\+?[1-9][0-9]*$</span><br></pre></td></tr></table></figure><h4 id="非零的负整数">非零的负整数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^-[<span class="number">1</span><span class="number">-9</span>]\d*$</span><br><span class="line">^\-[<span class="number">1</span><span class="number">-9</span>][]<span class="number">0</span><span class="number">-9</span>*$</span><br></pre></td></tr></table></figure><h4 id="非负整数">非负整数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^\d+$</span><br><span class="line">^[<span class="number">1</span><span class="number">-9</span>]\d*|<span class="number">0</span>$</span><br></pre></td></tr></table></figure><h4 id="非正整数">非正整数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^-[<span class="number">1</span><span class="number">-9</span>]\d*|<span class="number">0</span>$</span><br><span class="line">^((-\d+)|(<span class="number">0</span>+))$</span><br></pre></td></tr></table></figure><h4 id="非负浮点数">非负浮点数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^\d+(\.\d+)?$</span><br><span class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span><br></pre></td></tr></table></figure><h4 id="非正浮点数">非正浮点数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^((-\d+(\.\d+)?)|(0+(\.0+)?))$</span><br><span class="line">^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span><br></pre></td></tr></table></figure><h4 id="正浮点数">正浮点数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">1</span><span class="number">-9</span>]\d*\.\d*|<span class="number">0</span>\.\d*[<span class="number">1</span><span class="number">-9</span>]\d*$ </span><br><span class="line">^(([<span class="number">0</span><span class="number">-9</span>]+\.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*\.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*))$</span><br></pre></td></tr></table></figure><h4 id="负浮点数">负浮点数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^-([<span class="number">1</span><span class="number">-9</span>]\d*\.\d*|<span class="number">0</span>\.\d*[<span class="number">1</span><span class="number">-9</span>]\d*)$</span><br><span class="line">^(-(([<span class="number">0</span><span class="number">-9</span>]+\.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*\.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)))$</span><br></pre></td></tr></table></figure><h4 id="浮点数">浮点数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(-?\d+)(\.\d+)?$</span><br><span class="line">^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span><br></pre></td></tr></table></figure><h3 id="校验字符">校验字符</h3><h4 id="汉字">汉字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br></pre></td></tr></table></figure><h4 id="长度为3-20的所有字符">长度为3-20的所有字符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br></pre></td></tr></table></figure><h4 id="由26个英文字母组成的字符串">由26个英文字母组成的字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z]+$</span><br></pre></td></tr></table></figure><h4 id="由26个大写英文字母组成的字符串">由26个大写英文字母组成的字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Z]+$</span><br></pre></td></tr></table></figure><h4 id="由26个小写英文字母组成的字符串">由26个小写英文字母组成的字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-z]+$</span><br></pre></td></tr></table></figure><h4 id="由数字和26个英文字母组成的字符串">由数字和26个英文字母组成的字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z0<span class="number">-9</span>]+$</span><br></pre></td></tr></table></figure><h4 id="由数字、26个英文字母或者下划线组成的字符串">由数字、26个英文字母或者下划线组成的字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^\w+$</span><br><span class="line">^\w&#123;<span class="number">6</span>,<span class="number">18</span>&#125;$</span><br></pre></td></tr></table></figure><h4 id="中文、英文、数字包括下划线">中文、英文、数字包括下划线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>_]+$</span><br></pre></td></tr></table></figure><h4 id="中文、英文、数字但不包括下划线等符号">中文、英文、数字但不包括下划线等符号</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]+$</span><br><span class="line">^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]&#123;<span class="number">2</span>,<span class="number">20</span>&#125;$</span><br></pre></td></tr></table></figure><h4 id="可以输入含有-’-等字符">可以输入含有^%&amp;’,;=?$&quot;等字符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^%&amp;<span class="string">',;=?$\x22]+</span></span><br></pre></td></tr></table></figure><h4 id="禁止输入含有-的字符">禁止输入含有~的字符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^~\x22]+</span><br></pre></td></tr></table></figure><h3 id="特殊需求">特殊需求</h3><h4 id="Email地址">Email地址</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$</span><br><span class="line">^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br></pre></td></tr></table></figure><h4 id="帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线">帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z][a-zA-Z0<span class="number">-9</span>_]&#123;<span class="number">4</span>,<span class="number">15</span>&#125;$</span><br></pre></td></tr></table></figure><h4 id="密码-以字母开头，长度在6-18之间，只能包含字母、数字和下划线">密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z]\w&#123;<span class="number">6</span>,<span class="number">18</span>&#125;$</span><br></pre></td></tr></table></figure><h4 id="强密码-必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-18之间">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-18之间)</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,18&#125;$</span><br></pre></td></tr></table></figure><h4 id="19或20年某月某日">19或20年某月某日</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(19|20)\d&#123;2&#125;[\.\-/年](\d&#123;1,2&#125;[\.\-/月日号]?)&#123;2&#125;</span><br></pre></td></tr></table></figure><h2 id="示例（Python）">示例（Python）</h2><h3 id="例一：爬虫中response返回的非标准json数据">例一：爬虫中response返回的非标准json数据</h3><h4 id="部分展示">部分展示</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**/jQuery34102398183434787493_1591415079072(&#123;</span><br><span class="line">"status": "000001",</span><br><span class="line">"msg": "\u62c9\u53d6\u6210\u529f",</span><br><span class="line">"type": "000002",</span><br><span class="line">"total": 31670,</span><br><span class="line">"data": [&#123;</span><br><span class="line">"contentid": 11698033,</span><br><span class="line">"title": "\u6c99\u576a\u575d\u533a\u4e2d\u6881\u9547\u6458\u84dd\u8393\u00a0\u7ea6\u4e0d\u7ea6\uff1f",</span><br><span class="line">"modelid": 1,</span><br><span class="line">"thumb": "\/upload\/cmsupload\/2020\/0607\/1591498451982.jpg",</span><br><span class="line">"content": "&lt;p&gt;\u91cd\u5e86\u7f51\u7edc\u5e7f\u64ad\u7535\u89c6\u53f0&amp;nbsp;\u8bb0\u8005 \u738b\u5c0f\u751f&lt;\/p&gt;\n&lt;p&gt;\u590f\u5b63\u662f\u84dd\u8393\u6210\u719f\u7684\u5b63\u8282\uff0c\u79bb\u4e3b\u57ce\u5f88\u8fd1\u7684\u6c99\u576a\u575d\u533a\u4e2d\u6881\u9547\uff0c500\u591a\u4ea9\u84dd\u8393\u6b63\u7b49\u7740\u4f60\u53bb\u91c7\u6458\u3002\u5982\u679c\u6709\u7a7a\uff0c\u4e0d\u59a8\u53bb\u4f53\u9a8c\u7530\u56ed\u4e50\u8da3\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498357808.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105240\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;6\u67086\u65e5\uff0c\u8bb0\u8005\u5728\u4e2d\u6881\u9547\u65b0\u53d1\u6751\u7684\u53e4\u8302\u84dd\u8393\u8c37\u770b\u5230\uff0c\u4e00\u7c07\u4e00\u7c07\u7684\u84dd\u8393\uff0c\u72b9\u5982\u5b9d\u77f3\u822c\uff0c\u60ac\u6302\u5728\u6811\u68a2\u4e0a\uff0c\u5e02\u6c11\u4eec\u4e09\u4e94\u6210\u7fa4\uff0c\u7a7f\u68ad\u5728\u7530\u95f4\uff0c\u91c7\u6458\u84dd\u8393\uff0c\u611f\u53d7\u4e30\u6536\u7684\u559c\u60a6\uff0c\u5c3d\u60c5\u4eab\u53d7\u5468\u672b\u7f8e\u597d\u65f6\u5149\u3002\u674e\u5973\u58eb\u4eca\u5929\u5e26\u7740\u5b69\u5b50\u6765\u5230\u8fd9\u91cc\uff0c\u91c7\u6458\u4e86\u4e00\u7bee\u5b50\u84dd\u8393\uff0c\u5979\u8868\u793a\uff0c\u7531\u4e8e\u53d7\u75ab\u60c5\u5f71\u54cd\uff0c\u5b69\u5b50\u90fd\u5f88\u5c11\u51fa\u95e8\uff0c\u73b0\u5728\u75ab\u60c5\u597d\u8f6c\uff0c\u5468\u672b\u6b63\u597d\u5e26\u7740\u5b69\u5b50\u51fa\u6765\u8d70\u8d70\uff0c\u4eb2\u8fd1\u5927\u81ea\u7136\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498368902.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105244\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;\u636e\u84dd\u8393\u8c37\u8d1f\u8d23\u4eba\u4ecb\u7ecd\uff0c\u4ed6\u4eec\u5171\u6709\u84dd\u8393100\u4f59\u4ea9\uff0c10\u591a\u4e2a\u54c1\u79cd\uff0c4\u4e07\u591a\u682a\uff0c\u91c7\u6458\u5468\u671f\u5c06\u6301\u7eed\u52307\u6708\u521d\uff0c\u5728\u6b64\u671f\u95f4\u5e02\u6c11\u5747\u53ef\u76f4\u63a5\u524d\u5f80\u91c7\u6458\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498386566.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105248\" \/&gt;&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498386165.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105251\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;\u636e\u4e2d\u6881\u9547\u519c\u670d\u4e2d\u5fc3\u5de5\u4f5c\u4eba\u5458\u4ecb\u7ecd\uff0c\u7531\u4e8e\u4e2d\u6881\u9547\u6d77\u62d4\u8d85\u8fc7500\u7c73\uff0c\u6c14\u5019\u6e29\u548c\u3001\u571f\u58e4\u5bcc\u7852\u3001\u9178\u78b1\u9002\u5b9c\uff0c\u975e\u5e38\u9002\u5408\u79cd\u690d\u84dd\u8393\u3002\u8fd1\u5e74\u6765\uff0c\u7ed3\u5408\u4e61\u6751\u632f\u5174\u6218\u7565\u7684\u5b9e\u65bd\uff0c\u4e2d\u6881\u9547\u5927\u529b\u53d1\u5c55\u84dd\u8393\u79cd\u690d\uff0c\u73b0\u6709\u9762\u79ef500\u591a\u4ea9\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498405459.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105254\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;\u84dd\u8393\u679c\u5b9e\u4e2d\u542b\u6709\u4e30\u5bcc\u7684\u8425\u517b\u6210\u5206\uff0c\u5c24\u5176\u5bcc\u542b\u82b1\u9752\u7d20\uff0c\u5b83\u4e0d\u4ec5\u5177\u6709\u826f\u597d\u7684\u8425\u517b\u4fdd\u5065\u4f5c\u7528\uff0c\u8fd8\u5177\u6709\u9632\u6b62\u8111\u795e\u7ecf\u8001\u5316\u3001\u5f3a\u5fc3\u3001\u6297\u764c\u3001\u8f6f\u5316\u8840\u7ba1\u3001\u589e\u5f3a\u4eba\u4f53\u514d\u75ab\u7b49\u529f\u80fd\uff0c\u56e0\u6b64\u6df1\u53d7\u5e02\u6c11\u559c\u7231\u3002&lt;\/p&gt;",</span><br><span class="line">"url": "http:\/\/cq.cbg.cn\/ycxw\/2020\/0607\/11698033.shtml",</span><br><span class="line">"catid": 1596,</span><br><span class="line">"published": "2020-06-07 11:18:08",</span><br><span class="line">"pv": 28179,</span><br><span class="line">"subtitle": ""</span><br><span class="line">&#125;, &#123;</span><br><span class="line">"contentid": 11698039,</span><br><span class="line">"title": "\u6850\u6893\uff1a50\u5bb6\u5e02\u53bf\u7ea7\u878d\u5a92\u4f53\u8054\u52a8\u7535\u5546\u76f4\u64ad \u52a9\u63a8\u201c\u9ed4\u8d27\u51fa\u5c71\u201d",</span><br><span class="line">"modelid": 1,</span><br><span class="line">"thumb": "\/upload\/cmsupload\/2020\/0607\/1591498753364.jpg",</span><br><span class="line">"content": "&lt;p&gt;&amp;ldquo;\u5929\u9ebb\u7684\u4f5c\u7528\u5462\uff0c\u4e3b\u8981\u662f\u5206\u4e3a\u4e09\u9547\u3001\u4e09\u6297\u3001\u4e00\u8865\uff0c\u4e09\u9547\u6307\u7684\u662f\u9547\u7ecf\u3001\u9547\u9759\u3001\u8fd8\u6709\u5305\u62ec\u9547\u75db&amp;hellip;&amp;hellip;&amp;rdquo;6\u67086\u65e5\uff0c\u5728\u521a\u521a\u5ba3\u5e03\u5f00\u5e02\u7684\u6850\u6893\u53bf\u4ea7\u9500\u5bf9\u63a5\u667a\u6167\u670d\u52a1\u4e2d\u5fc3\u5927\u5385\u5185\uff0c\u5546\u5bb6\u5218\u4e39\u6b63\u5728\u901a\u8fc7\u81ea\u5df1\u7684\u5546\u57ce\u8fdb\u884c\u7f51\u7edc\u76f4\u64ad\u5e26\u8d27\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498730679.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105911\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;6\u67086\u65e5\uff0c\u6850\u6893\u53bf\u4e3e\u529e&amp;ldquo;\u4e50\u8d2d\u6850\u8d27 \u4e50\u4eab\u4f18\u54c1&amp;rdquo;\u9ed4\u5317\u6e1d\u5357\u667a\u6167\u4ea7\u9500\u4e2d\u5fc3\u5f00\u5e02\u66a8\u6850\u6893\u53bf\u9996\u5c4a&amp;ldquo;6&amp;middot;6&amp;rdquo;\u7535\u5546\u8d2d\u7269\u8282\u3002\u901a\u8fc7\u7ebf\u4e0a\u7ebf\u4e0b\u8054\u52a8\uff0c\u5168\u65b9\u4f4d\u5c55\u793a\u6850\u6893\u5730\u65b9\u7279\u8272\u4ea7\u54c1\uff0c\u62d3\u5c55\u519c\u7279\u4ea7\u54c1\u9500\u552e\u6e20\u9053\uff0c\u63a8\u52a8\u6850\u6893\u53bf\u7535\u5546\u4ea7\u4e1a\u53d1\u5c55\uff0c\u8fdb\u800c\u901a\u8fc7\u7ebf\u4e0a\u5f15\u6d41\u5e26\u52a8\u5b9e\u4f53\u6d88\u8d39\uff0c\u4fc3\u8fdb\u6d88\u8d39\u56de\u8865\u548c\u6f5c\u529b\u91ca\u653e\uff0c\u52a9\u63a8&amp;ldquo;\u9ed4\u8d27\u51fa\u5c71&amp;rdquo;\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498741670.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105915\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;\u6d3b\u52a8\u73b0\u573a\uff0c\u6765\u81ea\u8be5\u53bf\u7684\u90e8\u5206\u515a\u653f\u9886\u5bfc\u4e5f\u6b63\u5728\u901a\u8fc7\u7f51\u7edc\u76f4\u64ad\u7684\u65b9\u5f0f\u4e3a\u6850\u6893\u519c\u7279\u4ea7\u54c1\u4ee3\u8a00\u5e26\u8d27\uff0c\u6e38\u5ba2\u7eb7\u7eb7\u8d70\u4e0a\u524d\u54c1\u5c1d\u8d2d\u4e70\u4ea7\u54c1\u3002&amp;ldquo;\u6850\u6893\u7684\u519c\u7279\u4ea7\u54c1\u54c1\u79cd\u597d\u4e30\u5bcc\uff0c\u7433\u7405\u6ee1\u76ee\u7684\uff0c\u5473\u9053\u4e5f\u90fd\u8fd8\u4e0d\u9519\u3002&amp;rdquo;\u6765\u81ea\u56db\u5ddd\u7684\u6e38\u5ba2\u5434\u6210\u5143\uff0c\u524d\u4e00\u5929\u5728\u670b\u53cb\u5708\u77e5\u9053\u8fd9\u91cc\u8981\u4e3e\u529e\u7535\u5546\u8d2d\u7269\u8282\uff0c\u4fbf\u65e9\u65e9\u5730\u6765\u5230\u4e86\u6d3b\u52a8\u73b0\u573a\uff0c\u770b\u4e86\u4e00\u5708\u73b0\u573a\u7684\u519c\u7279\u4ea7\u54c1\u540e\uff0c\u89c9\u5f97\u6765\u8fd9\u4e00\u8d9f\u5f88\u503c\u5f97\u3002\u6b64\u6b21\u6d3b\u52a8\uff0c\u5bf9\u5546\u5bb6\u6765\u8bf4\uff0c\u4e5f\u662f\u4e00\u6b21\u5f88\u597d\u7684\u4fc3\u9500\u673a\u4f1a\uff0c&amp;ldquo;\u8fd9\u6b21\u6d3b\u52a8\u62d3\u5bbd\u4e86\u6211\u4eec\u7684\u9500\u552e\u6e20\u9053\uff0c\u4e5f\u63d0\u5347\u4e86\u6211\u4eec\u4ea7\u54c1\u7684\u77e5\u540d\u5ea6\u548c\u5f71\u54cd\u529b\u3002&amp;rdquo;\u5546\u5bb6\u91d1\u6b66\u98de\u544a\u8bc9\u8bb0\u8005\u3002&lt;\/p&gt;\n&lt;p&gt;\u8be5\u53bf\u51fa\u8d4410\u4e07\u5143\u8d2d\u7269\u4f18\u60e0\u5238\uff0c\u7528\u4e8e\u672c\u6b21\u6d3b\u52a8\u7684\u5546\u57ce\u5e73\u53f0\u7535\u5546\u8d2d\u7269\u6d88\u8d39\u8865\u8d34\u3002\u8be5\u53bf\u8fd8\u4e0e\u65b0\u534e\u793e\u5ba2\u6237\u7aef\u3001\u592e\u89c6\u9891\u5ba2\u6237\u7aef\u3001\u4eba\u6c11\u7f51\u8d35\u5dde\u9891\u9053\u5fae\u535a\u3001\u52a8\u9759APP\u3001\u591a\u5f69\u8d35\u5dde\u7f51\u7b49\u5a92\u4f53\u5e73\u53f0\u53ca\u91cd\u5e86\u3001\u4e0a\u6d77\u3001\u6d77\u5357\u3001\u5c71\u4e1c\u3001\u56db\u5ddd\u3001\u5e7f\u897f\u7b498\u4e2a\u7701\u5e0250\u591a\u5bb6\u5e02\u53bf\u7ea7\u878d\u5a92\u4f53\u5b9e\u73b0\u8054\u52a8\u76f4\u64ad\u3002&lt;\/p&gt;\n&lt;p&gt;&amp;ldquo;\u8fd9\u6b21\u6d3b\u52a8\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4fc3\u8fdb\u6d88\u8d39\u6276\u8d2b\u3001\u51b3\u80dc\u8131\u8d2b\u653b\u575a\uff0c\u8fbe\u5230\u4e86\u5e26\u57fa\u5730\u3001\u8fde\u5e02\u573a\u3001\u5bcc\u519c\u6c11\u7684\u6548\u679c\u3002&amp;rdquo;\u6850\u6893\u53bf\u7ecf\u8d38\u5c40\u5c40\u957f\u5170\u7384\u5fb7\u544a\u8bc9\u8bb0\u8005\u3002\u6850\u6893\u53bf\u8fd8\u5728\u8be5\u53bf\u4ea7\u9500\u5bf9\u63a5\u667a\u6167\u670d\u52a1\u4e2d\u5fc3\u4e13\u95e8\u8bbe\u7acb\u4e86\u7535\u5546\u76f4\u64ad\u4ea7\u4e1a\u56ed\uff0c\u7f51\u4e0a\u4e0b\u5355\uff0c\u7f51\u4e0b\u914d\u9001\uff0c\u7ebf\u4e0a\u7ebf\u4e0b\u53cc\u8054\u52a8\uff0c\u521b\u65b0\u7535\u5b50\u5546\u52a1\u65b0\u4e1a\u6001\u3001\u65b0\u6a21\u5f0f\u3002\u5b9e\u73b0&amp;ldquo;\u7ebf\u4e0a\u5f15\u6d41\u3001\u7ebf\u4e0b\u6d88\u8d39&amp;rdquo;\uff0c\u521d\u6b65\u5f62\u6210\u4e1a\u6001\u4e30\u5bcc\u3001\u670d\u52a1\u8303\u56f4\u5e7f\u6cdb\u3001\u7ebf\u4e0a\u7ebf\u4e0b\u6df1\u5ea6\u878d\u5408\u7684\u7ebf\u4e0a\u4e1a\u6001\u4f53\u7cfb\u548c\u7ebf\u4e0a\u6d88\u8d39\u73af\u5883\u3002&lt;\/p&gt;\n&lt;p&gt;\u8bb0\u8005 \u674e\u751c\u751c&amp;nbsp;\u5f20\u9896&lt;\/p&gt;",</span><br><span class="line">"url": "http:\/\/cq.cbg.cn\/ycxw\/2020\/0607\/11698039.shtml",</span><br><span class="line">"catid": 1596,</span><br><span class="line">"published": "2020-06-07 11:18:07",</span><br><span class="line">"pv": 34432,</span><br><span class="line">"subtitle": ""</span><br><span class="line">&#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="代码实现">代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://qxapi.cbg.cn/home/getListByCatID?callback=jQuery34102398183434787493_1591415079072&amp;catid=1596&amp;page=0&amp;pagesize=10'</span></span><br><span class="line">response = requests.get(url).text</span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">r'/\*\*/jQuery[\d]+_[\d]+\((.*?)\);'</span>)</span><br><span class="line">data = pattern.findall(response)[<span class="number">0</span>]</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><h4 id="输出">输出</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"status"</span>: <span class="string">"000001"</span>,</span><br><span class="line"><span class="attr">"msg"</span>: <span class="string">"\u62c9\u53d6\u6210\u529f"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"000002"</span>,</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">31670</span>,</span><br><span class="line"><span class="attr">"data"</span>: [&#123;</span><br><span class="line"><span class="attr">"contentid"</span>: <span class="number">11698033</span>,</span><br><span class="line"><span class="attr">"title"</span>: <span class="string">"\u6c99\u576a\u575d\u533a\u4e2d\u6881\u9547\u6458\u84dd\u8393\u00a0\u7ea6\u4e0d\u7ea6\uff1f"</span>,</span><br><span class="line"><span class="attr">"modelid"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"thumb"</span>: <span class="string">"\/upload\/cmsupload\/2020\/0607\/1591498451982.jpg"</span>,</span><br><span class="line"><span class="attr">"content"</span>: <span class="string">"&lt;p&gt;\u91cd\u5e86\u7f51\u7edc\u5e7f\u64ad\u7535\u89c6\u53f0&amp;nbsp;\u8bb0\u8005 \u738b\u5c0f\u751f&lt;\/p&gt;\n&lt;p&gt;\u590f\u5b63\u662f\u84dd\u8393\u6210\u719f\u7684\u5b63\u8282\uff0c\u79bb\u4e3b\u57ce\u5f88\u8fd1\u7684\u6c99\u576a\u575d\u533a\u4e2d\u6881\u9547\uff0c500\u591a\u4ea9\u84dd\u8393\u6b63\u7b49\u7740\u4f60\u53bb\u91c7\u6458\u3002\u5982\u679c\u6709\u7a7a\uff0c\u4e0d\u59a8\u53bb\u4f53\u9a8c\u7530\u56ed\u4e50\u8da3\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498357808.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105240\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;6\u67086\u65e5\uff0c\u8bb0\u8005\u5728\u4e2d\u6881\u9547\u65b0\u53d1\u6751\u7684\u53e4\u8302\u84dd\u8393\u8c37\u770b\u5230\uff0c\u4e00\u7c07\u4e00\u7c07\u7684\u84dd\u8393\uff0c\u72b9\u5982\u5b9d\u77f3\u822c\uff0c\u60ac\u6302\u5728\u6811\u68a2\u4e0a\uff0c\u5e02\u6c11\u4eec\u4e09\u4e94\u6210\u7fa4\uff0c\u7a7f\u68ad\u5728\u7530\u95f4\uff0c\u91c7\u6458\u84dd\u8393\uff0c\u611f\u53d7\u4e30\u6536\u7684\u559c\u60a6\uff0c\u5c3d\u60c5\u4eab\u53d7\u5468\u672b\u7f8e\u597d\u65f6\u5149\u3002\u674e\u5973\u58eb\u4eca\u5929\u5e26\u7740\u5b69\u5b50\u6765\u5230\u8fd9\u91cc\uff0c\u91c7\u6458\u4e86\u4e00\u7bee\u5b50\u84dd\u8393\uff0c\u5979\u8868\u793a\uff0c\u7531\u4e8e\u53d7\u75ab\u60c5\u5f71\u54cd\uff0c\u5b69\u5b50\u90fd\u5f88\u5c11\u51fa\u95e8\uff0c\u73b0\u5728\u75ab\u60c5\u597d\u8f6c\uff0c\u5468\u672b\u6b63\u597d\u5e26\u7740\u5b69\u5b50\u51fa\u6765\u8d70\u8d70\uff0c\u4eb2\u8fd1\u5927\u81ea\u7136\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498368902.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105244\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;\u636e\u84dd\u8393\u8c37\u8d1f\u8d23\u4eba\u4ecb\u7ecd\uff0c\u4ed6\u4eec\u5171\u6709\u84dd\u8393100\u4f59\u4ea9\uff0c10\u591a\u4e2a\u54c1\u79cd\uff0c4\u4e07\u591a\u682a\uff0c\u91c7\u6458\u5468\u671f\u5c06\u6301\u7eed\u52307\u6708\u521d\uff0c\u5728\u6b64\u671f\u95f4\u5e02\u6c11\u5747\u53ef\u76f4\u63a5\u524d\u5f80\u91c7\u6458\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498386566.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105248\" \/&gt;&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498386165.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105251\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;\u636e\u4e2d\u6881\u9547\u519c\u670d\u4e2d\u5fc3\u5de5\u4f5c\u4eba\u5458\u4ecb\u7ecd\uff0c\u7531\u4e8e\u4e2d\u6881\u9547\u6d77\u62d4\u8d85\u8fc7500\u7c73\uff0c\u6c14\u5019\u6e29\u548c\u3001\u571f\u58e4\u5bcc\u7852\u3001\u9178\u78b1\u9002\u5b9c\uff0c\u975e\u5e38\u9002\u5408\u79cd\u690d\u84dd\u8393\u3002\u8fd1\u5e74\u6765\uff0c\u7ed3\u5408\u4e61\u6751\u632f\u5174\u6218\u7565\u7684\u5b9e\u65bd\uff0c\u4e2d\u6881\u9547\u5927\u529b\u53d1\u5c55\u84dd\u8393\u79cd\u690d\uff0c\u73b0\u6709\u9762\u79ef500\u591a\u4ea9\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498405459.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105254\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;\u84dd\u8393\u679c\u5b9e\u4e2d\u542b\u6709\u4e30\u5bcc\u7684\u8425\u517b\u6210\u5206\uff0c\u5c24\u5176\u5bcc\u542b\u82b1\u9752\u7d20\uff0c\u5b83\u4e0d\u4ec5\u5177\u6709\u826f\u597d\u7684\u8425\u517b\u4fdd\u5065\u4f5c\u7528\uff0c\u8fd8\u5177\u6709\u9632\u6b62\u8111\u795e\u7ecf\u8001\u5316\u3001\u5f3a\u5fc3\u3001\u6297\u764c\u3001\u8f6f\u5316\u8840\u7ba1\u3001\u589e\u5f3a\u4eba\u4f53\u514d\u75ab\u7b49\u529f\u80fd\uff0c\u56e0\u6b64\u6df1\u53d7\u5e02\u6c11\u559c\u7231\u3002&lt;\/p&gt;"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"http:\/\/cq.cbg.cn\/ycxw\/2020\/0607\/11698033.shtml"</span>,</span><br><span class="line"><span class="attr">"catid"</span>: <span class="number">1596</span>,</span><br><span class="line"><span class="attr">"published"</span>: <span class="string">"2020-06-07 11:18:08"</span>,</span><br><span class="line"><span class="attr">"pv"</span>: <span class="number">28179</span>,</span><br><span class="line"><span class="attr">"subtitle"</span>: <span class="string">""</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"contentid"</span>: <span class="number">11698039</span>,</span><br><span class="line"><span class="attr">"title"</span>: <span class="string">"\u6850\u6893\uff1a50\u5bb6\u5e02\u53bf\u7ea7\u878d\u5a92\u4f53\u8054\u52a8\u7535\u5546\u76f4\u64ad \u52a9\u63a8\u201c\u9ed4\u8d27\u51fa\u5c71\u201d"</span>,</span><br><span class="line"><span class="attr">"modelid"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"thumb"</span>: <span class="string">"\/upload\/cmsupload\/2020\/0607\/1591498753364.jpg"</span>,</span><br><span class="line"><span class="attr">"content"</span>: <span class="string">"&lt;p&gt;&amp;ldquo;\u5929\u9ebb\u7684\u4f5c\u7528\u5462\uff0c\u4e3b\u8981\u662f\u5206\u4e3a\u4e09\u9547\u3001\u4e09\u6297\u3001\u4e00\u8865\uff0c\u4e09\u9547\u6307\u7684\u662f\u9547\u7ecf\u3001\u9547\u9759\u3001\u8fd8\u6709\u5305\u62ec\u9547\u75db&amp;hellip;&amp;hellip;&amp;rdquo;6\u67086\u65e5\uff0c\u5728\u521a\u521a\u5ba3\u5e03\u5f00\u5e02\u7684\u6850\u6893\u53bf\u4ea7\u9500\u5bf9\u63a5\u667a\u6167\u670d\u52a1\u4e2d\u5fc3\u5927\u5385\u5185\uff0c\u5546\u5bb6\u5218\u4e39\u6b63\u5728\u901a\u8fc7\u81ea\u5df1\u7684\u5546\u57ce\u8fdb\u884c\u7f51\u7edc\u76f4\u64ad\u5e26\u8d27\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498730679.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105911\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;6\u67086\u65e5\uff0c\u6850\u6893\u53bf\u4e3e\u529e&amp;ldquo;\u4e50\u8d2d\u6850\u8d27 \u4e50\u4eab\u4f18\u54c1&amp;rdquo;\u9ed4\u5317\u6e1d\u5357\u667a\u6167\u4ea7\u9500\u4e2d\u5fc3\u5f00\u5e02\u66a8\u6850\u6893\u53bf\u9996\u5c4a&amp;ldquo;6&amp;middot;6&amp;rdquo;\u7535\u5546\u8d2d\u7269\u8282\u3002\u901a\u8fc7\u7ebf\u4e0a\u7ebf\u4e0b\u8054\u52a8\uff0c\u5168\u65b9\u4f4d\u5c55\u793a\u6850\u6893\u5730\u65b9\u7279\u8272\u4ea7\u54c1\uff0c\u62d3\u5c55\u519c\u7279\u4ea7\u54c1\u9500\u552e\u6e20\u9053\uff0c\u63a8\u52a8\u6850\u6893\u53bf\u7535\u5546\u4ea7\u4e1a\u53d1\u5c55\uff0c\u8fdb\u800c\u901a\u8fc7\u7ebf\u4e0a\u5f15\u6d41\u5e26\u52a8\u5b9e\u4f53\u6d88\u8d39\uff0c\u4fc3\u8fdb\u6d88\u8d39\u56de\u8865\u548c\u6f5c\u529b\u91ca\u653e\uff0c\u52a9\u63a8&amp;ldquo;\u9ed4\u8d27\u51fa\u5c71&amp;rdquo;\u3002&lt;\/p&gt;\n&lt;p style=\"text-align: center; text-indent: 0;\"&gt;&lt;img src=\"http:\/\/upload.cbg.cn\/2020\/0607\/1591498741670.jpg\" border=\"0\" alt=\"\u5fae\u4fe1\u56fe\u7247_20200607105915\" \/&gt;&lt;\/p&gt;\n&lt;p&gt;\u6d3b\u52a8\u73b0\u573a\uff0c\u6765\u81ea\u8be5\u53bf\u7684\u90e8\u5206\u515a\u653f\u9886\u5bfc\u4e5f\u6b63\u5728\u901a\u8fc7\u7f51\u7edc\u76f4\u64ad\u7684\u65b9\u5f0f\u4e3a\u6850\u6893\u519c\u7279\u4ea7\u54c1\u4ee3\u8a00\u5e26\u8d27\uff0c\u6e38\u5ba2\u7eb7\u7eb7\u8d70\u4e0a\u524d\u54c1\u5c1d\u8d2d\u4e70\u4ea7\u54c1\u3002&amp;ldquo;\u6850\u6893\u7684\u519c\u7279\u4ea7\u54c1\u54c1\u79cd\u597d\u4e30\u5bcc\uff0c\u7433\u7405\u6ee1\u76ee\u7684\uff0c\u5473\u9053\u4e5f\u90fd\u8fd8\u4e0d\u9519\u3002&amp;rdquo;\u6765\u81ea\u56db\u5ddd\u7684\u6e38\u5ba2\u5434\u6210\u5143\uff0c\u524d\u4e00\u5929\u5728\u670b\u53cb\u5708\u77e5\u9053\u8fd9\u91cc\u8981\u4e3e\u529e\u7535\u5546\u8d2d\u7269\u8282\uff0c\u4fbf\u65e9\u65e9\u5730\u6765\u5230\u4e86\u6d3b\u52a8\u73b0\u573a\uff0c\u770b\u4e86\u4e00\u5708\u73b0\u573a\u7684\u519c\u7279\u4ea7\u54c1\u540e\uff0c\u89c9\u5f97\u6765\u8fd9\u4e00\u8d9f\u5f88\u503c\u5f97\u3002\u6b64\u6b21\u6d3b\u52a8\uff0c\u5bf9\u5546\u5bb6\u6765\u8bf4\uff0c\u4e5f\u662f\u4e00\u6b21\u5f88\u597d\u7684\u4fc3\u9500\u673a\u4f1a\uff0c&amp;ldquo;\u8fd9\u6b21\u6d3b\u52a8\u62d3\u5bbd\u4e86\u6211\u4eec\u7684\u9500\u552e\u6e20\u9053\uff0c\u4e5f\u63d0\u5347\u4e86\u6211\u4eec\u4ea7\u54c1\u7684\u77e5\u540d\u5ea6\u548c\u5f71\u54cd\u529b\u3002&amp;rdquo;\u5546\u5bb6\u91d1\u6b66\u98de\u544a\u8bc9\u8bb0\u8005\u3002&lt;\/p&gt;\n&lt;p&gt;\u8be5\u53bf\u51fa\u8d4410\u4e07\u5143\u8d2d\u7269\u4f18\u60e0\u5238\uff0c\u7528\u4e8e\u672c\u6b21\u6d3b\u52a8\u7684\u5546\u57ce\u5e73\u53f0\u7535\u5546\u8d2d\u7269\u6d88\u8d39\u8865\u8d34\u3002\u8be5\u53bf\u8fd8\u4e0e\u65b0\u534e\u793e\u5ba2\u6237\u7aef\u3001\u592e\u89c6\u9891\u5ba2\u6237\u7aef\u3001\u4eba\u6c11\u7f51\u8d35\u5dde\u9891\u9053\u5fae\u535a\u3001\u52a8\u9759APP\u3001\u591a\u5f69\u8d35\u5dde\u7f51\u7b49\u5a92\u4f53\u5e73\u53f0\u53ca\u91cd\u5e86\u3001\u4e0a\u6d77\u3001\u6d77\u5357\u3001\u5c71\u4e1c\u3001\u56db\u5ddd\u3001\u5e7f\u897f\u7b498\u4e2a\u7701\u5e0250\u591a\u5bb6\u5e02\u53bf\u7ea7\u878d\u5a92\u4f53\u5b9e\u73b0\u8054\u52a8\u76f4\u64ad\u3002&lt;\/p&gt;\n&lt;p&gt;&amp;ldquo;\u8fd9\u6b21\u6d3b\u52a8\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4fc3\u8fdb\u6d88\u8d39\u6276\u8d2b\u3001\u51b3\u80dc\u8131\u8d2b\u653b\u575a\uff0c\u8fbe\u5230\u4e86\u5e26\u57fa\u5730\u3001\u8fde\u5e02\u573a\u3001\u5bcc\u519c\u6c11\u7684\u6548\u679c\u3002&amp;rdquo;\u6850\u6893\u53bf\u7ecf\u8d38\u5c40\u5c40\u957f\u5170\u7384\u5fb7\u544a\u8bc9\u8bb0\u8005\u3002\u6850\u6893\u53bf\u8fd8\u5728\u8be5\u53bf\u4ea7\u9500\u5bf9\u63a5\u667a\u6167\u670d\u52a1\u4e2d\u5fc3\u4e13\u95e8\u8bbe\u7acb\u4e86\u7535\u5546\u76f4\u64ad\u4ea7\u4e1a\u56ed\uff0c\u7f51\u4e0a\u4e0b\u5355\uff0c\u7f51\u4e0b\u914d\u9001\uff0c\u7ebf\u4e0a\u7ebf\u4e0b\u53cc\u8054\u52a8\uff0c\u521b\u65b0\u7535\u5b50\u5546\u52a1\u65b0\u4e1a\u6001\u3001\u65b0\u6a21\u5f0f\u3002\u5b9e\u73b0&amp;ldquo;\u7ebf\u4e0a\u5f15\u6d41\u3001\u7ebf\u4e0b\u6d88\u8d39&amp;rdquo;\uff0c\u521d\u6b65\u5f62\u6210\u4e1a\u6001\u4e30\u5bcc\u3001\u670d\u52a1\u8303\u56f4\u5e7f\u6cdb\u3001\u7ebf\u4e0a\u7ebf\u4e0b\u6df1\u5ea6\u878d\u5408\u7684\u7ebf\u4e0a\u4e1a\u6001\u4f53\u7cfb\u548c\u7ebf\u4e0a\u6d88\u8d39\u73af\u5883\u3002&lt;\/p&gt;\n&lt;p&gt;\u8bb0\u8005 \u674e\u751c\u751c&amp;nbsp;\u5f20\u9896&lt;\/p&gt;"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"http:\/\/cq.cbg.cn\/ycxw\/2020\/0607\/11698039.shtml"</span>,</span><br><span class="line"><span class="attr">"catid"</span>: <span class="number">1596</span>,</span><br><span class="line"><span class="attr">"published"</span>: <span class="string">"2020-06-07 11:18:07"</span>,</span><br><span class="line"><span class="attr">"pv"</span>: <span class="number">34432</span>,</span><br><span class="line"><span class="attr">"subtitle"</span>: <span class="string">""</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例二：爬虫中解析网页">例二：爬虫中解析网页</h3><h4 id="部分展示-2">部分展示</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"board-index board-index-8"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/films/267"</span> <span class="attr">title</span>=<span class="string">"泰坦尼克号"</span> <span class="attr">class</span>=<span class="string">"image-link"</span> <span class="attr">data-act</span>=<span class="string">"boarditem-click"</span> <span class="attr">data-val</span>=<span class="string">"&#123;movieId:267&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//s3plus.meituan.net/v1/mss_e2821d7f0cfe4ac1bf9202ecf9590e67/cdn-prod/file:5788b470/image/loading_2.e3d934bf.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"poster-default"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"https://p1.meituan.net/movie/b607fba7513e7f15eab170aac1e1400d878112.jpg@160w_220h_1e_1c"</span> <span class="attr">alt</span>=<span class="string">"泰坦尼克号"</span> <span class="attr">class</span>=<span class="string">"board-img"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"board-item-main"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"board-item-content"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"movie-item-info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/films/267"</span> <span class="attr">title</span>=<span class="string">"泰坦尼克号"</span> <span class="attr">data-act</span>=<span class="string">"boarditem-click"</span> <span class="attr">data-val</span>=<span class="string">"&#123;movieId:267&#125;"</span>&gt;</span>泰坦尼克号<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span></span><br><span class="line">                主演：莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"releasetime"</span>&gt;</span>上映时间：1998-04-03<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"movie-item-number score-num"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"score"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"integer"</span>&gt;</span>9.<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fraction"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="代码实现-2">代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://maoyan.com/board/4?offset=0'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/80.0.3987.87 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url, headers=headers).text</span><br><span class="line"><span class="comment"># print(response)</span></span><br><span class="line">pattern = re.compile(</span><br><span class="line">        <span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;.*?star.*?&gt;(.*?)&lt;/p&gt;.*?releasetime.*?&gt;(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>,</span><br><span class="line">        re.S</span><br><span class="line">    )</span><br><span class="line">items = re.findall(pattern, response)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h4 id="输出-2">输出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1'</span>, <span class="string">'https://p0.meituan.net/movie/4c41068ef7608c1d4fbfbe6016e589f7204391.jpg@160w_220h_1e_1c'</span>, <span class="string">'活着'</span>, <span class="string">'\n                主演：葛优,巩俐,牛犇\n        '</span>, <span class="string">'上映时间：1994-05-17(法国)'</span>, <span class="string">'9.'</span>, <span class="string">'0'</span>)</span><br><span class="line">(<span class="string">'2'</span>, <span class="string">'https://p0.meituan.net/movie/bcbe59fc51580317adf94537a61a1a26142090.jpg@160w_220h_1e_1c'</span>, <span class="string">'钢琴家'</span>, <span class="string">'\n                主演：艾德里安·布洛迪,艾米莉娅·福克斯,米哈乌·热布罗夫斯基\n        '</span>, <span class="string">'上映时间：2002-05-24(法国)'</span>, <span class="string">'8.'</span>, <span class="string">'8'</span>)</span><br><span class="line">(<span class="string">'3'</span>, <span class="string">'https://p1.meituan.net/movie/958f5ca5151e46b20919fb61ffc0d4d2238108.jpg@160w_220h_1e_1c'</span>, <span class="string">'勇敢的心'</span>, <span class="string">'\n                主演：梅尔·吉布森,苏菲·玛索,帕特里克·麦高汉\n        '</span>, <span class="string">'上映时间：1995-05-18(美国)'</span>, <span class="string">'8.'</span>, <span class="string">'8'</span>)</span><br><span class="line">(<span class="string">'4'</span>, <span class="string">'https://p0.meituan.net/movie/85215b28d568ea8e2c97766edd95f890210522.jpg@160w_220h_1e_1c'</span>, <span class="string">'阿飞正传'</span>, <span class="string">'\n                主演：张国荣,张曼玉,刘德华\n        '</span>, <span class="string">'上映时间：2018-06-25'</span>, <span class="string">'8.'</span>, <span class="string">'8'</span>)</span><br><span class="line">(<span class="string">'5'</span>, <span class="string">'https://p0.meituan.net/movie/86c5190ba1d1236093c13f2fe9ed8dd4150050.jpg@160w_220h_1e_1c'</span>, <span class="string">'射雕英雄传之东成西就'</span>, <span class="string">'\n                主演：张国荣,梁朝伟,张学友\n        '</span>, <span class="string">'上映时间：1993-02-05(中国香港)'</span>, <span class="string">'8.'</span>, <span class="string">'8'</span>)</span><br><span class="line">(<span class="string">'6'</span>, <span class="string">'https://p0.meituan.net/movie/de1142a5dceb901eb939eb0bcfc2f88470909.jpg@160w_220h_1e_1c'</span>, <span class="string">'爱·回家'</span>, <span class="string">'\n                主演：俞承豪,金艺芬,童孝熙\n        '</span>, <span class="string">'上映时间：2002-04-05(韩国)'</span>, <span class="string">'9.'</span>, <span class="string">'0'</span>)</span><br><span class="line">(<span class="string">'7'</span>, <span class="string">'https://p1.meituan.net/movie/05bc2f0ccf97aacfa64fcac4f237cf8082385.jpg@160w_220h_1e_1c'</span>, <span class="string">'初恋这件小事'</span>, <span class="string">'\n                主演：马里奥·毛瑞尔,平采娜·乐维瑟派布恩,阿查拉那·阿瑞亚卫考\n        '</span>, <span class="string">'上映时间：2012-06-05'</span>, <span class="string">'8.'</span>, <span class="string">'8'</span>)</span><br><span class="line">(<span class="string">'8'</span>, <span class="string">'https://p1.meituan.net/movie/b607fba7513e7f15eab170aac1e1400d878112.jpg@160w_220h_1e_1c'</span>, <span class="string">'泰坦尼克号'</span>, <span class="string">'\n                主演：莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩\n        '</span>, <span class="string">'上映时间：1998-04-03'</span>, <span class="string">'9.'</span>, <span class="string">'4'</span>)</span><br><span class="line">(<span class="string">'9'</span>, <span class="string">'https://p1.meituan.net/movie/a1634f4e49c8517ae0a3e4adcac6b0dc43994.jpg@160w_220h_1e_1c'</span>, <span class="string">'迁徙的鸟'</span>, <span class="string">'\n                主演：雅克·贝汉,Philippe Labro\n        '</span>, <span class="string">'上映时间：2001-12-12(法国)'</span>, <span class="string">'9.'</span>, <span class="string">'0'</span>)</span><br><span class="line">(<span class="string">'10'</span>, <span class="string">'https://p0.meituan.net/movie/09658109acfea0e248a63932337d8e6a4268980.jpg@160w_220h_1e_1c'</span>, <span class="string">'蝙蝠侠：黑暗骑士'</span>, <span class="string">'\n                主演：克里斯蒂安·贝尔,希斯·莱杰,阿伦·伊克哈特\n        '</span>, <span class="string">'上映时间：2008-07-14(阿根廷)'</span>, <span class="string">'9.'</span>, <span class="string">'3'</span>)</span><br></pre></td></tr></table></figure><h2 id="标志修饰符">标志修饰符</h2><p>  Python正则表达式中的标志修饰符</p><table><thead><tr><th style="text-align:center">修饰符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">re.I</td><td>使匹配对大小写不敏感</td></tr><tr><td style="text-align:center">re.L</td><td>做本地化识别（locale-aware）匹配</td></tr><tr><td style="text-align:center">re.M</td><td>多行匹配，影响 ^ 和 $</td></tr><tr><td style="text-align:center">re.S</td><td>使 . 匹配包括换行在内的所有字符</td></tr><tr><td style="text-align:center">re.U</td><td>根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B</td></tr><tr><td style="text-align:center">re.X</td><td>该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><p><b>参考：</b><br><a href="https://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener">正则表达式 - 教程 | 菜鸟教程</a><br><a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin" target="_blank" rel="noopener">正则表达式 |百度百科 </a><br><a href="https://tool.oschina.net/regex/" target="_blank" rel="noopener">在线正则表达式测试</a><br><a href="https://my.oschina.net/u/3018050/blog/2872587" target="_blank" rel="noopener">常用正则表达式（高亮，markdown）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;If you keep on believing, the dreams that you wish will come true. ——《仙履奇缘》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;坚持心中有梦，终有一日它会实现。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="RE" scheme="http://mrxiuxing.cn/categories/RE/"/>
    
    
      <category term="RE" scheme="http://mrxiuxing.cn/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>分词</title>
    <link href="http://mrxiuxing.cn/posts/a388e785.html"/>
    <id>http://mrxiuxing.cn/posts/a388e785.html</id>
    <published>2020-05-06T05:24:05.000Z</published>
    <updated>2020-05-06T05:24:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Don’t fear failure. Be afraid of not having the chance. ——《赛车总动员》</center></strong></em><br><em><strong><center>不要害怕失败，而应该害怕没有机会。</center></strong></em></p><a id="more"></a><h2 id="问题">问题</h2><p>  让函数 WordSplit(<strong>strArr</strong>) 读取存储在 <strong>strArr</strong> 中的字符串数组，该数组将包含2个元素：第一个元素将一个字符串，第二个元素是一个由逗号分隔的长字符串。例如：<strong>strArr</strong> 可以是：[“hellocat”, “apple,bat,cat,goodbye,hello,yellow,why”]。您的目标是确定输入中的第一个元素是否可以分为两个词，其中两个词都存在于第二个长字符串中。在此示例中，第一个元素可以分为两个词：<strong>hello</strong> 和 <strong>cat</strong> 因为这两个词都在长字符串中。</p><p>  您的程序应返回长字符串中存在的两个单词，并用逗号分隔。因此，对于上面的示例，您的程序应返回<strong>hello，cat</strong>。只有一种正确的方法将字符的第一个元素分成两个单词。如果无法将字符串分成长字符串中存在的两个单词，则返回字符串 <strong>not possible</strong> 。第一个元素本身永远不会在长字符串中作为真实单词存在。</p><h2 id="例子">例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[<span class="string">"baseball"</span>, <span class="string">"a,all,b,ball,bas,base,cat,code,d,e,quit,z"</span>]</span><br><span class="line">输出：base,ball</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[<span class="string">"abcgefd"</span>,<span class="string">"a,ab,abc,abcg,b,c,dog,e,efd,zzzz"</span>]</span><br><span class="line">输出：abcg,efd</span><br></pre></td></tr></table></figure><h2 id="代码">代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WordSplit</span><span class="params">(strArr)</span>:</span></span><br><span class="line">    word = strArr[<span class="number">0</span>]</span><br><span class="line">    l_word = list(strArr[<span class="number">1</span>].split(<span class="string">','</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l_word)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(l_word)):</span><br><span class="line">            <span class="keyword">if</span> l_word[i] + l_word[j] == word:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">','</span>.join([l_word[i], l_word[j]])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'not possible'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(WordSplit([<span class="string">"hellocat"</span>, <span class="string">"apple,bat,cat,goodbye,hello,yellow,why"</span>]))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hello,cat</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p>  通过问题描述以及实例可以了解到，返回的单词能且只能是两个。所以，创建两个循序让长字符串中的任意两个单词进行拼接，让拼接的结果去和 <strong>strArr</strong> 中第一个元素判定是否相等。如果相等返回找到的两个单词。否则返回字符串 <strong>not possible</strong> 。</p><p><b>PS: 如果您发现文中有错误、思路不够清晰等问题或者您有更优解，都可以在下方留言！！！</b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Don’t fear failure. Be afraid of not having the chance. ——《赛车总动员》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;不要害怕失败，而应该害怕没有机会。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>最近的较小值</title>
    <link href="http://mrxiuxing.cn/posts/963b1a34.html"/>
    <id>http://mrxiuxing.cn/posts/963b1a34.html</id>
    <published>2020-05-06T04:25:12.000Z</published>
    <updated>2020-05-06T04:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Do not let your emotions override you judgement. ——《惊奇队长》</center></strong></em><br><em><strong><center>别让情绪干扰了你的理智和判断力。</center></strong></em></p><a id="more"></a><h2 id="问题">问题</h2><p>  让函数 NearestSmallerValues(<strong>arr</strong>) 接受一个存储在 <strong>arr</strong> 中的整数数组，并为列表中的每个元素搜索它本身所有先前值，以查找小于当前元素的最近元素，并从这些数字创建一个新列表。如果在某个较小位置之前没有元素，则在新列表中当前位置的值为 <strong>-1</strong> 。<br>  例如：如果 <strong>arr</strong> 为[ <strong>5, 2, 8, 3, 9, 12</strong> ]，则最接近的较小值列表为[-1, -1, 2, 2, 3, 9]。<br>  逻辑如下：对于5，没有较小的先前值，因此到目前为止的列表为[-1]。对于2，也没有较小的先前值，因此列表现在为[-1，-1]。对于8，距离最近的较小值为2，因此列表现在为[-1, -1, 2]。对于3，最近的较小值也是2，因此列表现在为[-1, -1, 2, 2]。以此类推。程序最终以空格分隔的字符串的形式输出：<strong>-1 -1 2 2 3 9</strong></p><h2 id="例子">例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">输出：<span class="number">-1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>]</span><br><span class="line">输出：<span class="number">-1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">-1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="代码">代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NearestSmallerValues</span><span class="params">(arr)</span>:</span></span><br><span class="line">    new_list = [<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        <span class="keyword">if</span> arr[i] &gt; arr[i<span class="number">-1</span>]:</span><br><span class="line">            new_list.append(arr[i - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> arr[i] &gt; arr[j] <span class="keyword">or</span> arr[i] == arr[j]:</span><br><span class="line">                    new_list.append(arr[j])</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_list.append(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">' '</span>.join(list(map(str, new_list)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(NearestSmallerValues([<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; -1 -1 -1 1 1 1 3 1</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><ol><li>对于列表的第一个元素，因为在它前面没有比他小的值，所以直接赋值为-1</li><li>从列表第二个元素开始循环，如果下标为 <strong>i</strong> 的元素大于下标为 <strong>i - 1</strong> 的元素，那么新列表中 <strong>i</strong> 位置的值为 <strong>arr[i - 1]</strong></li><li>否则，继续往前找比当前值小于或等于的值，找到较小值后添加到新列表中</li><li>如果下标为 <strong>i</strong> 的元素没有较小的先前值，那么新列表中 <strong>i</strong> 位置的值为 <strong>-1</strong></li><li>将列表转换为以空格分隔的字符串的形式</li></ol><p><b>PS: 如果您发现文中有错误、思路不够清晰等问题或者您有更优解，都可以在下方留言！！！</b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Do not let your emotions override you judgement. ——《惊奇队长》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;别让情绪干扰了你的理智和判断力。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取天眼查</title>
    <link href="http://mrxiuxing.cn/posts/b8f914a1.html"/>
    <id>http://mrxiuxing.cn/posts/b8f914a1.html</id>
    <published>2020-04-13T08:58:38.000Z</published>
    <updated>2020-04-13T08:58:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>If you can take it, you can make it. ——《坚不可摧》</center></strong></em><br><em><strong><center>敢于实践，方能实现。</center></strong></em></p><a id="more"></a><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考，不得用于商业用途。</b></p><h2 id="整体思路">整体思路</h2><p><img src="/posts/b8f914a1/tycmind.png" alt><br>  首先使用requests从手机端网页获取公司的ID，然后请求Fiddler 4 抓取到的小程序API接口，最后持久化储存至CSV文件。</p><h2 id="配置">配置</h2><h3 id="Fiddler-4-配置">Fiddler 4 配置</h3><p>  打开Fiddler 4 ，找到上方 Tools 并点击，选择Options，按照下图勾选设置。<br><img src="/posts/b8f914a1/fiddler1.png" alt><br><img src="/posts/b8f914a1/fiddler2.png" alt></p><h3 id="IOS-配置">IOS 配置</h3><p>  请先确保手机与电脑在同一局域网下。查看windows的IP地址，Win + R，输入cmd进入命令行窗口，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p><img src="/posts/b8f914a1/ipconfig.png" alt><br>  因为我连接的是WiFi，所以直接查看IPv4地址即可。<br>  设置手机代理：打开设置 --&gt; 选择无线局域网 --&gt; 点击你所连接WiFi的蓝色区域 --&gt; 滑到底部，点击配置代理 --&gt; 选择手动，按照下图输入你的IP地址以及端口号 --&gt; 点击右上角储存。<br><img src="/posts/b8f914a1/ios.png" alt></p><p>  打开iPhone的Safari浏览器，输入你电脑的IP地址:端口号，格式为IP：Port,加入你的IP地址为127.0.0.1，端口号为8888，那么你就在你的浏览器输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:8888</span><br></pre></td></tr></table></figure><p>  进入证书下载页面，点击底部的FiddlerRoot certificate</p><p><img src="/posts/b8f914a1/2_ios.png" alt><br>  点击允许</p><p><img src="/posts/b8f914a1/3_ios.png" alt></p><p>安装证书：<br>1.打开设置 --&gt; 通用  --&gt; 描述文件<br>2.点击刚下载的描述文件 --&gt; 点击右上角安装 --&gt; 输入密码安装 --&gt; 点击右上角完成<br>3.返回通用窗口 --&gt; 点击关于本机 --&gt; 滑到底部，选择证书信任设置 --&gt; 开启对我们刚安装完成证书的信任</p><p>  在手机端输入 <a href="http://baidu.com" target="_blank" rel="noopener">baidu.com</a> ,观察Fiddler 4，发现已经有了这条记录。</p><p><img src="/posts/b8f914a1/fiddlerbaidu.png" alt></p><h2 id="获取API接口">获取API接口</h2><p>  完成上面配置后，打开微信天眼查小程序（请先确保已经登录），在搜索框输入京东，我们选择 北京京东世纪贸易有限公司这一条，往下滑，点击企业背景区域的工商信息。回到Fiddler查看，点击Body最大的那一条：</p><p><img src="/posts/b8f914a1/fiddlerjd.png" alt></p><p>  很明显，这就是我们需要的。在上半部分请求头中的 X-AUTH-TOKEN 以及 Authorization是必须的，如果没有这两个参数，我们接下来的请求会被重定向到别的页面，我们的行为被认定为非人类了。如下图：</p><p><img src="/posts/b8f914a1/pageerror.png" alt></p><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 抓取天眼查小程序API接口</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings()    <span class="comment"># 忽略HTTPS警告</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从手机端网页获取所有公司ID</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_company_id</span><span class="params">(page_url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: UserAgent(verify_ssl=<span class="literal">False</span>).random,</span><br><span class="line">        <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">        <span class="string">"cookie"</span>: <span class="string">""</span>    <span class="comment"># 你的cookie</span></span><br><span class="line">    &#125;</span><br><span class="line">    html = requests.get(page_url, headers=headers, verify=<span class="literal">False</span>).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    all_company_id = tree.xpath(<span class="string">'//*[@id="search"]/div[2]/div/div/div[2]/div[1]/a/@href'</span>)</span><br><span class="line">    <span class="keyword">for</span> company_id <span class="keyword">in</span> all_company_id:</span><br><span class="line">        company_id = company_id.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        pares_company_info(company_id)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析API获取公司信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pares_company_info</span><span class="params">(company_id)</span>:</span></span><br><span class="line">    api_url = <span class="string">f'https://api9.tianyancha.com/services/v3/t/details/appComIcV4/<span class="subst">&#123;company_id&#125;</span>?pageSize=1000'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (iPhone; CPU iPhone OS 13_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 MicroMessenger/7.0.12(0x17000c27) NetType/WIFI Language/zh_CN"</span>,</span><br><span class="line">        <span class="string">"Host"</span>: <span class="string">"api9.tianyancha.com"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">        <span class="string">"X-AUTH-TOKEN"</span>: <span class="string">""</span>,    <span class="comment"># 换成你的</span></span><br><span class="line">        <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate, br"</span>,</span><br><span class="line">        <span class="string">"Connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="string">"version"</span>: <span class="string">"TYC-XCX-WX"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"https://servicewechat.com/wx9f2867fc22873452/31/page-frame.html"</span>,</span><br><span class="line">        <span class="string">"Authorization"</span>: <span class="string">""</span>,    <span class="comment"># 换成你的</span></span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-cn"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    json_str = requests.get(api_url, headers=headers, verify=<span class="literal">False</span>).json()</span><br><span class="line">    item = json_str.get(<span class="string">'data'</span>)[<span class="string">'baseInfo'</span>]</span><br><span class="line">    <span class="keyword">try</span>:    <span class="comment"># 这里只提取了部分，可以按照需求添加</span></span><br><span class="line">        name = item.get(<span class="string">'name'</span>)    <span class="comment"># 公司名称</span></span><br><span class="line">        legalPersonName = item.get(<span class="string">'legalPersonName'</span>)    <span class="comment"># 法定代表人</span></span><br><span class="line">        regStatus = item.get(<span class="string">'regStatus'</span>)    <span class="comment"># 经营状态</span></span><br><span class="line">        regCapital = item.get(<span class="string">'regCapital'</span>)    <span class="comment"># 注册资本</span></span><br><span class="line">        regLocation = item.get(<span class="string">'regLocation'</span>)    <span class="comment"># 注册地址</span></span><br><span class="line">        companyOrgType = item.get(<span class="string">'companyOrgType'</span>, <span class="string">' '</span>)    <span class="comment"># 企业类型</span></span><br><span class="line">        businessScope = item.get(<span class="string">'businessScope'</span>, <span class="string">' '</span>)    <span class="comment"># 经营范围</span></span><br><span class="line">        company_info = &#123;</span><br><span class="line">            <span class="string">"name"</span>: name, <span class="string">"legalPersonName"</span>: legalPersonName, <span class="string">"regStatus"</span>: regStatus,</span><br><span class="line">            <span class="string">"regCapital"</span>: regCapital, <span class="string">"regLocation"</span>: regLocation, <span class="string">"companyOrgType"</span>: companyOrgType,</span><br><span class="line">            <span class="string">"businessScope"</span>: businessScope</span><br><span class="line">        &#125;</span><br><span class="line">        print(company_info)</span><br><span class="line">        save_to_csv(filename, company_info)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'error_id.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(company_id + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存到CSV文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span><span class="params">(filename, company_info)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"legalPersonName"</span>, <span class="string">"regStatus"</span>, <span class="string">"regCapital"</span>,</span><br><span class="line">                      <span class="string">"regLocation"</span>, <span class="string">"companyOrgType"</span>, <span class="string">"businessScope"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writerow(company_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    filename = <span class="string">'company_info.csv'</span></span><br><span class="line">    <span class="comment"># 创建csv文件，并添加表头信息</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"legalPersonName"</span>, <span class="string">"regStatus"</span>, <span class="string">"regCapital"</span>,</span><br><span class="line">                      <span class="string">"regLocation"</span>, <span class="string">"companyOrgType"</span>, <span class="string">"businessScope"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writeheader()</span><br><span class="line">    base_url = <span class="string">'https://m.tianyancha.com/top/companies/p&#123;&#125;'</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        print(<span class="string">f'正在爬取第<span class="subst">&#123;page&#125;</span>页。。。'</span>)</span><br><span class="line">        url = base_url.format(page)</span><br><span class="line">        get_company_id(url)</span><br><span class="line">        time.sleep(random.uniform(<span class="number">15</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>  从手机端网页获取所有公司ID这个函数需要填入你的cookie。获取方式：使用Chrome打开天眼查，登录之后，按F12打开检查，切换到手机模式，然后刷新一下页面，就可以提取到cookie了，要选择 m.开头链接的cookie。 在解析API获取公司信息函数 header中的X-AUTH-TOKEN 以及 Authorization填入你用Fiddler获取到的值。就可以了。</p><h2 id="爬取效果">爬取效果</h2><p><img src="/posts/b8f914a1/result.png" alt></p><h2 id="写在最后">写在最后</h2><p>  如果PC端网页反爬虫不容易解决，手机端网页也不容易解决。那么就可以考虑小程序的接口或APP的接口。还有就是爬虫要休息，只要我爬的足够慢，你就搞不懂我是人类还是非人类了。</p><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考，不得用于商业用途。</b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;If you can take it, you can make it. ——《坚不可摧》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;敢于实践，方能实现。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="http://mrxiuxing.cn/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>Python实现冒泡排序和选择排序</title>
    <link href="http://mrxiuxing.cn/posts/682abd47.html"/>
    <id>http://mrxiuxing.cn/posts/682abd47.html</id>
    <published>2020-04-12T11:50:29.000Z</published>
    <updated>2020-05-06T12:25:22.438Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Every obstacle is an opportunity. ——《快乐的大脚》</center></strong></em><br><em><strong><center>每一次挫折都是一次机会。</center></strong></em></p><a id="more"></a><h2 id="冒泡排序">冒泡排序</h2><h3 id="原理">原理</h3><p>1.比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>2.对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>3.针对所有的元素重复以上的步骤，除了最后一个。<br>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(nums_list)</span>:</span></span><br><span class="line">    flag = <span class="number">0</span>    <span class="comment"># 是否交换的标志</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums_list) - <span class="number">1</span>):    <span class="comment"># 这个循环负责设置冒泡排序进行的次数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums_list) - j - <span class="number">1</span>):    <span class="comment"># i为列表下标</span></span><br><span class="line">            <span class="keyword">if</span> nums_list[i] &gt; nums_list[i + <span class="number">1</span>]:</span><br><span class="line">                nums_list[i], nums_list[i + <span class="number">1</span>] = nums_list[i + <span class="number">1</span>], nums_list[i]</span><br><span class="line">                flag += <span class="number">1</span></span><br><span class="line">                print(<span class="string">f"目前交换<span class="subst">&#123;flag&#125;</span>次了, 列表现在是：<span class="subst">&#123;nums_list&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'这个列表原本就是有序列表，不需要排序了！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'这个列表共交换了<span class="subst">&#123;flag&#125;</span>次。'</span>)</span><br><span class="line">    <span class="keyword">return</span> nums_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(bubble_sort([<span class="number">66</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]))</span><br><span class="line">print()</span><br><span class="line">print(bubble_sort([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">目前交换<span class="number">1</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">2</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">3</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">66</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">4</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">5</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">6</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">7</span>次了, 列表现在是：[<span class="number">19</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">8</span>次了, 列表现在是：[<span class="number">14</span>, <span class="number">19</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">9</span>次了, 列表现在是：[<span class="number">14</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">10</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">这个列表共交换了<span class="number">10</span>次。</span><br><span class="line">[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line"></span><br><span class="line">这个列表原本就是有序列表，不需要排序了！</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="选择排序">选择排序</h2><h3 id="原理-2">原理</h3><p>第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。</p><h3 id="代码实现-2">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(nums_list)</span>:</span></span><br><span class="line">    flag = <span class="number">0</span>  <span class="comment"># 是否交换的标志</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums_list)<span class="number">-1</span>):</span><br><span class="line">        min_index = i    <span class="comment"># 将本次循环第一个位置值的下标设为i</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(nums_list)):    <span class="comment"># 和当前i元素之后的所有值进行比较</span></span><br><span class="line">            <span class="keyword">if</span> nums_list[j] &lt; nums_list[min_index]:</span><br><span class="line">                min_index = j    <span class="comment"># 使min_index为本次循环最小值下标</span></span><br><span class="line">        nums_list[i], nums_list[min_index] = nums_list[min_index], nums_list[i]</span><br><span class="line">        flag += <span class="number">1</span></span><br><span class="line">        print(<span class="string">f"目前交换<span class="subst">&#123;flag&#125;</span>次了, 列表现在是：<span class="subst">&#123;nums_list&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'这个列表原本就是有序列表，不需要排序了！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'这个列表共交换了<span class="subst">&#123;flag&#125;</span>次。'</span>)</span><br><span class="line">    <span class="keyword">return</span> nums_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(selection_sort([<span class="number">66</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">88</span>]))</span><br><span class="line">print()</span><br><span class="line">print(bubble_sort([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">目前交换<span class="number">1</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">2</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">3</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">4</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">21</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">5</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">目前交换<span class="number">6</span>次了, 列表现在是：[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br><span class="line">这个列表共交换了<span class="number">6</span>次。</span><br><span class="line">[<span class="number">13</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">88</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Every obstacle is an opportunity. ——《快乐的大脚》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;每一次挫折都是一次机会。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JDK安装及环境配置</title>
    <link href="http://mrxiuxing.cn/posts/5f24fd4.html"/>
    <id>http://mrxiuxing.cn/posts/5f24fd4.html</id>
    <published>2020-04-10T05:12:20.000Z</published>
    <updated>2020-04-10T05:12:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>When the Lord closes a door, somewhere he opens a window. ——《音乐之声》</center></strong></em><br><em><strong><center>上帝关上一扇门，他会在某处打开一扇窗。</center></strong></em></p><a id="more"></a><h2 id="JDK下载">JDK下载</h2><p>  oracle官网地址：<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a> 。这里选择了Java SE 13 ,你也可以选择其他版本。<br><img src="/posts/5f24fd4/1jdk13.png" alt><br>  点击JDK Download 也就上图中红框圈住的地方。进入版本选择页面，选择Windows x64 Installer 对应的版本，即下图红框圈住的那个。<br><img src="/posts/5f24fd4/2jdk13.png" alt><br>  这时会弹出一个让你接受协议的弹窗，按照下图所示点击，即可下载。<br><img src="/posts/5f24fd4/3jdk13.png" alt><br>  下载完成<br><img src="/posts/5f24fd4/4jdk13.png" alt></p><h2 id="JDK安装">JDK安装</h2><p>  双击刚下载完成的安装包，点击是<br><img src="/posts/5f24fd4/5jdk13.png" alt><br>  点击下一步<br><img src="/posts/5f24fd4/6jdk13.png" alt><br>  默认安装位置是C:\Program Files\，(如果你不想安装在C盘可以点击更改选择其他盘符且路径不要包含中文)这里我是直接下一步，也就是默认安装路径。<br><img src="/posts/5f24fd4/7jdk13.png" alt><br>  稍等片刻，直至出现下图，点击关闭。<br><img src="/posts/5f24fd4/8jdk13.png" alt></p><h2 id="JDK配置环境变量">JDK配置环境变量</h2><p>  安装完成还不够，还需要去配置环境变量。使用 win + pause break键打开计算机属性窗口，如下图示，点击左边的红框部分 高级系统设置。<br><img src="/posts/5f24fd4/9jdk13.png" alt><br>  对于没有全键盘的电脑来说可能没有pause break键，如果在你的桌面有此电脑图标，你可以直接右键然后点击属性；如果你的桌面没有此电脑，你可以先打开文件资源管理器，如下图所示：点击此电脑右键再选择属性，也可以打开计算机属性窗口。<br><img src="/posts/5f24fd4/10jdk13.png" alt><br>  进入计算机属性窗口，点击左侧高级系统设置，进入系统属性窗口，然后点击环境变量，进入环境变量窗口。<br><img src="/posts/5f24fd4/11jdk13.png" alt><br><img src="/posts/5f24fd4/12jdk13.png" alt><br>  环境变量分为用户环境变量和系统环境变量，我们在系统变量新建一个变量名为JAVA_HOME，变量值为你的JDK安装路径，我这里是C:\Program Files\Java\jdk-13.0.2，然后点击确定。如下图示：<br><img src="/posts/5f24fd4/13jdk13.png" alt><br>  选中PATH，点击编辑<br><img src="/posts/5f24fd4/14jdk13.png" alt><br>  新建填入%JAVA_HOME%\bin，然后点击确定，如下图示：<br><img src="/posts/5f24fd4/15jdk13.png" alt><br>  点击确定<br><img src="/posts/5f24fd4/16jdk13.png" alt><br>  点击确定<br><img src="/posts/5f24fd4/17jdk13.png" alt><br>  至此环境变量配置完毕。</p><h2 id="验证JDK环境变量">验证JDK环境变量</h2><p>  使用win + R打开运行，输出cmd，回车，进入命令行窗口。<br><img src="/posts/5f24fd4/18jdk13.png" alt><br><img src="/posts/5f24fd4/19jdk13.png" alt><br>  在命令行分别输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><p><img src="/posts/5f24fd4/20jdk13.png" alt><br>  如果你的输出结果类似上图信息，则表示安装成功，否则请检查JAVA_HOME和Path的设置。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;When the Lord closes a door, somewhere he opens a window. ——《音乐之声》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;上帝关上一扇门，他会在某处打开一扇窗。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JDK" scheme="http://mrxiuxing.cn/categories/JDK/"/>
    
    
      <category term="JDK" scheme="http://mrxiuxing.cn/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>爬取豆瓣音乐Top250(多线程、多进程)</title>
    <link href="http://mrxiuxing.cn/posts/572ae169.html"/>
    <id>http://mrxiuxing.cn/posts/572ae169.html</id>
    <published>2020-04-08T07:41:20.000Z</published>
    <updated>2020-04-08T07:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>If you stay positive, you have a shot at a sliver lining. ——《乌云背后的幸福线》</center></strong></em><br><em><strong><center>山重水复疑无路，柳暗花明又一村。</center></strong></em></p><a id="more"></a><h2 id="站点分析">站点分析</h2><p>  本次抓取目标是豆瓣音乐Top250排行榜，目标站点为 <a href="https://music.douban.com/top250" target="_blank" rel="noopener">https://music.douban.com/top250</a> ，打开之后便可以查看榜单。<br><img src="/posts/572ae169/1top250.png" alt></p><p>  将网页滑到最下方，发现有分页，点击切换到第2页，观察URL的变化。发现页面的URL变成了 <a href="https://music.douban.com/top250?start=25" target="_blank" rel="noopener">https://music.douban.com/top250?start=25</a> ，如下图：<br><img src="/posts/572ae169/2top250.png" alt></p><p>  比之前的URL多了一个start参数,初步推断这是一个偏移量的参数。再点击下一页，start参数变成了50。多次切换页码offset都有改变，由此得出规律，start代表偏移量值。也就是说Top250我们只需要分开请求10次即可，而10次的参数分别设置为0、25、50…225即可。<br>  使用Chrome浏览器开发者模式查看源代码。选中任意一个条目，发现其详情页链接在class属性为ngb的a节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_music_url = tree.xpath(<span class="string">'//*[@class="nbg"]/@href'</span>)</span><br></pre></td></tr></table></figure><p>  进入专辑页面，需要抓取的信息都在这里，不过有的信息使用XPath不太好获取，所以对于这些不好提取的信息使用了正则表达式。如流派的内容：<br><img src="/posts/572ae169/3top250.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">styles = re.findall(<span class="string">r'&lt;span class="pl"&gt;流派:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)</span><br><span class="line">    <span class="keyword">if</span> len(styles) == <span class="number">0</span>:</span><br><span class="line">        style = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        style = styles[<span class="number">0</span>].strip()</span><br></pre></td></tr></table></figure><h2 id="完整代码">完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line"><span class="comment"># start_time = datetime.now()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent(verify_ssl=<span class="literal">False</span>).random,    <span class="comment"># 随机UA</span></span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>    <span class="comment"># 关闭长链接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有音乐详情页链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    html = requests.get(url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    all_music_url = tree.xpath(<span class="string">'//*[@class="nbg"]/@href'</span>)</span><br><span class="line">    <span class="keyword">for</span> music_url <span class="keyword">in</span> all_music_url:</span><br><span class="line">        get_music_info(music_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析详情页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_info</span><span class="params">(music_url)</span>:</span></span><br><span class="line">    html = requests.get(music_url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    name = tree.xpath(<span class="string">'//*[@id="wrapper"]/h1/span/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 音乐名称</span></span><br><span class="line">    author = tree.xpath(<span class="string">'//*[@id="info"]/span/span/a/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 演唱者</span></span><br><span class="line">    styles = re.findall(<span class="string">r'&lt;span class="pl"&gt;流派:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 流派</span></span><br><span class="line">    <span class="keyword">if</span> len(styles) == <span class="number">0</span>:</span><br><span class="line">        style = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        style = styles[<span class="number">0</span>].strip()</span><br><span class="line">    time = re.findall(<span class="string">r'&lt;span class="pl"&gt;发行时间:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)[<span class="number">0</span>].strip()    <span class="comment"># 发行时间</span></span><br><span class="line">    publishers = re.findall(<span class="string">r'&lt;span class="pl"&gt;出版者:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 出版者</span></span><br><span class="line">    score = tree.xpath(<span class="string">'//*[@class="ll rating_num"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(publishers) == <span class="number">0</span>:</span><br><span class="line">        publisher = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        publisher = publishers[<span class="number">0</span>].strip()</span><br><span class="line">    music_info = &#123;</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"author"</span>: author,</span><br><span class="line">        <span class="string">"style"</span>: style,</span><br><span class="line">        <span class="string">"time"</span>: time,</span><br><span class="line">        <span class="string">"publisher"</span>: publisher,</span><br><span class="line">        <span class="string">"score"</span>: score</span><br><span class="line">    &#125;</span><br><span class="line">    print(music_info)</span><br><span class="line">    save_to_csv(filename, music_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存到CSV文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span><span class="params">(filename, music_info)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"author"</span>, <span class="string">"style"</span>, <span class="string">"time"</span>, <span class="string">"publisher"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writerow(music_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [<span class="string">'https://music.douban.com/top250?start=&#123;&#125;'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>)]</span><br><span class="line">    filename = <span class="string">'musicTop250.csv'</span></span><br><span class="line">    <span class="comment"># 创建musicTop250.csv文件，并添加表头信息</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"author"</span>, <span class="string">"style"</span>, <span class="string">"time"</span>, <span class="string">"publisher"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writeheader()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        get_music_url(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结束时间</span></span><br><span class="line">    <span class="comment"># end_time = datetime.now()</span></span><br><span class="line">    <span class="comment"># print(f'用时：&#123;(end_time - start_time).seconds&#125;秒')</span></span><br></pre></td></tr></table></figure><h2 id="多线程版">多线程版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line">start_time = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程锁</span></span><br><span class="line">lock = Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent(verify_ssl=<span class="literal">False</span>).random,    <span class="comment"># 随机UA</span></span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>    <span class="comment"># 关闭长链接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从URL列表中获取URl</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> urls</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">if</span> len(urls) == <span class="number">0</span>:</span><br><span class="line">        lock.release()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    lock.release()</span><br><span class="line">    <span class="keyword">return</span> urls.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有音乐详情页链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_url</span><span class="params">(url, thread_name)</span>:</span></span><br><span class="line">    html = requests.get(url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    all_music_url = tree.xpath(<span class="string">'//*[@class="nbg"]/@href'</span>)</span><br><span class="line">    <span class="keyword">for</span> music_url <span class="keyword">in</span> all_music_url:</span><br><span class="line">        get_music_info(music_url, thread_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析详情页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_info</span><span class="params">(music_url, thread_name)</span>:</span></span><br><span class="line">    html = requests.get(music_url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    name = tree.xpath(<span class="string">'//*[@id="wrapper"]/h1/span/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 音乐名称</span></span><br><span class="line">    author = tree.xpath(<span class="string">'//*[@id="info"]/span/span/a/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 演唱者</span></span><br><span class="line">    styles = re.findall(<span class="string">r'&lt;span class="pl"&gt;流派:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 流派</span></span><br><span class="line">    <span class="keyword">if</span> len(styles) == <span class="number">0</span>:</span><br><span class="line">        style = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        style = styles[<span class="number">0</span>].strip()</span><br><span class="line">    time = re.findall(<span class="string">r'&lt;span class="pl"&gt;发行时间:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)[<span class="number">0</span>].strip()    <span class="comment"># 发行时间</span></span><br><span class="line">    publishers = re.findall(<span class="string">r'&lt;span class="pl"&gt;出版者:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 出版者</span></span><br><span class="line">    score = tree.xpath(<span class="string">'//*[@class="ll rating_num"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(publishers) == <span class="number">0</span>:</span><br><span class="line">        publisher = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        publisher = publishers[<span class="number">0</span>].strip()</span><br><span class="line">    music_info = &#123;</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"author"</span>: author,</span><br><span class="line">        <span class="string">"style"</span>: style,</span><br><span class="line">        <span class="string">"time"</span>: time,</span><br><span class="line">        <span class="string">"publisher"</span>: publisher,</span><br><span class="line">        <span class="string">"score"</span>: score</span><br><span class="line">    &#125;</span><br><span class="line">    print(thread_name, music_info)</span><br><span class="line">    <span class="comment"># save_to_csv(filename, music_info)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存到CSV文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span><span class="params">(filename, music_info)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"author"</span>, <span class="string">"style"</span>, <span class="string">"time"</span>, <span class="string">"publisher"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writerow(music_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicSpiderThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = get_url()</span><br><span class="line">            <span class="keyword">if</span> url != <span class="string">""</span>:</span><br><span class="line">                get_music_url(url, self.name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [<span class="string">'https://music.douban.com/top250?start=&#123;&#125;'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>)]</span><br><span class="line">    <span class="comment"># filename = 'musicTop250.csv'</span></span><br><span class="line">    <span class="comment"># with open(filename, 'a', encoding='utf-8') as f:</span></span><br><span class="line">    <span class="comment">#     fieldnames = ["name", "author", "style", "time", "publisher", "score"]</span></span><br><span class="line">    <span class="comment">#     writer = csv.DictWriter(f, fieldnames=fieldnames)</span></span><br><span class="line">    <span class="comment">#     writer.writeheader()</span></span><br><span class="line">    print(len(urls))</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>): <span class="comment"># 开启4个线程</span></span><br><span class="line">        thread = MusicSpiderThread(<span class="string">'thread-&#123;&#125;'</span>.format(i))</span><br><span class="line">        threads.append(thread)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结束时间</span></span><br><span class="line">    end_time = datetime.now()</span><br><span class="line">    print(<span class="string">f'用时：<span class="subst">&#123;(end_time-start_time).seconds&#125;</span>秒'</span>)</span><br></pre></td></tr></table></figure><h2 id="多进程版">多进程版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line">start_time = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent(verify_ssl=<span class="literal">False</span>).random,    <span class="comment"># 随机UA</span></span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>    <span class="comment"># 关闭长链接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有音乐详情页链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    html = requests.get(url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    all_music_url = tree.xpath(<span class="string">'//*[@class="nbg"]/@href'</span>)</span><br><span class="line">    <span class="keyword">for</span> music_url <span class="keyword">in</span> all_music_url:</span><br><span class="line">        get_music_info(music_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析详情页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_info</span><span class="params">(music_url)</span>:</span></span><br><span class="line">    html = requests.get(music_url, headers=headers).text</span><br><span class="line">    tree = etree.HTML(html)</span><br><span class="line">    name = tree.xpath(<span class="string">'//*[@id="wrapper"]/h1/span/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 音乐名称</span></span><br><span class="line">    author = tree.xpath(<span class="string">'//*[@id="info"]/span/span/a/text()'</span>)[<span class="number">0</span>]    <span class="comment"># 演唱者</span></span><br><span class="line">    styles = re.findall(<span class="string">r'&lt;span class="pl"&gt;流派:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 流派</span></span><br><span class="line">    <span class="keyword">if</span> len(styles) == <span class="number">0</span>:</span><br><span class="line">        style = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        style = styles[<span class="number">0</span>].strip()</span><br><span class="line">    time = re.findall(<span class="string">r'&lt;span class="pl"&gt;发行时间:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)[<span class="number">0</span>].strip()    <span class="comment"># 发行时间</span></span><br><span class="line">    publishers = re.findall(<span class="string">r'&lt;span class="pl"&gt;出版者:&lt;/span&gt;&amp;nbsp;(.*?)&lt;br /&gt;'</span>, html, re.S)    <span class="comment"># 出版者</span></span><br><span class="line">    score = tree.xpath(<span class="string">'//*[@class="ll rating_num"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(publishers) == <span class="number">0</span>:</span><br><span class="line">        publisher = <span class="string">'未知'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        publisher = publishers[<span class="number">0</span>].strip()</span><br><span class="line">    music_info = &#123;</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"author"</span>: author,</span><br><span class="line">        <span class="string">"style"</span>: style,</span><br><span class="line">        <span class="string">"time"</span>: time,</span><br><span class="line">        <span class="string">"publisher"</span>: publisher,</span><br><span class="line">        <span class="string">"score"</span>: score</span><br><span class="line">    &#125;</span><br><span class="line">    print(music_info)</span><br><span class="line">    <span class="comment"># save_to_csv(filename, music_info)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存到CSV文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span><span class="params">(filename, music_info)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"name"</span>, <span class="string">"author"</span>, <span class="string">"style"</span>, <span class="string">"time"</span>, <span class="string">"publisher"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writerow(music_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [<span class="string">'https://music.douban.com/top250?start=&#123;&#125;'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>)]</span><br><span class="line">    <span class="comment"># filename = 'musicTop250.csv'</span></span><br><span class="line">    <span class="comment"># with open(filename, 'a', encoding='utf-8') as f:</span></span><br><span class="line">    <span class="comment">#     fieldnames = ["name", "author", "style", "time", "publisher", "score"]</span></span><br><span class="line">    <span class="comment">#     writer = csv.DictWriter(f, fieldnames=fieldnames)</span></span><br><span class="line">    <span class="comment">#     writer.writeheader()</span></span><br><span class="line">    <span class="comment"># for url in urls:</span></span><br><span class="line">    <span class="comment">#     get_music_url(url)</span></span><br><span class="line"></span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)    <span class="comment"># 开启4个进程</span></span><br><span class="line">    pool.map(get_music_url, urls)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结束时间</span></span><br><span class="line">    end_time = datetime.now()</span><br><span class="line">    print(<span class="string">f'用时：<span class="subst">&#123;(end_time - start_time).seconds&#125;</span>秒'</span>)</span><br></pre></td></tr></table></figure><h2 id="用时对比">用时对比</h2><p>  为了测试，并没有把抓取到的结构化数据存储到文件，而是直接输出到控制台。在同一台机器上运行了上面多线程与多进程的代码，多线程开启4个线程用时104秒，多进程开启4个进程用时123秒。感觉不是很快，可能跟我这边的网络不太好有关系。豆瓣这边快速抓取一定数量后，会提示你IP异常，然后让你登录，对此，你可以将登录后的cookies放到headers中。</p><h2 id="写在最后">写在最后</h2><p>  对于多线程多进程爬虫效率固然可观，但缺点也很明显，你需要考虑更多的细节，并且多线程和多进程的程序并不好调试，操作不好的话容易造成死锁或脏数据。对于一些小型站点个人感觉没必要使用多线程或多进程，对于大型站点或者你实在想要高速爬取，推荐使用框架。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;If you stay positive, you have a shot at a sliver lining. ——《乌云背后的幸福线》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;山重水复疑无路，柳暗花明又一村。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="多线程" scheme="http://mrxiuxing.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多进程" scheme="http://mrxiuxing.cn/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="XPath" scheme="http://mrxiuxing.cn/tags/XPath/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程多进程编程</title>
    <link href="http://mrxiuxing.cn/posts/e72e67c0.html"/>
    <id>http://mrxiuxing.cn/posts/e72e67c0.html</id>
    <published>2020-04-01T06:13:00.000Z</published>
    <updated>2020-04-01T06:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>There must be a good reason for our suffering. ——《加勒比海盗》</center></strong></em><br><em><strong><center>苦尽则甘来。</center></strong></em></p><a id="more"></a><h2 id="进程与线程">进程与线程</h2><h3 id="进程">进程</h3><p>  计算机程序只是存储在磁盘上的可执行二进制(或其他类型)文件。只有把它们加载到内存中并被操作系统调用,才拥有其生命期。进程(有时称为重量级进程)则是一个执行中的程序。 每个进程都拥有自己的地址空间、 内存、 数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上所有进程的执行,并为这些进程合理地分配时间。进程也可以通过派生(fork 或 spawn)新的进程来执行其他任务,不过因为每个新进程也都拥有自己的内存和数据栈等,所以只能采用进程间通信(IPC)的方式共享信息。</p><h3 id="线程">线程</h3><p>  线程是程序执行时的最小单位(有时候称为轻量级进程),不过它们是在同一个进程下执行的,它是进程的一个执行流，并共享相同的上下文。可以将它们认为是在一个主进程或&quot;主线程&quot;中并行运行的一些&quot;迷你进程&quot; 。</p><p>  线程包括开始、执行顺序和结束三部分。它有一个指令指针,用于记录当前运行的上下文。当其他线程运行时,它可以被抢占(中断)和临时挂起(也称为睡眠)。</p><p>  一个进程中的各个线程与主线程之间可以共享同一块数据空间,因此相比于独立的进程而言,线程间的信息共享和通信更加容易。线程一般是以并发方式执行的,正是由于这种并行和数据共享机制,使得多任务间的协作成为可能。当然,在单核 CPU 系统中,因为真正的并发是不可能的,所以线程的执行实际上还是同步执行的，只是系统会根据调度算法在不同的时间安排某一个线程在CPU上执行一小会，然后让其他线程在CPU上再执行一小会，通过这种在多个线程间不断切换的方式让多个线程交替执行。因此，在宏观上看，即使在单核CPU的系统上仍然像多个线程并发运行一样。</p><h2 id="GIL即全局解释器锁">GIL即全局解释器锁</h2><p>  Python之父荷兰人吉多·范罗苏姆(Guido van Rossum)在CPU单核时代为了充分地利用单核CPU的使用率，在解释器层面实现了一把全局互斥锁。</p><p>  官方说明：In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</p><p>  翻译：Python官方解释器（CPython解释器）的内存管理是不安全的，因此它有一个全局解释器锁（Global Interpreter Lock简称GIL），它使得在任何时刻都只有一个线程在执行Python字节码。这也是使得标准版本的Python并不能实现真正的多线程并发的直接原因。</p><p>  不过对于现在的多核处理器时代来说就是：一核有难，多核围观。</p><h2 id="Python多线程">Python多线程</h2><h3 id="Thread类与线程函数">Thread类与线程函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name, sec)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param name: 名字</span></span><br><span class="line"><span class="string">    :param sec: 休眠时间，单位：秒</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"Hello："</span>, name, <span class="string">"时间："</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">"see you"</span>, name, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建第一个线程对象，通过target关键字参数传入指定函数，通过args传入指定函数所需参数，以元组形式</span></span><br><span class="line">    thread1 = threading.Thread(target=func, args=(<span class="string">"xiuxing"</span>, <span class="number">5</span>))</span><br><span class="line">    <span class="comment"># 启动第一个线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    <span class="comment"># 创建第二个线程对象，通过target关键字参数传入指定函数，通过args传入指定函数所需参数，以元组形式</span></span><br><span class="line">    thread2 = threading.Thread(target=func, args=(<span class="string">"Mr.xiuxing"</span>, <span class="number">10</span>))</span><br><span class="line">    <span class="comment"># 启动第二个线程</span></span><br><span class="line">    thread2.start()</span><br><span class="line">    <span class="comment"># 等待第一个线程函数执行完毕</span></span><br><span class="line">    thread1.join()</span><br><span class="line">    <span class="comment"># 等待第二个线程函数执行完毕</span></span><br><span class="line">    thread2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;Hello： xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">55</span> <span class="number">2020</span></span><br><span class="line">   Hello： Mr.xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">55</span> <span class="number">2020</span></span><br><span class="line">   see you xiuxing Wed Apr  <span class="number">1</span> <span class="number">16</span>:<span class="number">36</span>:<span class="number">00</span> <span class="number">2020</span></span><br><span class="line">   see you Mr.xiuxing Wed Apr  <span class="number">1</span> <span class="number">16</span>:<span class="number">36</span>:<span class="number">05</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><h3 id="Thread类与线程对象">Thread类与线程对象</h3><p>  Thread类构造方法的target关键字参数不仅可以是一个函数，还可以是一个对象，可以称这个对象为线程对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># func 表示线程函数， args表示线程函数的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当线程启动时会调用该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.func(*self.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name, sec)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello："</span>, name, <span class="string">"时间："</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">"see you"</span>, name, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"程序开始时间："</span>, ctime())</span><br><span class="line">    <span class="comment"># 创建第一个线程对象，通过target关键字参数传入指定对象</span></span><br><span class="line">    thread1 = threading.Thread(target=MyThread(func, (<span class="string">"xiuxing"</span>, <span class="number">5</span>)))</span><br><span class="line">    <span class="comment"># 启动第一个线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    <span class="comment"># 创建第二个线程对象，通过target关键字参数传入指定对象</span></span><br><span class="line">    thread2 = threading.Thread(target=MyThread(func, (<span class="string">"Mr.xiuxing"</span>, <span class="number">10</span>)))</span><br><span class="line">    <span class="comment"># 启动第二个线程</span></span><br><span class="line">    thread2.start()</span><br><span class="line">    <span class="comment"># 创建第三个线程对象，通过target关键字参数传入指定对象</span></span><br><span class="line">    thread3 = threading.Thread(target=MyThread(func, (<span class="string">"Sir"</span>, <span class="number">20</span>)))</span><br><span class="line">    <span class="comment"># 启动第三个线程</span></span><br><span class="line">    thread3.start()</span><br><span class="line">    <span class="comment"># 等待第一个线程函数执行完毕</span></span><br><span class="line">    thread1.join()</span><br><span class="line">    <span class="comment"># 等待第二个线程函数执行完毕</span></span><br><span class="line">    thread2.join()</span><br><span class="line">    <span class="comment"># 等待第三个线程函数执行完毕</span></span><br><span class="line">    thread3.join()</span><br><span class="line">    print(<span class="string">"程序结束时间："</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;程序开始时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">06</span> <span class="number">2020</span></span><br><span class="line">   Hello： xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">06</span> <span class="number">2020</span></span><br><span class="line">   Hello： Mr.xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">06</span> <span class="number">2020</span></span><br><span class="line">   Hello： Sir 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">06</span> <span class="number">2020</span></span><br><span class="line">   see you xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">11</span> <span class="number">2020</span></span><br><span class="line">   see you Mr.xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">16</span> <span class="number">2020</span></span><br><span class="line">   see you Sir Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">26</span> <span class="number">2020</span></span><br><span class="line">   程序结束时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">26</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><h3 id="继承Thread类">继承Thread类</h3><p>  继承threading.Thread，重构父类的构造方法和 run 方法，但不将线程函数写进run方法中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="comment"># 重写父类构造方法， func为线程函数，name为线程名，args为传入线程函数的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args, name)</span>:</span></span><br><span class="line">        super().__init__(target=func, name=name, args=args)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写run方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._target(*self._args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name, sec)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello："</span>, name, <span class="string">"时间："</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">"see you"</span>, name, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"程序开始时间："</span>, ctime())</span><br><span class="line">    <span class="comment"># 创建第一个线程对象，传入线程函数，线程函数参数(以元组形式)，线程名</span></span><br><span class="line">    thread1 = MyThread(func, (<span class="string">"xiuxing"</span>, <span class="number">5</span>), <span class="string">'线程1'</span>)</span><br><span class="line">    <span class="comment"># 创建第二个线程对象，传入线程函数，线程函数参数(以元组形式)，线程名</span></span><br><span class="line">    thread2 = MyThread(func, (<span class="string">"Mr.xiuxing"</span>, <span class="number">10</span>), <span class="string">'线程2'</span>)</span><br><span class="line">    <span class="comment"># 启动第一个线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    print(thread1.name)</span><br><span class="line">    <span class="comment"># 启动第二个线程</span></span><br><span class="line">    thread2.start()</span><br><span class="line">    print(thread2.name)</span><br><span class="line">    <span class="comment"># 等待第一个线程函数执行完毕</span></span><br><span class="line">    thread1.join()</span><br><span class="line">    <span class="comment"># 等待第二个线程函数执行完毕</span></span><br><span class="line">    thread2.join()</span><br><span class="line">    print(<span class="string">"程序结束时间："</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;程序开始时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">51</span> <span class="number">2020</span></span><br><span class="line">   Hello： xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">51</span> <span class="number">2020</span></span><br><span class="line">   线程<span class="number">1</span></span><br><span class="line">   Hello： Mr.xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">51</span> <span class="number">2020</span></span><br><span class="line">   线程<span class="number">2</span></span><br><span class="line">   see you xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">56</span> <span class="number">2020</span></span><br><span class="line">   see you Mr.xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">46</span>:<span class="number">01</span> <span class="number">2020</span></span><br><span class="line">   程序结束时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">46</span>:<span class="number">01</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><p>  继承threading.Thread，重构父类的构造方法，并将线程函数写进run方法中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="comment"># 重写父类构造方法， f_name、sec为线程函数参数，name为线程名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, f_name, sec, name)</span>:</span></span><br><span class="line">        super().__init__(name=name)</span><br><span class="line">        self.f_name = f_name</span><br><span class="line">        self.sec = sec</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将线程函数写进run方法中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Hello："</span>, self.f_name, <span class="string">"时间："</span>, ctime())</span><br><span class="line">        sleep(self.sec)</span><br><span class="line">        print(<span class="string">"see you"</span>, self.f_name, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"程序开始时间："</span>, ctime())</span><br><span class="line">    <span class="comment"># 创建第一个线程对象，传入重构后run方法参数以及线程名</span></span><br><span class="line">    thread1 = MyThread(<span class="string">"xiuxing"</span>, <span class="number">5</span>, <span class="string">'线程1'</span>)</span><br><span class="line">    <span class="comment"># 创建第二个线程对象，传入重构后run方法参数以及线程名</span></span><br><span class="line">    thread2 = MyThread(<span class="string">"Mr.xiuxing"</span>, <span class="number">10</span>, <span class="string">'线程2'</span>)</span><br><span class="line">    <span class="comment"># 启动第一个线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    print(thread1.name)</span><br><span class="line">    <span class="comment"># 启动第二个线程</span></span><br><span class="line">    thread2.start()</span><br><span class="line">    print(thread2.name)</span><br><span class="line">    <span class="comment"># 等待第一个线程函数执行完毕</span></span><br><span class="line">    thread1.join()</span><br><span class="line">    <span class="comment"># 等待第二个线程函数执行完毕</span></span><br><span class="line">    thread2.join()</span><br><span class="line">    print(<span class="string">"程序结束时间："</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;程序开始时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">02</span> <span class="number">2020</span></span><br><span class="line">   Hello： xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">02</span> <span class="number">2020</span></span><br><span class="line">   线程<span class="number">1</span></span><br><span class="line">   Hello： Mr.xiuxing 时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">02</span> <span class="number">2020</span></span><br><span class="line">   线程<span class="number">2</span></span><br><span class="line">   see you xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">07</span> <span class="number">2020</span></span><br><span class="line">   see you Mr.xiuxing Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">12</span> <span class="number">2020</span></span><br><span class="line">   程序结束时间： Wed Apr  <span class="number">1</span> <span class="number">17</span>:<span class="number">56</span>:<span class="number">12</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><p>  从上面两个例子可以看出，run方法不一定要在MyThread类中重写，因为Thread中已经有默认实现的了。如果想扩展也可以重写。</p><h3 id="线程锁">线程锁</h3><p>  多线程的目的是为了让多个程序并发执行，线程之间是进行随机调度，但是在某些情况下让多个程序同时运行会有很多麻烦，如果这些并发运行的程序还共享数据，很有可能会产生脏数据(当有多个程序同时读写一个或一组变量时，因为读写顺序的问题造成最终结果与期望值不一致)。<br>  线程锁的目的是将一段代码锁住，一旦获得了锁权限，除非解锁，否则其他任何代码都无法再次获得锁权限。也就是在同一时刻仅允许一个线程执行操作。<br>  想要使用线程锁，需要先创建Lock类的实例，然后通过Lock对象的acquire方法获得锁权限，当需要完成原子操作的代码执行完后，再使用Lock对象的release方法解锁。<b>锁对象需要放在线程函数的外面作为一个全局变量，这样所有的线程函数实例就可以共享这个变量了。</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> atexit <span class="keyword">import</span> register</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock, currentThread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建锁对象</span></span><br><span class="line">lock = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取锁权限</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        f = open(<span class="string">'text.txt'</span>, <span class="string">'a'</span>)</span><br><span class="line">        print(<span class="string">"Thread Name ="</span>, currentThread().name, <span class="string">'i ='</span>, i)</span><br><span class="line">        f.write(<span class="string">"Thread Name = "</span>+currentThread().name+<span class="string">' i = '</span>+str(i)+<span class="string">'\n'</span>)</span><br><span class="line">        f.close()</span><br><span class="line">        sleep((random.randint(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line">    <span class="comment"># 释放线程锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 通过循环创建并启动三个线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        Thread(target=func).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当程序结束时会调用这个函数</span></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'线程执行完毕：'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>  先将func函数中的 lock.acquire() 和 lock.release() 语句注释，即在不使用线程锁的情况下运行程序，观察输出结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">4</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">4</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">4</span></span><br><span class="line">线程执行完毕： Tue Apr  <span class="number">7</span> <span class="number">15</span>:<span class="number">13</span>:<span class="number">20</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><p>  结果显而易见，如果没有使用线程锁，当调用sleep函数让线程休眠时，当前线程会释放CPU计算资源，而其他线程就会趁机抢占CPU计算资源，因此程序在启动的三个线程中交替执行。<br>  现在为func函数加上线程锁，再次运行程序，观察输出结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-1</span> i = <span class="number">4</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-2</span> i = <span class="number">4</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">0</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">1</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">2</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">3</span></span><br><span class="line">Thread Name = Thread<span class="number">-3</span> i = <span class="number">4</span></span><br><span class="line">线程执行完毕： Tue Apr  <span class="number">7</span> <span class="number">15</span>:<span class="number">19</span>:<span class="number">50</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><p>  如果为func函数加上线程锁，只用当某个线程的线程函数执行完毕，才会运行另一个线程函数。</p><h3 id="信号量">信号量</h3><p>  信号量(Semaphore)，用于控制获取资源的线程数量。它使用与线程锁同样的方法名消耗和释放资源。acquire方法用于消耗资源，调用该方法计数器 -1，release方法用于释放资源，调用该方法计数器 +1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> BoundedSemaphore, Lock, Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建信号量对象，并设置计数器最大值，计数器不能超过这个值</span></span><br><span class="line">semaphore = BoundedSemaphore(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 输出当前计数器的值，输出结果：2</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 获取资源，计数器 -1</span></span><br><span class="line">semaphore.acquire()</span><br><span class="line"><span class="comment"># 输出结果：1</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 获取资源，计数器 -1</span></span><br><span class="line">semaphore.acquire()</span><br><span class="line"><span class="comment"># 输出结果：0</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 当计数器为0时，不能再获取资源， 所以acquire方法会返回False</span></span><br><span class="line"><span class="comment"># 输出结果：False</span></span><br><span class="line">print(semaphore.acquire(<span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 释放资源，计数器 +1</span></span><br><span class="line">semaphore.release()</span><br><span class="line"><span class="comment"># 输出结果 ：1</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 释放资源，计数器 +1</span></span><br><span class="line">semaphore.release()</span><br><span class="line"><span class="comment"># 输出结果 ：2</span></span><br><span class="line">print(semaphore._value)</span><br><span class="line"><span class="comment"># 抛出异常，当计数器达到最大值时，不能再释放资源</span></span><br><span class="line">semaphore.release()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"E:/Code/Test/信号量.py"</span>, line <span class="number">31</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    semaphore.release()</span><br><span class="line">  File <span class="string">"c:\program\anaconda\Lib\threading.py"</span>, line <span class="number">482</span>, <span class="keyword">in</span> release</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"Semaphore released too many times"</span>)</span><br><span class="line">ValueError: Semaphore released too many times</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>  当计数器为0时调用acquire方法会有两种结果。第一种：当acquire方法的参数值为True或不指定参数时，acquire会处于阻塞状态，直到release释放资源后。第二种：acquire方法的参数值为False，当计数器为0时调用acquire方法不会发生阻塞，而是返回False，表示未获得资源，如果成功获取资源则会返回True。<br>  release方法在释放资源时，如果计数器已经达到最大值，会抛出异常，表示没有资源可供释放。</p><h2 id="生产者消费者模型">生产者消费者模型</h2><p>  生产者生产商品不用等待消费者处理，将其放到缓冲队列，消费者不用找生产者要数据，而是从缓冲队列提取商品处理。即生产者和消费者彼此之间不直接通讯，而是通过缓冲队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock, Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程锁</span></span><br><span class="line">lock = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从Thread派生的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args)</span>:</span></span><br><span class="line">        super().__init__(target=func, args=args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者向队列中添加商品</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producerQ</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 获取线程锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(ctime(), <span class="string">'生产了一个对象，并将其添加到队列中'</span>, end=<span class="string">' '</span>)</span><br><span class="line">    <span class="comment"># 向队列中添加商品</span></span><br><span class="line">    queue.put(<span class="string">'商品'</span>)</span><br><span class="line">    print(<span class="string">'队列大小'</span>, queue.qsize())</span><br><span class="line">    <span class="comment"># 释放线程锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者从队列中获取商品</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumerQ</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 获取线程锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="comment"># 向队列中添加商品</span></span><br><span class="line">    queue.get(<span class="number">1</span>)</span><br><span class="line">    print(ctime(), <span class="string">'消费了一个对象，队列大小'</span>, queue.qsize())</span><br><span class="line">    <span class="comment"># 释放线程锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成多个生产者</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(queue, loops)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        producerQ(queue)</span><br><span class="line">        sleep(randrange(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成多个消费者</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(queue, loops)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        consumerQ(queue)</span><br><span class="line">        sleep(randrange(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">funcs = [producer, consumer]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    l_loops = randrange(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">    q = Queue(<span class="number">32</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建2个线程运行producer函数和consumer</span></span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> funcs:</span><br><span class="line">        t = MyThread(func, (q, l_loops))</span><br><span class="line">        threads.append(t)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="comment"># 等待线程结束</span></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    print(<span class="string">'所有工作完成'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">20</span> <span class="number">2020</span> 生产了一个对象，并将其添加到队列中 队列大小 <span class="number">1</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">20</span> <span class="number">2020</span> 消费了一个对象，队列大小 <span class="number">0</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">21</span> <span class="number">2020</span> 生产了一个对象，并将其添加到队列中 队列大小 <span class="number">1</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">21</span> <span class="number">2020</span> 消费了一个对象，队列大小 <span class="number">0</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">22</span> <span class="number">2020</span> 生产了一个对象，并将其添加到队列中 队列大小 <span class="number">1</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">22</span> <span class="number">2020</span> 消费了一个对象，队列大小 <span class="number">0</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">23</span> <span class="number">2020</span> 生产了一个对象，并将其添加到队列中 队列大小 <span class="number">1</span></span><br><span class="line">Tue Apr  <span class="number">7</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">23</span> <span class="number">2020</span> 消费了一个对象，队列大小 <span class="number">0</span></span><br><span class="line">所有工作完成</span><br></pre></td></tr></table></figure><h2 id="Python多进程">Python多进程</h2><p>  尽管多线程可以实现并发，但由于多线程之间是共享了当前进程的内存，也就是说：线程可以申请到的资源有限。想要更进一步利用CPU性能，就需要使用多进程。在Python中可以使用multiprocessing 模块的Pool类创建进程池。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Run process %s (%s)...'</span> % (current_process().name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (current_process().name, (end - start)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        pool.apply_async(func)    <span class="comment"># apply_async实现非阻塞模式，apply实现阻塞模式</span></span><br><span class="line">    print(<span class="string">'Waiting for all sub-processes done...'</span>)</span><br><span class="line">    pool.close()    <span class="comment"># 先调用close()才能调用join()</span></span><br><span class="line">    pool.join()    <span class="comment"># 等待所有子进程执行完毕</span></span><br><span class="line">    print(<span class="string">'All sub-processes done.'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Parent process <span class="number">7120.</span></span><br><span class="line">Waiting <span class="keyword">for</span> all sub-processes done...</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-3</span> (<span class="number">13136</span>)...</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-1</span> (<span class="number">13868</span>)...</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-2</span> (<span class="number">4636</span>)...</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-4</span> (<span class="number">10076</span>)...</span><br><span class="line">Task SpawnPoolWorker<span class="number">-2</span> runs <span class="number">0.09</span> seconds.</span><br><span class="line">Run process SpawnPoolWorker<span class="number">-2</span> (<span class="number">4636</span>)...</span><br><span class="line">Task SpawnPoolWorker<span class="number">-3</span> runs <span class="number">0.28</span> seconds.</span><br><span class="line">Task SpawnPoolWorker<span class="number">-4</span> runs <span class="number">0.42</span> seconds.</span><br><span class="line">Task SpawnPoolWorker<span class="number">-2</span> runs <span class="number">1.81</span> seconds.</span><br><span class="line">Task SpawnPoolWorker<span class="number">-1</span> runs <span class="number">2.70</span> seconds.</span><br><span class="line">All sub-processes done.</span><br></pre></td></tr></table></figure><p><b>未完待续。。。有时间再补充</b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;There must be a good reason for our suffering. ——《加勒比海盗》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;苦尽则甘来。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://mrxiuxing.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="多线程" scheme="http://mrxiuxing.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多进程" scheme="http://mrxiuxing.cn/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="GIL锁" scheme="http://mrxiuxing.cn/tags/GIL%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>模拟登录淘宝并抓取指定商品(Selenium + pyquery + MongoDB)</title>
    <link href="http://mrxiuxing.cn/posts/fc939d6e.html"/>
    <id>http://mrxiuxing.cn/posts/fc939d6e.html</id>
    <published>2020-03-23T09:51:54.000Z</published>
    <updated>2020-03-23T09:51:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>The future has not been written. There is no fate but what we make for ourselves. ——《终结者3》</center></strong></em><br><em><strong><center>一切未成定局，未来等你去开创。</center></strong></em></p><a id="more"></a><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考，不得用于商业用途。</b></p><h2 id="使用微博账号登录淘宝">使用微博账号登录淘宝</h2><p>  目前的淘宝，如果未登录是不能搜索商品的，如果使用淘宝的账号密码需要验证验证码，然后就想着用其他账号登录淘宝–微博账号。使用微博账号登录淘宝需要先绑定淘宝账号。步骤：登录淘宝 —— 点击你的用户名 —— 点击账号管理 —— 点击微博绑定设置，然后按照提示一步步来就好。<br><img src="/posts/fc939d6e/weibosetting.png" alt></p><h3 id="登录流程">登录流程</h3><p><img src="/posts/fc939d6e/weiboliucheng.png" alt></p><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taobao</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://login.taobao.com/member/login.jhtml'</span></span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># options.add_experimental_option("prefs", &#123;"profile.managed_default_content_settings.images": 2&#125;)  # 不加载图片,加快访问速度</span></span><br><span class="line">        options.add_experimental_option(<span class="string">'excludeSwitches'</span>, [<span class="string">'enable-automation'</span>])  <span class="comment"># 设置为开发者模式，防止被各大网站识别出来使用了Selenium</span></span><br><span class="line">        self.browser = webdriver.Chrome(options=options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)  <span class="comment"># 超时时长为10s</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, weibo_username, weibo_password)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用微博登录，避免验证</span></span><br><span class="line"><span class="string">        :param weibo_username: 微博用户名</span></span><br><span class="line"><span class="string">        :param weibo_password: 微博密码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.PARTIAL_LINK_TEXT, <span class="string">'微博登录'</span>))).click()    <span class="comment"># 使用微博登录</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.username &gt; .W_input'</span>))).send_keys(weibo_username)    <span class="comment"># 输入账号</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.password &gt; .W_input'</span>))).send_keys(weibo_password)    <span class="comment"># 输入密码</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@class="btn_tip"]/a/span'</span>))).click()    <span class="comment"># 点击登录</span></span><br><span class="line">        <span class="comment"># 打印淘宝会员昵称</span></span><br><span class="line">        taobao_user = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.site-nav-user &gt; a.site-nav-login-info-nick'</span>)))</span><br><span class="line">        print(taobao_user.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    weibo_username = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博账号</span></span><br><span class="line">    weibo_password = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博密码</span></span><br><span class="line">    taobao = Taobao()</span><br><span class="line">    taobao.login(weibo_username, weibo_password)</span><br></pre></td></tr></table></figure><h2 id="抓取商品">抓取商品</h2><p>  使用selenium模拟登录后是跳转到了淘宝首页，我们可以继续模拟搜索商品以及翻页行为。</p><h3 id="搜索商品">搜索商品</h3><p>  在搜索框输入商品名，点击搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, kw)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param kw: 商品名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>))).send_keys(kw)</span><br><span class="line">    self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.search-button &gt; button.btn-search.tb-bg'</span>))).click()</span><br></pre></td></tr></table></figure><h3 id="翻页行为">翻页行为</h3><p>  提取一共多少页all_page_num，提取当前页activate_page_num，如果activate_page_num小于all_page_num，模拟点击下一页，否则改变flag (isEND)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下一页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        all_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.total'</span>))).get_attribute(<span class="string">"innerHTML"</span>).split()[<span class="number">1</span>])</span><br><span class="line">        activate_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.active &gt; span.num'</span>))).get_attribute(<span class="string">"innerHTML"</span>))</span><br><span class="line">        <span class="keyword">if</span> activate_page_num &lt; all_page_num:</span><br><span class="line">            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.next a.J_Ajax.num.icon-tag'</span>))).click()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.isEND = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        self.next_page()</span><br></pre></td></tr></table></figure><h3 id="解析页面">解析页面</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        doc = pq(self.browser.page_source)</span><br><span class="line">        items = doc(<span class="string">'#mainsrp-itemlist .items .item'</span>).items()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            product = [&#123;</span><br><span class="line">                <span class="string">"image"</span>: item.find(<span class="string">'.pic .img'</span>).attr(<span class="string">'data-src'</span>),  <span class="comment"># 图片地址</span></span><br><span class="line">                <span class="string">"price"</span>: item.find(<span class="string">'.price'</span>).text(),  <span class="comment"># 价格</span></span><br><span class="line">                <span class="string">"deal"</span>: item.find(<span class="string">'.deal-cnt'</span>).text(),  <span class="comment"># 购买人次</span></span><br><span class="line">                <span class="string">"title"</span>: item.find(<span class="string">'.title'</span>).text(),  <span class="comment"># 标题</span></span><br><span class="line">                <span class="string">"shop"</span>: item.find(<span class="string">'.shop'</span>).text(),  <span class="comment"># 店铺</span></span><br><span class="line">                <span class="string">"location"</span>: item.find(<span class="string">'.location'</span>).text(),  <span class="comment"># 店铺地址</span></span><br><span class="line">            &#125;]</span><br><span class="line">            <span class="comment"># print(product)</span></span><br><span class="line">            self.data.extend(product)</span><br><span class="line">        self.next_page()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        self.parse()</span><br></pre></td></tr></table></figure><h3 id="持久化储存至MongoDB">持久化储存至MongoDB</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        print(<span class="string">"储存到MongoDB成功"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"储存到MongoDB失败"</span>)</span><br></pre></td></tr></table></figure><h3 id="整合所有代码">整合所有代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taobao</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, trade_name)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEND = <span class="literal">False</span>    <span class="comment"># 判断是否为最后一页</span></span><br><span class="line">        self.trade_name = trade_name    <span class="comment"># 要搜索的商品名及MongoDB表名</span></span><br><span class="line">        self.url = <span class="string">'https://login.taobao.com/member/login.jhtml'</span></span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># options.add_experimental_option("prefs", &#123;"profile.managed_default_content_settings.images": 2&#125;)  # 不加载图片,加快访问速度</span></span><br><span class="line">        options.add_experimental_option(<span class="string">'excludeSwitches'</span>, [<span class="string">'enable-automation'</span>])  <span class="comment"># 设置为开发者模式，防止被各大网站识别出来使用了Selenium</span></span><br><span class="line">        self.browser = webdriver.Chrome(options=options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)  <span class="comment"># 超时时长为10s</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client[<span class="string">'taobao'</span>]</span><br><span class="line">        self.collection = db[self.trade_name]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, weibo_username, weibo_password)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用微博登录，避免验证</span></span><br><span class="line"><span class="string">        :param weibo_username: 微博用户名</span></span><br><span class="line"><span class="string">        :param weibo_password: 微博密码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.PARTIAL_LINK_TEXT, <span class="string">'微博登录'</span>))).click()    <span class="comment"># 使用微博登录</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.username &gt; .W_input'</span>))).send_keys(weibo_username)    <span class="comment"># 输入账号</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.password &gt; .W_input'</span>))).send_keys(weibo_password)    <span class="comment"># 输入密码</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@class="btn_tip"]/a/span'</span>))).click()    <span class="comment"># 点击登录</span></span><br><span class="line">        <span class="comment"># 打印淘宝会员昵称</span></span><br><span class="line">        taobao_user = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.site-nav-user &gt; a.site-nav-login-info-nick'</span>)))</span><br><span class="line">        print(taobao_user.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, kw)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param kw: 搜索关键字</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>))).send_keys(kw)</span><br><span class="line">        self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.search-button &gt; button.btn-search.tb-bg'</span>))).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下一页</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_page</span><span class="params">(self, page=None)</span>:</span>    <span class="comment"># 如果不指定页码，则抓取全部</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> page:</span><br><span class="line">                all_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.total'</span>))).get_attribute(<span class="string">"innerHTML"</span>).split()[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                all_page_num = page</span><br><span class="line">            activate_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.active &gt; span.num'</span>))).get_attribute(<span class="string">"innerHTML"</span>))</span><br><span class="line">            <span class="keyword">if</span> activate_page_num &lt; all_page_num:</span><br><span class="line">                self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.next a.J_Ajax.num.icon-tag'</span>))).click()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.isEND = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            self.next_page()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析页面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            doc = pq(self.browser.page_source)</span><br><span class="line">            items = doc(<span class="string">'#mainsrp-itemlist .items .item'</span>).items()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                product = [&#123;</span><br><span class="line">                    <span class="string">"image"</span>: item.find(<span class="string">'.pic .img'</span>).attr(<span class="string">'data-src'</span>),  <span class="comment"># 图片地址</span></span><br><span class="line">                    <span class="string">"price"</span>: item.find(<span class="string">'.price'</span>).text(),  <span class="comment"># 价格</span></span><br><span class="line">                    <span class="string">"deal"</span>: item.find(<span class="string">'.deal-cnt'</span>).text(),  <span class="comment"># 购买人次</span></span><br><span class="line">                    <span class="string">"title"</span>: item.find(<span class="string">'.title'</span>).text(),  <span class="comment"># 标题</span></span><br><span class="line">                    <span class="string">"shop"</span>: item.find(<span class="string">'.shop'</span>).text(),  <span class="comment"># 店铺</span></span><br><span class="line">                    <span class="string">"location"</span>: item.find(<span class="string">'.location'</span>).text(),  <span class="comment"># 店铺地址</span></span><br><span class="line">                &#125;]</span><br><span class="line">                <span class="comment"># print(product)</span></span><br><span class="line">                self.data.extend(product)</span><br><span class="line">            self.next_page()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            self.parse()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 持久化储存至MongoDB</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">                <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            print(<span class="string">"储存到MongoDB成功"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">"储存到MongoDB失败"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.search(self.trade_name)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.isEND:    <span class="comment"># 循环条件 存在下一页</span></span><br><span class="line">            self.parse()</span><br><span class="line">        self.save_to_mongo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    weibo_username = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博账号</span></span><br><span class="line">    weibo_password = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博密码</span></span><br><span class="line">    trade_name = <span class="string">'梅艳芳'</span>    <span class="comment"># 改成你想要抓取的商品</span></span><br><span class="line">    taobao = Taobao(trade_name)</span><br><span class="line">    taobao.login(weibo_username, weibo_password)</span><br><span class="line">    taobao.main()</span><br></pre></td></tr></table></figure><h2 id="效果展示">效果展示</h2><h3 id="爬取效果">爬取效果</h3><p><img src="/posts/fc939d6e/taobaoend.gif" alt></p><h3 id="结果展示">结果展示</h3><p><img src="/posts/fc939d6e/result.png" alt></p><h2 id="写在最后">写在最后</h2><p>  梅艳芳：她，不是一两句话就能说清楚的。很多90后应该都不知道这个名字了。很多次我问我不同的朋友：你知道梅艳芳吗？他们的回答出奇的一致，梅艳芳？你说的是梅兰芳吧！我抓取了关于她的所有商品，很多都是0人付款。或许是时代在前进，属于她的时代已经往事如烟，随风飘散，人们渐渐将她遗忘。但是，我写这段话的时候她的那首《梦里共醉》仿佛依然萦绕在我的耳畔。</p><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考，不得用于商业用途。</b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;The future has not been written. There is no fate but what we make for ourselves. ——《终结者3》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;一切未成定局，未来等你去开创。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="http://mrxiuxing.cn/tags/Selenium/"/>
    
      <category term="pyquery" scheme="http://mrxiuxing.cn/tags/pyquery/"/>
    
      <category term="MongoDB" scheme="http://mrxiuxing.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>响应状态码及其详细描述</title>
    <link href="http://mrxiuxing.cn/posts/867e7a3d.html"/>
    <id>http://mrxiuxing.cn/posts/867e7a3d.html</id>
    <published>2020-03-19T04:04:46.000Z</published>
    <updated>2020-03-19T04:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>We all make our choices. The hard part is living with them. ——《妙笔生花》</center></strong></em><br><em><strong><center>人的一生要做出很多选择，但是最难得是带着自己的选择去生活下去。</center></strong></em></p><a id="more"></a><table><thead><tr><th style="text-align:center">状态码10x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td>继续</td><td>客户端应继续提出请求。服务器已收到部分请求，正等待其余部分</td></tr><tr><td style="text-align:center">101</td><td>切换协议</td><td>服务器根据客户端的请求切换协议。只能向上请求更高级的协议，如切换到HTTP的新版本协议</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码20x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td>请求成功</td><td>服务器已经处理了请求</td></tr><tr><td style="text-align:center">201</td><td>已创建</td><td>请求成功，并且服务器创建了新的资源</td></tr><tr><td style="text-align:center">202</td><td>已接受</td><td>服务器已接受请求，但并未处理</td></tr><tr><td style="text-align:center">203</td><td>非授权信息</td><td>请求成功。但返回的数据不在原始服务器，可能来自另一个数据源</td></tr><tr><td style="text-align:center">204</td><td>已创建</td><td>请求成功，并且服务器创建了新的资源</td></tr><tr><td style="text-align:center">205</td><td>无内容</td><td>服务器成功处理，但未返回任何内容</td></tr><tr><td style="text-align:center">206</td><td>部分内容</td><td>服务器成功处理了部分请求</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码30x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">300</td><td>多种选择</td><td>请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端(如浏览器)选择</td></tr><tr><td style="text-align:center">301</td><td>永久移动</td><td>请求的资源已经永久移动到新位置，即永久重定向</td></tr><tr><td style="text-align:center">302</td><td>临时移动</td><td>请求的网页暂时跳转到其他页面，即临时重定向</td></tr><tr><td style="text-align:center">303</td><td>查看其他地址</td><td>与301类似。使用GET或POST请求查看</td></tr><tr><td style="text-align:center">304</td><td>未修改</td><td>此次请求的资源未发生修改，继续使用上次的资源</td></tr><tr><td style="text-align:center">305</td><td>使用代理</td><td>所请求的资源必须通过代理访问</td></tr><tr><td style="text-align:center">306</td><td>未使用</td><td>已经被废弃的HTTP状态码</td></tr><tr><td style="text-align:center">307</td><td>临时重定向</td><td>与302类似。使用GET请求重定向</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码4xx</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">400</td><td>错误请求</td><td>服务器无法解析该请求</td></tr><tr><td style="text-align:center">401</td><td>未授权</td><td>请求要求认证用户的身份</td></tr><tr><td style="text-align:center">402</td><td>保留</td><td>在未来可能使用的状态码</td></tr><tr><td style="text-align:center">403</td><td>禁止访问</td><td>服务器理解客户端的请求，但是拒绝执行该请求</td></tr><tr><td style="text-align:center">404</td><td>未找到</td><td>服务器找不到请求的资源</td></tr><tr><td style="text-align:center">405</td><td>方法禁用</td><td>服务器禁用了请求中指定的方法</td></tr><tr><td style="text-align:center">406</td><td>不接收</td><td>无法使用请求的内容响应对应资源</td></tr><tr><td style="text-align:center">407</td><td>需要代理授权</td><td>请求要求代理的身份认证，与401类似，但请求者应使用代理进行授权</td></tr><tr><td style="text-align:center">408</td><td>请求超时</td><td>服务器请求超时</td></tr><tr><td style="text-align:center">409</td><td>冲突</td><td>服务器未返回客户端的PUT请求可能会返回此状态码，服务器处理请求时发生了冲突</td></tr><tr><td style="text-align:center">410</td><td>已删除</td><td>请求的资源已永久删除</td></tr><tr><td style="text-align:center">411</td><td>需要有效长度</td><td>服务器不接受不含有有效长度字段的请求</td></tr><tr><td style="text-align:center">412</td><td>未满足前提条件</td><td>客户端请求信息的先决条件错误</td></tr><tr><td style="text-align:center">413</td><td>请求实体过大</td><td>请求实体过大，超出服务器处理能力</td></tr><tr><td style="text-align:center">414</td><td>请求URL过长</td><td>请求网址过长，服务器无法处理</td></tr><tr><td style="text-align:center">415</td><td>不支持类型</td><td>请求格式不被请求页面支持</td></tr><tr><td style="text-align:center">416</td><td>请求范围不符</td><td>客户端请求的范围无效</td></tr><tr><td style="text-align:center">417</td><td>未满足期望值</td><td>服务器无法满足Except的请求头信息</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码50x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">500</td><td>服务器内部错误</td><td>服务器内部错误，无法完成请求</td></tr><tr><td style="text-align:center">501</td><td>未实现</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td style="text-align:center">502</td><td>网关错误</td><td>服务器作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到一个无效的请求</td></tr><tr><td style="text-align:center">503</td><td>服务不可用</td><td>由于超载或者系统维护，服务器暂时无法处理客户端的请求</td></tr><tr><td style="text-align:center">504</td><td>网关超时</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td style="text-align:center">505</td><td>HTTP版本不支持</td><td>服务器不支持请求的HTTP版本，无法完成处理</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;We all make our choices. The hard part is living with them. ——《妙笔生花》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;人的一生要做出很多选择，但是最难得是带着自己的选择去生活下去。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://mrxiuxing.cn/categories/HTTP/"/>
    
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="HTTP" scheme="http://mrxiuxing.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器之函数运行时间</title>
    <link href="http://mrxiuxing.cn/posts/6670c259.html"/>
    <id>http://mrxiuxing.cn/posts/6670c259.html</id>
    <published>2020-03-17T09:16:59.000Z</published>
    <updated>2020-03-17T09:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>If you put your mind to it, you can accomplish anything. ——《回到未来》</center></strong></em><br><em><strong><center>有志者，事竟成。</center></strong></em></p><a id="more"></a><h2 id="目标">目标</h2><p>  在《requests中文乱码问题》这篇文章中提到了两种解决方式，这两种方式究竟哪种方式是值得推荐的那？一般来说抓取网页与持久化储存是最耗时的，要想提高抓取效率就得从这两方面入手。那我们就从时间入手，在不改变原代码的情况下，可以使用装饰器来运算两种方式运行所需要的时间。</p><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行时间装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_time</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start_ts = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end_ts = time.time()</span><br><span class="line">        second = end_ts - start_ts</span><br><span class="line">        <span class="keyword">return</span> second</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@run_time</span></span><br><span class="line"><span class="comment"># 手动指定编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@run_time</span></span><br><span class="line"><span class="comment"># 使用apparent_encoding根据网页内容分析编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml2</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 n 次平均时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_runs_times</span><span class="params">(func,url, times=<span class="number">10</span>)</span>:</span></span><br><span class="line">    runtime_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(times):</span><br><span class="line">        runtime = func(url)</span><br><span class="line">        runtime_list.append(runtime)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;func.__name__&#125;</span> runs <span class="subst">&#123;times&#125;</span> times：<span class="subst">&#123;sum(runtime_list) / times&#125;</span>s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn/'</span></span><br><span class="line">get_runs_times(getHtml,url, <span class="number">100</span>)</span><br><span class="line">get_runs_times(getHtml2,url, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;getHtml runs 100 times：0.19394637107849122s</span><br><span class="line">&gt;&gt;&gt;getHtml2 runs 100 times：0.46304878234863284s</span><br></pre></td></tr></table></figure><h2 id="结论">结论</h2><p>  答案很明显手动指定编码格式运行100次的平均时间更少，甚至连使用apparent_encoding根据网页内容分析编码方式的1/2都不到。手动指定编码格式只需要你查看网页源代码头部的charset就可以省下一半时间，所以我的建议是：如果出现中文乱码，手动指定编码格式即可。</p><h2 id="其他">其他</h2><p>  细心的小伙伴应该会发现在时间装饰器中，使用了@wraps(func)，它是使用 from functools import wraps 导入的，那么它有什么作用那？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。</span><br></pre></td></tr></table></figure><p>  这可以让我们在装饰器里面访问在装饰之前的函数的属性。例如在计算运行n次平均时间的函数中我们获取了函数的__name__ 属性,这也就使得这个函数更加通用了。如果去掉装饰器中的@wraps(func)这一句，那么在计算运行n次平均时间的函数中__name__ 属性获取到的就是wrapper了。</p><p>  此外在计算运行n次平均时间的函数中我们还使用了f&quot;{}{}{}&quot;，也就是f-string，亦称为格式化字符串常量(formatted string literals),是Python3.6新引入的一种字符串格式化方法。f-string在形式上是以 f 或 F 修饰符引领的字符串（f’xxx’或 F’xxx’），以大括号 {} 标明被替换的字段；f-string在本质上并不是字符串常量，而是一个在运行时运算求值的表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">f'<span class="subst">&#123;func.__name__&#125;</span> runs <span class="subst">&#123;times&#125;</span> times：<span class="subst">&#123;sum(runtime_list) / times&#125;</span>s'</span>)</span><br></pre></td></tr></table></figure><p>  在上面的例子中我们使用f-string格式化了函数属性，传递了变量，甚至可直接在其中进行运算。它还有很多有趣的用法，大家快去发掘吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;If you put your mind to it, you can accomplish anything. ——《回到未来》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;有志者，事竟成。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://mrxiuxing.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>requests中文乱码问题</title>
    <link href="http://mrxiuxing.cn/posts/d166c216.html"/>
    <id>http://mrxiuxing.cn/posts/d166c216.html</id>
    <published>2020-03-17T06:49:52.000Z</published>
    <updated>2020-03-17T06:49:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Talent is luck. The important thing in life is courage. ——《曼哈顿》</center></strong></em><br><em><strong><center>有天赋是运气，生活中更为重要的是要有勇气。</center></strong></em></p><a id="more"></a><h2 id="发现问题">发现问题</h2><p>在使用requests.get()去抓取网页时，发现中文乱码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>大概是这个样子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"site-state"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives/"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>æ¥å¿<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-categories"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/categories/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>åç±»<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tags/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>æ ç­¾<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="问题原因">问题原因</h2><p>  当调用 Response.text 方法时，Requests首先在Response Headers检测是否存在指定的编码方式，如果不存在，则会使用 charade 来尝试猜测编码方式。在请求的网站中，如果Response Headers中的Content-Type只指定了Type，没有指定charset类型，并且 Content-Type 头部字段包含 text 的值时Requests才不去猜测编码方式。在这种情况下，默认字符集为ISO-8859-1，也就出现了中文乱码现象，这时就需要我们去指定编码方式。</p><h2 id="解决问题">解决问题</h2><h3 id="一-手动指定编码">一.手动指定编码</h3><p>  可以通过查看网页源代码中head下的charset=&quot;XXX&quot;来确定网页编码，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, maximum-scale&#x3D;2&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;theme-color&quot; content&#x3D;&quot;#222&quot;&gt;</span><br></pre></td></tr></table></figure><p>  很容易就发现网页的编码方式是UTF-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>  问题解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"site-state"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives/"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>日志<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-categories"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/categories/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tags/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-apparent-encoding根据网页内容分析编码方式">二.apparent_encoding根据网页内容分析编码方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>  问题同样解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"site-state"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives/"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>日志<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-categories"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/categories/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tags/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p><b>PS: 这两种方式究竟哪种才是值得推荐的那？<br>欲知结果如何，请看下篇文章<a href="https://salling.com.cn/posts/6670c259.html" target="_blank" rel="noopener">《Python装饰器之函数运行时间》</a></b></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Talent is luck. The important thing in life is courage. ——《曼哈顿》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;有天赋是运气，生活中更为重要的是要有勇气。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="http://mrxiuxing.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="http://mrxiuxing.cn/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>Xpath解析本地Html文件</title>
    <link href="http://mrxiuxing.cn/posts/86d537dd.html"/>
    <id>http://mrxiuxing.cn/posts/86d537dd.html</id>
    <published>2020-03-16T07:34:05.000Z</published>
    <updated>2020-03-16T07:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>We work in the darkness to serve the light. ——《刺客信条》</center></strong></em><br><em><strong><center>我们鞠躬于黑暗，却向往着光明。</center></strong></em></p><a id="more"></a><h2 id="问题">问题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">提取如下html结构中的信息</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>坤坤<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>human<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>24<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>伊娃<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>机器人<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>生产日期：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2019-01-01<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>豆豆<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>动物<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>晗晗<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>人类<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">并生成如下数据结构：</span><br><span class="line">&#123;</span><br><span class="line">  'human': [&#123; age: 24, name: '坤坤' &#125;,&#123; age: 21, name: '晗晗' &#125;],</span><br><span class="line">  'robot': [&#123; dateTime: '2019-01-01', name: '伊娃' &#125;],</span><br><span class="line">  'animal': [&#123; age: 3, name: '豆豆' &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析">解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">"index.html"</span>,<span class="string">"rb"</span>)</span><br><span class="line">content=f.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">tree=etree.HTML(content)</span><br><span class="line">content = &#123;&#125;</span><br><span class="line">human = []</span><br><span class="line">robot = []</span><br><span class="line">animal = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tree.xpath(<span class="string">'//div/div'</span>):</span><br><span class="line">    name = item.xpath(<span class="string">'./p[1]/span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    label = item.xpath(<span class="string">'./p[2]/span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    age = item.xpath(<span class="string">'./p[3]/span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'human'</span> <span class="keyword">in</span> label <span class="keyword">or</span> <span class="string">'人类'</span> <span class="keyword">in</span> label:</span><br><span class="line">        human.append(&#123;<span class="string">'age'</span>:age, <span class="string">'name'</span>:name&#125;)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'机器人'</span> <span class="keyword">in</span> label:</span><br><span class="line">        robot.append(&#123;<span class="string">'dataTime'</span>:age, <span class="string">'name'</span>:name&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        animal.append(&#123;<span class="string">'age'</span>: age, <span class="string">'name'</span>: name&#125;)</span><br><span class="line">    content[<span class="string">'human'</span>] = human</span><br><span class="line">    content[<span class="string">'robot'</span>] = robot</span><br><span class="line">    content[<span class="string">'animal'</span>] = animal</span><br><span class="line"></span><br><span class="line">res = json.dumps(content, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&#123;</span><br><span class="line">    "human": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"24"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"坤坤"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"21"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"晗晗"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "robot": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"dataTime"</span>: <span class="string">"2019-01-01"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"伊娃"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "animal": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"3"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"豆豆"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">open 读取本地HTML并进行编码</span><br><span class="line">etree.HTML() 构造XPath解析对象</span><br><span class="line">利用xpath提取需要的信息</span><br><span class="line">json.dumps() 将字典转为json对象，indent 设置缩进字符个数，ensure_ascii&#x3D;False 中文不被转为unicode</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;We work in the darkness to serve the light. ——《刺客信条》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;我们鞠躬于黑暗，却向往着光明。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="xpath" scheme="http://mrxiuxing.cn/categories/xpath/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="XPath" scheme="http://mrxiuxing.cn/tags/XPath/"/>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>计算并打印出每个字符串中排列在任意x前面的所有y的个数</title>
    <link href="http://mrxiuxing.cn/posts/21e58870.html"/>
    <id>http://mrxiuxing.cn/posts/21e58870.html</id>
    <published>2020-03-16T07:34:05.000Z</published>
    <updated>2020-03-16T07:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>Victory belongs to those that believe in it the most， and believe in it the longest. ——《珍珠港》</center></strong></em><br><em><strong><center>胜利属于那些信念坚定、永不动摇的人。</center></strong></em></p><a id="more"></a><h2 id="问题">问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有如下数组，请计算并打印出每个字符串中排列在任意x前面的所有y的个数。 </span><br><span class="line">arr &#x3D; [&#39;xxyyxyyyyyxxx&#39;, &#39;yyxxxxy&#39;, &#39;xyyyxxyx&#39;, &#39;xxxx&#39;, &#39;xxxyyy&#39;]</span><br></pre></td></tr></table></figure><h2 id="解析">解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_s</span><span class="params">(s_list)</span>:</span></span><br><span class="line">    res_list = []</span><br><span class="line">    pattern = re.compile(<span class="string">r'(y+)x'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s_list:</span><br><span class="line">        res = pattern.findall(i)</span><br><span class="line">        res_list.append(len(<span class="string">''</span>.join(res)))</span><br><span class="line">    <span class="keyword">return</span> res_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [<span class="string">'xxyyxyyyyyxxx'</span>, <span class="string">'yyxxxxy'</span>, <span class="string">'xyyyxxyx'</span>, <span class="string">'xxxx'</span>, <span class="string">'xxxyyy'</span>]</span><br><span class="line">print(change_s(arr))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用正则匹配字符串中所有以x结尾的任意y字符串。</span><br><span class="line">compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象。</span><br><span class="line">findall 在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</span><br><span class="line">将每个字符串中符合规则的y字符串列表拼接成字符串，计算每个字符串y的个数并添加至列表中，最后返回列表。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;Victory belongs to those that believe in it the most， and believe in it the longest. ——《珍珠港》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;胜利属于那些信念坚定、永不动摇的人。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
      <category term="面试题" scheme="http://mrxiuxing.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Python高阶函数与lambda表达式</title>
    <link href="http://mrxiuxing.cn/posts/6f18f638.html"/>
    <id>http://mrxiuxing.cn/posts/6f18f638.html</id>
    <published>2020-03-08T10:18:50.000Z</published>
    <updated>2020-03-08T10:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>It is okay to fail, as long as you keep trying! ——《科学怪狗》</center></strong></em><br><em><strong><center>只要你坚持尝试，失败也没有关系！</center></strong></em></p><a id="more"></a><h2 id="lambda表达式">lambda表达式</h2><p>  <b>为了避免创建一次性的辅助性函数</b></p><h3 id="语法">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda &lt;argument&gt;, &lt;expression&gt;</span><br></pre></td></tr></table></figure><h2 id="map">map()</h2><p>  <b>根据提供的函数对指定序列做映射。返回包含每次函数返回值的新列表。</b></p><h3 id="语法-2">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br></pre></td></tr></table></figure><h3 id="将一个包含整数的列表转换为这些整数字符串的另一个列表">将一个包含整数的列表转换为这些整数字符串的另一个列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for循环实现</span></span><br><span class="line">oldList = list(range(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">newList = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> oldList:</span><br><span class="line">    newList.append(str(num))</span><br><span class="line">print(newList)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map实现</span></span><br><span class="line">oldList = list(range(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">newList = list(map(str, oldList))</span><br><span class="line">print(newList)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><h3 id="计算平方和">计算平方和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map + 函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line">res = list(map(square, list(range(<span class="number">1</span>, <span class="number">5</span>))))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map + lambda实现</span></span><br><span class="line">res = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, list(range(<span class="number">1</span>, <span class="number">5</span>))))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><h2 id="filter">filter()</h2><p>  <b>过滤掉序列中不符合条件的元素，返回由符合条件元素组成的新列表。返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换。</b></p><h3 id="语法-3">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(function, iterable)</span><br></pre></td></tr></table></figure><h3 id="过滤出列表中的所有奇数">过滤出列表中的所有奇数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter + 函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">tmplist = filter(is_odd, list(range(<span class="number">1</span>, <span class="number">11</span>)))</span><br><span class="line">newlist = list(tmplist)</span><br><span class="line">print(newlist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter + lambda实现</span></span><br><span class="line">tmplist = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span>, list(range(<span class="number">1</span>, <span class="number">11</span>)))</span><br><span class="line">newlist = list(tmplist)</span><br><span class="line">print(newlist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="reduce">reduce()</h2><p>  <b>对参数序列中元素进行累积。函数将一个数据集合（列表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</b></p><h3 id="语法-4">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(function, iterable[, initializer])</span><br></pre></td></tr></table></figure><h3 id="计算一个整数列表的和">计算一个整数列表的和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reduce + 函数实现</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">res = reduce(add, list(range(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reduce + lambda实现</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">res = reduce(<span class="keyword">lambda</span> x, y: x+y, list(range(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="number">10</span></span><br></pre></td></tr></table></figure><p><b>参考文章：</b><br><a href="https://www.runoob.com/python/python-func-map.html" target="_blank" rel="noopener">Python map() 函数 | 菜鸟教程</a><br><a href="https://www.runoob.com/python/python-func-filter.html" target="_blank" rel="noopener">Python filter() 函数 | 菜鸟教程</a><br><a href="https://www.runoob.com/python/python-func-reduce.html" target="_blank" rel="noopener">Python reduce() 函数 | 菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;It is okay to fail, as long as you keep trying! ——《科学怪狗》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;只要你坚持尝试，失败也没有关系！&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://mrxiuxing.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://mrxiuxing.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令(五) ps：显示当前进程状态</title>
    <link href="http://mrxiuxing.cn/posts/71fe7104.html"/>
    <id>http://mrxiuxing.cn/posts/71fe7104.html</id>
    <published>2020-03-07T06:53:18.000Z</published>
    <updated>2020-03-07T06:53:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>The only thing that matters is what you believe. ——《达芬奇密码》</center></strong></em><br><em><strong><center>重要的是你内心的信仰。</center></strong></em></p><a id="more"></a><h2 id="语法">语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [options] [--help]</span><br></pre></td></tr></table></figure><h2 id="参数">参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-A 列出所有的行程</span><br><span class="line">-w 显示加宽可以显示较多的资讯</span><br><span class="line">-au 显示较详细的资讯</span><br><span class="line">-aux 显示所有包含其他使用者的行程</span><br><span class="line">au(x) 输出格式 :</span><br><span class="line">        USER    PID     %CPU    %MEM    VSZ   RSS       TTY      STAT START   TIME  COMMAND</span><br><span class="line">        USER：行程拥有者</span><br><span class="line">        PID：pid</span><br><span class="line">        %CPU：占用的 CPU 使用率</span><br><span class="line">        %MEM：占用的物理内存使用率</span><br><span class="line">        VSZ：占用的虚拟内存的大小</span><br><span class="line">        RSS：占用的固定内存的大小</span><br><span class="line">        TTY：终端的次要装置号码 (minor device number of tty)</span><br><span class="line">        STAT：该行程目前的状态，主要状态有:</span><br><span class="line">                D：无法中断的休眠状态 (通常 IO 的进程)</span><br><span class="line">                R：正在执行中</span><br><span class="line">                S：静止状态</span><br><span class="line">                s：包含子进程</span><br><span class="line">                T：暂停执行</span><br><span class="line">                Z：不存在但暂时无法消除</span><br><span class="line">                W：没有足够的记忆体分页可分配</span><br><span class="line">                &lt;：高优先序的行程</span><br><span class="line">                N：低优先序的行程</span><br><span class="line">                L：将页面锁定到内存中（用于实时和自定义IO）</span><br><span class="line">                l：多线程（使用CLONE_THREAD,类似NPTL线程）</span><br><span class="line">                +：位于后台的进程组</span><br><span class="line">        START：行程开始时间</span><br><span class="line">        TIME：执行的时间</span><br><span class="line">        COMMAND：所执行的指令</span><br></pre></td></tr></table></figure><h2 id="实例">实例</h2><h3 id="查看所有进程信息">查看所有进程信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -A</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_A.png" alt></p><h3 id="查看指定用户信息">查看指定用户信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pa -u xiuxing</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_u_xiuxing.png" alt></p><h3 id="查看全格式的全部进程">查看全格式的全部进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_ef.png" alt></p><h3 id="以树状结构显示进程">以树状结构显示进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -axjf</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_axjf.png" alt></p><h3 id="配合grep查看某进程状态">配合grep查看某进程状态</h3><p>  查看MySQL进程状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep mysql</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_aux_grep_mysql.png" alt></p><h3 id="将所有进程信息输出到指定文件中">将所有进程信息输出到指定文件中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux &gt; ps01.txt      # 将所有进程信息输出到ps01.txt文件中</span><br><span class="line">head -n 10 ps01.txt     # 将ps01.txt文件的前10行输出</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_ps01.png" alt></p><p><b>参考文章：</b><br><a href="https://www.runoob.com/linux/linux-comm-ps.html" target="_blank" rel="noopener">Linux ps命令 | 菜鸟教程</a><br><a href="http://blog.chinaunix.net/uid-8695538-id-2017726.html" target="_blank" rel="noopener">Linux下ps aux命令中STAT的参数含义</a><br><a href="https://www.cnblogs.com/xiangtingshen/p/10920236.html" target="_blank" rel="noopener">linux下ps命令-狂奔</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;The only thing that matters is what you believe. ——《达芬奇密码》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;重要的是你内心的信仰。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://mrxiuxing.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://mrxiuxing.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04挂载exfat格式的U盘</title>
    <link href="http://mrxiuxing.cn/posts/d45d30f8.html"/>
    <id>http://mrxiuxing.cn/posts/d45d30f8.html</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><center>In order to be brave, we got to be a little scared. ——《摩天营救》</center></strong></em><br><em><strong><center>感到害怕才能学会勇敢。</center></strong></em></p><a id="more"></a><h2 id="安装支持exfat的软件">安装支持exfat的软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install exfat-fuse</span><br></pre></td></tr></table></figure><h2 id="重启">重启</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure><p>  <b>在重启的时候就可以插上U盘，我的就是重启之后直接就挂载上了，并且显示在桌面上。</b>如果重启之后没有直接挂载上，请执行下面的步骤。</p><h2 id="列出磁盘信息">列出磁盘信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><p><img src="/posts/d45d30f8/sudofdisk_l.png" alt><br>  找到你要挂载的U盘</p><p><img src="/posts/d45d30f8/yours_u.png" alt></p><h2 id="挂载">挂载</h2><h3 id="创建挂载目录">创建挂载目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;mnt&#x2F;USB</span><br></pre></td></tr></table></figure><h3 id="执行挂载命令">执行挂载命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount &#x2F;dev&#x2F;sdc &#x2F;mnt&#x2F;USB</span><br></pre></td></tr></table></figure><p><img src="/posts/d45d30f8/sudomount.png" alt><br>  挂载完成之后，U盘里的文件就可以在/mnt/USB目录找到了。</p><h2 id="卸载">卸载</h2><p>  先执行下面的命令卸载U盘，再将其拔出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;USB</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;center&gt;In order to be brave, we got to be a little scared. ——《摩天营救》&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;&lt;center&gt;感到害怕才能学会勇敢。&lt;/center&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="http://mrxiuxing.cn/categories/Ubuntu/"/>
    
    
      <category term="Linux" scheme="http://mrxiuxing.cn/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://mrxiuxing.cn/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
