<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>模拟登录淘宝并抓取指定商品(Selenium + pyquery + MongoDB)</title>
      <link href="/posts/fc939d6e.html"/>
      <url>/posts/fc939d6e.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>The future has not been written. There is no fate but what we make for ourselves. ——《终结者3》</center></strong></em><br><em><strong><center>一切未成定局，未来等你去开创。</center></strong></em></p><a id="more"></a><h1><strong><center>模拟登录淘宝并抓取指定商品(Selenium + pyquery + MongoDB)</center></strong></h1><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考</b></p><h2 id="使用微博账号登录淘宝">使用微博账号登录淘宝</h2><p>  目前的淘宝，如果未登录是不能搜索商品的，如果使用淘宝的账号密码需要验证验证码，然后就想着用其他账号登录淘宝–微博账号。使用微博账号登录淘宝需要先绑定淘宝账号。步骤：登录淘宝 —— 点击你的用户名 —— 点击账号管理 —— 点击微博绑定设置，然后按照提示一步步来就好。<br><img src="/posts/fc939d6e/weibosetting.png" alt></p><h3 id="登录流程">登录流程</h3><p><img src="/posts/fc939d6e/weiboliucheng.png" alt></p><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taobao</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://login.taobao.com/member/login.jhtml'</span></span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># options.add_experimental_option("prefs", &#123;"profile.managed_default_content_settings.images": 2&#125;)  # 不加载图片,加快访问速度</span></span><br><span class="line">        options.add_experimental_option(<span class="string">'excludeSwitches'</span>, [<span class="string">'enable-automation'</span>])  <span class="comment"># 设置为开发者模式，防止被各大网站识别出来使用了Selenium</span></span><br><span class="line">        self.browser = webdriver.Chrome(options=options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)  <span class="comment"># 超时时长为10s</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, weibo_username, weibo_password)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用微博登录，避免验证</span></span><br><span class="line"><span class="string">        :param weibo_username: 微博用户名</span></span><br><span class="line"><span class="string">        :param weibo_password: 微博密码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.PARTIAL_LINK_TEXT, <span class="string">'微博登录'</span>))).click()    <span class="comment"># 使用微博登录</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.username &gt; .W_input'</span>))).send_keys(weibo_username)    <span class="comment"># 输入账号</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.password &gt; .W_input'</span>))).send_keys(weibo_password)    <span class="comment"># 输入密码</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@class="btn_tip"]/a/span'</span>))).click()    <span class="comment"># 点击登录</span></span><br><span class="line">        <span class="comment"># 打印淘宝会员昵称</span></span><br><span class="line">        taobao_user = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.site-nav-user &gt; a.site-nav-login-info-nick'</span>)))</span><br><span class="line">        print(taobao_user.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    weibo_username = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博账号</span></span><br><span class="line">    weibo_password = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博密码</span></span><br><span class="line">    taobao = Taobao()</span><br><span class="line">    taobao.login(weibo_username, weibo_password)</span><br></pre></td></tr></table></figure><h2 id="抓取商品">抓取商品</h2><p>  使用selenium模拟登录后是跳转到了淘宝首页，我们可以继续模拟搜索商品以及翻页行为。</p><h3 id="搜索商品">搜索商品</h3><p>  在搜索框输入商品名，点击搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, kw)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param kw: 商品名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>))).send_keys(kw)</span><br><span class="line">    self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.search-button &gt; button.btn-search.tb-bg'</span>))).click()</span><br></pre></td></tr></table></figure><h3 id="翻页行为">翻页行为</h3><p>  提取一共多少页all_page_num，提取当前页activate_page_num，如果activate_page_num小于all_page_num，模拟点击下一页，否则改变flag (isEND)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下一页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        all_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.total'</span>))).get_attribute(<span class="string">"innerHTML"</span>).split()[<span class="number">1</span>])</span><br><span class="line">        activate_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.active &gt; span.num'</span>))).get_attribute(<span class="string">"innerHTML"</span>))</span><br><span class="line">        <span class="keyword">if</span> activate_page_num &lt; all_page_num:</span><br><span class="line">            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.next a.J_Ajax.num.icon-tag'</span>))).click()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.isEND = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        self.next_page()</span><br></pre></td></tr></table></figure><h3 id="解析页面">解析页面</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        doc = pq(self.browser.page_source)</span><br><span class="line">        items = doc(<span class="string">'#mainsrp-itemlist .items .item'</span>).items()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            product = [&#123;</span><br><span class="line">                <span class="string">"image"</span>: item.find(<span class="string">'.pic .img'</span>).attr(<span class="string">'data-src'</span>),  <span class="comment"># 图片地址</span></span><br><span class="line">                <span class="string">"price"</span>: item.find(<span class="string">'.price'</span>).text(),  <span class="comment"># 价格</span></span><br><span class="line">                <span class="string">"deal"</span>: item.find(<span class="string">'.deal-cnt'</span>).text(),  <span class="comment"># 购买人次</span></span><br><span class="line">                <span class="string">"title"</span>: item.find(<span class="string">'.title'</span>).text(),  <span class="comment"># 标题</span></span><br><span class="line">                <span class="string">"shop"</span>: item.find(<span class="string">'.shop'</span>).text(),  <span class="comment"># 店铺</span></span><br><span class="line">                <span class="string">"location"</span>: item.find(<span class="string">'.location'</span>).text(),  <span class="comment"># 店铺地址</span></span><br><span class="line">            &#125;]</span><br><span class="line">            <span class="comment"># print(product)</span></span><br><span class="line">            self.data.extend(product)</span><br><span class="line">        self.next_page()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        self.parse()</span><br></pre></td></tr></table></figure><h3 id="持久化储存至MongoDB">持久化储存至MongoDB</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        print(<span class="string">"储存到MongoDB成功"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"储存到MongoDB失败"</span>)</span><br></pre></td></tr></table></figure><h2 id="整合所有代码">整合所有代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taobao</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, trade_name)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEND = <span class="literal">False</span>    <span class="comment"># 判断是否为最后一页</span></span><br><span class="line">        self.trade_name = trade_name    <span class="comment"># 要搜索的商品名及MongoDB表名</span></span><br><span class="line">        self.url = <span class="string">'https://login.taobao.com/member/login.jhtml'</span></span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># options.add_experimental_option("prefs", &#123;"profile.managed_default_content_settings.images": 2&#125;)  # 不加载图片,加快访问速度</span></span><br><span class="line">        options.add_experimental_option(<span class="string">'excludeSwitches'</span>, [<span class="string">'enable-automation'</span>])  <span class="comment"># 设置为开发者模式，防止被各大网站识别出来使用了Selenium</span></span><br><span class="line">        self.browser = webdriver.Chrome(options=options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)  <span class="comment"># 超时时长为10s</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client[<span class="string">'taobao'</span>]</span><br><span class="line">        self.collection = db[self.trade_name]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, weibo_username, weibo_password)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用微博登录，避免验证</span></span><br><span class="line"><span class="string">        :param weibo_username: 微博用户名</span></span><br><span class="line"><span class="string">        :param weibo_password: 微博密码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.PARTIAL_LINK_TEXT, <span class="string">'微博登录'</span>))).click()    <span class="comment"># 使用微博登录</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.username &gt; .W_input'</span>))).send_keys(weibo_username)    <span class="comment"># 输入账号</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.password &gt; .W_input'</span>))).send_keys(weibo_password)    <span class="comment"># 输入密码</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@class="btn_tip"]/a/span'</span>))).click()    <span class="comment"># 点击登录</span></span><br><span class="line">        <span class="comment"># 打印淘宝会员昵称</span></span><br><span class="line">        taobao_user = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.site-nav-user &gt; a.site-nav-login-info-nick'</span>)))</span><br><span class="line">        print(taobao_user.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, kw)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param kw: 搜索关键字</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>))).send_keys(kw)</span><br><span class="line">        self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.search-button &gt; button.btn-search.tb-bg'</span>))).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下一页</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_page</span><span class="params">(self, page=None)</span>:</span>    <span class="comment"># 如果不指定页码，则抓取全部</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> page:</span><br><span class="line">                all_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.total'</span>))).get_attribute(<span class="string">"innerHTML"</span>).split()[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                all_page_num = page</span><br><span class="line">            activate_page_num = int(self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.active &gt; span.num'</span>))).get_attribute(<span class="string">"innerHTML"</span>))</span><br><span class="line">            <span class="keyword">if</span> activate_page_num &lt; all_page_num:</span><br><span class="line">                self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'li.item.next a.J_Ajax.num.icon-tag'</span>))).click()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.isEND = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            self.next_page()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析页面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            doc = pq(self.browser.page_source)</span><br><span class="line">            items = doc(<span class="string">'#mainsrp-itemlist .items .item'</span>).items()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                product = [&#123;</span><br><span class="line">                    <span class="string">"image"</span>: item.find(<span class="string">'.pic .img'</span>).attr(<span class="string">'data-src'</span>),  <span class="comment"># 图片地址</span></span><br><span class="line">                    <span class="string">"price"</span>: item.find(<span class="string">'.price'</span>).text(),  <span class="comment"># 价格</span></span><br><span class="line">                    <span class="string">"deal"</span>: item.find(<span class="string">'.deal-cnt'</span>).text(),  <span class="comment"># 购买人次</span></span><br><span class="line">                    <span class="string">"title"</span>: item.find(<span class="string">'.title'</span>).text(),  <span class="comment"># 标题</span></span><br><span class="line">                    <span class="string">"shop"</span>: item.find(<span class="string">'.shop'</span>).text(),  <span class="comment"># 店铺</span></span><br><span class="line">                    <span class="string">"location"</span>: item.find(<span class="string">'.location'</span>).text(),  <span class="comment"># 店铺地址</span></span><br><span class="line">                &#125;]</span><br><span class="line">                <span class="comment"># print(product)</span></span><br><span class="line">                self.data.extend(product)</span><br><span class="line">            self.next_page()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            self.parse()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 持久化储存至MongoDB</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">                <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            print(<span class="string">"储存到MongoDB成功"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">"储存到MongoDB失败"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.search(self.trade_name)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.isEND:    <span class="comment"># 循环条件 存在下一页</span></span><br><span class="line">            self.parse()</span><br><span class="line">        self.save_to_mongo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    weibo_username = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博账号</span></span><br><span class="line">    weibo_password = <span class="string">"XXXX"</span>  <span class="comment"># 改成你的微博密码</span></span><br><span class="line">    trade_name = <span class="string">'梅艳芳'</span>    <span class="comment"># 改成你想要抓取的商品</span></span><br><span class="line">    taobao = Taobao(trade_name)</span><br><span class="line">    taobao.login(weibo_username, weibo_password)</span><br><span class="line">    taobao.main()</span><br></pre></td></tr></table></figure><h2 id="效果展示">效果展示</h2><h3 id="爬取效果">爬取效果</h3><p><img src="/posts/fc939d6e/taobaoend.gif" alt></p><h3 id="结果展示">结果展示</h3><p><img src="/posts/fc939d6e/result.png" alt></p><h2 id="写在最后">写在最后</h2><p>  梅艳芳：她，不是一两句话就能说清楚的。很多90后应该都不知道这个名字了。很多次我问我不同的朋友：你知道梅艳芳吗？他们的回答出奇的一致，梅艳芳？你说的是梅兰芳吧！我抓取了关于她的所有商品，很多都是0人付款。或许是时代在前进，属于她的时代已经往事如烟，随风飘散，人们渐渐将她遗忘。但是，我写这段话的时候她的那首《梦里共醉》仿佛依然萦绕在我的耳畔。</p><p><b>PS: 本文仅供学习参考、仅供学习参考、仅供学习参考</b></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
            <tag> pyquery </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应状态码及其详细描述</title>
      <link href="/posts/867e7a3d.html"/>
      <url>/posts/867e7a3d.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>We all make our choices. The hard part is living with them. ——《妙笔生花》</center></strong></em><br><em><strong><center>人的一生要做出很多选择，但是最难得是带着自己的选择去生活下去。</center></strong></em></p><a id="more"></a><h1><strong><center>响应状态码及其详细描述</center></strong></h1><table><thead><tr><th style="text-align:center">状态码10x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td>继续</td><td>客户端应继续提出请求。服务器已收到部分请求，正等待其余部分</td></tr><tr><td style="text-align:center">101</td><td>切换协议</td><td>服务器根据客户端的请求切换协议。只能向上请求更高级的协议，如切换到HTTP的新版本协议</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码20x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td>请求成功</td><td>服务器已经处理了请求</td></tr><tr><td style="text-align:center">201</td><td>已创建</td><td>请求成功，并且服务器创建了新的资源</td></tr><tr><td style="text-align:center">202</td><td>已接受</td><td>服务器已接受请求，但并未处理</td></tr><tr><td style="text-align:center">203</td><td>非授权信息</td><td>请求成功。但返回的数据不在原始服务器，可能来自另一个数据源</td></tr><tr><td style="text-align:center">204</td><td>已创建</td><td>请求成功，并且服务器创建了新的资源</td></tr><tr><td style="text-align:center">205</td><td>无内容</td><td>服务器成功处理，但未返回任何内容</td></tr><tr><td style="text-align:center">206</td><td>部分内容</td><td>服务器成功处理了部分请求</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码30x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">300</td><td>多种选择</td><td>请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端(如浏览器)选择</td></tr><tr><td style="text-align:center">301</td><td>永久移动</td><td>请求的资源已经永久移动到新位置，即永久重定向</td></tr><tr><td style="text-align:center">302</td><td>临时移动</td><td>请求的网页暂时跳转到其他页面，即临时重定向</td></tr><tr><td style="text-align:center">303</td><td>查看其他地址</td><td>与301类似。使用GET或POST请求查看</td></tr><tr><td style="text-align:center">304</td><td>未修改</td><td>此次请求的资源未发生修改，继续使用上次的资源</td></tr><tr><td style="text-align:center">305</td><td>使用代理</td><td>所请求的资源必须通过代理访问</td></tr><tr><td style="text-align:center">306</td><td>未使用</td><td>已经被废弃的HTTP状态码</td></tr><tr><td style="text-align:center">307</td><td>临时重定向</td><td>与302类似。使用GET请求重定向</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码4xx</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">400</td><td>错误请求</td><td>服务器无法解析该请求</td></tr><tr><td style="text-align:center">401</td><td>未授权</td><td>请求要求认证用户的身份</td></tr><tr><td style="text-align:center">402</td><td>保留</td><td>在未来可能使用的状态码</td></tr><tr><td style="text-align:center">403</td><td>禁止访问</td><td>服务器理解客户端的请求，但是拒绝执行该请求</td></tr><tr><td style="text-align:center">404</td><td>未找到</td><td>服务器找不到请求的资源</td></tr><tr><td style="text-align:center">405</td><td>方法禁用</td><td>服务器禁用了请求中指定的方法</td></tr><tr><td style="text-align:center">406</td><td>不接收</td><td>无法使用请求的内容响应对应资源</td></tr><tr><td style="text-align:center">407</td><td>需要代理授权</td><td>请求要求代理的身份认证，与401类似，但请求者应使用代理进行授权</td></tr><tr><td style="text-align:center">408</td><td>请求超时</td><td>服务器请求超时</td></tr><tr><td style="text-align:center">409</td><td>冲突</td><td>服务器未返回客户端的PUT请求可能会返回此状态码，服务器处理请求时发生了冲突</td></tr><tr><td style="text-align:center">410</td><td>已删除</td><td>请求的资源已永久删除</td></tr><tr><td style="text-align:center">411</td><td>需要有效长度</td><td>服务器不接受不含有有效长度字段的请求</td></tr><tr><td style="text-align:center">412</td><td>未满足前提条件</td><td>客户端请求信息的先决条件错误</td></tr><tr><td style="text-align:center">413</td><td>请求实体过大</td><td>请求实体过大，超出服务器处理能力</td></tr><tr><td style="text-align:center">414</td><td>请求URL过长</td><td>请求网址过长，服务器无法处理</td></tr><tr><td style="text-align:center">415</td><td>不支持类型</td><td>请求格式不被请求页面支持</td></tr><tr><td style="text-align:center">416</td><td>请求范围不符</td><td>客户端请求的范围无效</td></tr><tr><td style="text-align:center">417</td><td>未满足期望值</td><td>服务器无法满足Except的请求头信息</td></tr></tbody></table><table><thead><tr><th style="text-align:center">状态码50x</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td style="text-align:center">500</td><td>服务器内部错误</td><td>服务器内部错误，无法完成请求</td></tr><tr><td style="text-align:center">501</td><td>未实现</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td style="text-align:center">502</td><td>网关错误</td><td>服务器作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到一个无效的请求</td></tr><tr><td style="text-align:center">503</td><td>服务不可用</td><td>由于超载或者系统维护，服务器暂时无法处理客户端的请求</td></tr><tr><td style="text-align:center">504</td><td>网关超时</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td style="text-align:center">505</td><td>HTTP版本不支持</td><td>服务器不支持请求的HTTP版本，无法完成处理</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python装饰器之函数运行时间</title>
      <link href="/posts/6670c259.html"/>
      <url>/posts/6670c259.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>If you put your mind to it, you can accomplish anything. ——《回到未来》</center></strong></em><br><em><strong><center>有志者，事竟成。</center></strong></em></p><a id="more"></a><h1><strong><center>Python装饰器之函数运行时间</center></strong></h1><h2 id="目标">目标</h2><p>  在《requests中文乱码问题》这篇文章中提到了两种解决方式，这两种方式究竟哪种方式是值得推荐的那？一般来说抓取网页与持久化储存是最耗时的，要想提高抓取效率就得从这两方面入手。那我们就从时间入手，在不改变原代码的情况下，可以使用装饰器来运算两种方式运行所需要的时间。</p><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行时间装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_time</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start_ts = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end_ts = time.time()</span><br><span class="line">        second = end_ts - start_ts</span><br><span class="line">        <span class="keyword">return</span> second</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@run_time</span></span><br><span class="line"><span class="comment"># 手动指定编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@run_time</span></span><br><span class="line"><span class="comment"># 使用apparent_encoding根据网页内容分析编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml2</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 n 次平均时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_runs_times</span><span class="params">(func,url, times=<span class="number">10</span>)</span>:</span></span><br><span class="line">    runtime_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(times):</span><br><span class="line">        runtime = func(url)</span><br><span class="line">        runtime_list.append(runtime)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;func.__name__&#125;</span> runs <span class="subst">&#123;times&#125;</span> times：<span class="subst">&#123;sum(runtime_list) / times&#125;</span>s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn/'</span></span><br><span class="line">get_runs_times(getHtml,url, <span class="number">100</span>)</span><br><span class="line">get_runs_times(getHtml2,url, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;getHtml runs 100 times：0.19394637107849122s</span><br><span class="line">&gt;&gt;&gt;getHtml2 runs 100 times：0.46304878234863284s</span><br></pre></td></tr></table></figure><h2 id="结论">结论</h2><p>  答案很明显手动指定编码格式运行100次的平均时间更少，甚至连使用apparent_encoding根据网页内容分析编码方式的1/2都不到。手动指定编码格式只需要你查看网页源代码头部的charset就可以省下一半时间，所以我的建议是：如果出现中文乱码，手动指定编码格式即可。</p><h2 id="其他">其他</h2><p>  细心的小伙伴应该会发现在时间装饰器中，使用了@wraps(func)，它是使用 from functools import wraps 导入的，那么它有什么作用那？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。</span><br></pre></td></tr></table></figure><p>  这可以让我们在装饰器里面访问在装饰之前的函数的属性。例如在计算运行n次平均时间的函数中我们获取了函数的__name__ 属性,这也就使得这个函数更加通用了。如果去掉装饰器中的@wraps(func)这一句，那么在计算运行n次平均时间的函数中__name__ 属性获取到的就是wrapper了。</p><p>  此外在计算运行n次平均时间的函数中我们还使用了f&quot;{}{}{}&quot;，也就是f-string，亦称为格式化字符串常量(formatted string literals),是Python3.6新引入的一种字符串格式化方法。f-string在形式上是以 f 或 F 修饰符引领的字符串（f’xxx’或 F’xxx’），以大括号 {} 标明被替换的字段；f-string在本质上并不是字符串常量，而是一个在运行时运算求值的表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">f'<span class="subst">&#123;func.__name__&#125;</span> runs <span class="subst">&#123;times&#125;</span> times：<span class="subst">&#123;sum(runtime_list) / times&#125;</span>s'</span>)</span><br></pre></td></tr></table></figure><p>  在上面的例子中我们使用f-string格式化了函数属性，传递了变量，甚至可直接在其中进行运算。它还有很多有趣的用法，大家快去发掘吧！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests中文乱码问题</title>
      <link href="/posts/d166c216.html"/>
      <url>/posts/d166c216.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Talent is luck. The important thing in life is courage. ——《曼哈顿》</center></strong></em><br><em><strong><center>有天赋是运气，生活中更为重要的是要有勇气。</center></strong></em></p><a id="more"></a><h1><strong><center>requests中文乱码问题</center></strong></h1><h2 id="发现问题">发现问题</h2><p>在使用requests.get()去抓取网页时，发现中文乱码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>大概是这个样子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"site-state"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives/"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>æ¥å¿<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-categories"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/categories/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>åç±»<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tags/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>æ ç­¾<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="问题原因">问题原因</h2><p>  当调用 Response.text 方法时，Requests首先在Response Headers检测是否存在指定的编码方式，如果不存在，则会使用 charade 来尝试猜测编码方式。在请求的网站中，如果Response Headers中的Content-Type只指定了Type，没有指定charset类型，并且 Content-Type 头部字段包含 text 的值时Requests才不去猜测编码方式。在这种情况下，默认字符集为ISO-8859-1，也就出现了中文乱码现象，这时就需要我们去指定编码方式。</p><h2 id="解决问题">解决问题</h2><h3 id="1-手动指定编码">1.手动指定编码</h3><p>  可以通过查看网页源代码中head下的charset=&quot;XXX&quot;来确定网页编码，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, maximum-scale&#x3D;2&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;theme-color&quot; content&#x3D;&quot;#222&quot;&gt;</span><br></pre></td></tr></table></figure><p>  很容易就发现网页的编码方式是UTF-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>  问题解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"site-state"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives/"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>日志<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-categories"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/categories/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tags/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-apparent-encoding根据网页内容分析编码方式">2.apparent_encoding根据网页内容分析编码方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://salling.com.cn'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>  问题同样解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"site-state"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives/"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>日志<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-categories"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/categories/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/tags/"</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p><b>PS: 这两种方式究竟哪种才是值得推荐的那？<br>欲知结果如何，请看下篇文章<a href="https://salling.com.cn/posts/6670c259.html" target="_blank" rel="noopener">《Python装饰器之函数运行时间》</a></b></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xpath解析本地Html文件</title>
      <link href="/posts/86d537dd.html"/>
      <url>/posts/86d537dd.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>We work in the darkness to serve the light. ——《刺客信条》</center></strong></em><br><em><strong><center>我们鞠躬于黑暗，却向往着光明。</center></strong></em></p><a id="more"></a><h1><strong><center>Xpath解析本地Html文件</center></strong></h1><h2 id="问题">问题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">提取如下html结构中的信息</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>坤坤<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>human<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>24<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>伊娃<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>机器人<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>生产日期：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2019-01-01<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>豆豆<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>动物<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>晗晗<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>人类<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">并生成如下数据结构：</span><br><span class="line">&#123;</span><br><span class="line">  'human': [&#123; age: 24, name: '坤坤' &#125;,&#123; age: 21, name: '晗晗' &#125;],</span><br><span class="line">  'robot': [&#123; dateTime: '2019-01-01', name: '伊娃' &#125;],</span><br><span class="line">  'animal': [&#123; age: 3, name: '豆豆' &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析">解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">"index.html"</span>,<span class="string">"rb"</span>)</span><br><span class="line">content=f.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">tree=etree.HTML(content)</span><br><span class="line">content = &#123;&#125;</span><br><span class="line">human = []</span><br><span class="line">robot = []</span><br><span class="line">animal = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tree.xpath(<span class="string">'//div/div'</span>):</span><br><span class="line">    name = item.xpath(<span class="string">'./p[1]/span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    label = item.xpath(<span class="string">'./p[2]/span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    age = item.xpath(<span class="string">'./p[3]/span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'human'</span> <span class="keyword">in</span> label <span class="keyword">or</span> <span class="string">'人类'</span> <span class="keyword">in</span> label:</span><br><span class="line">        human.append(&#123;<span class="string">'age'</span>:age, <span class="string">'name'</span>:name&#125;)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'机器人'</span> <span class="keyword">in</span> label:</span><br><span class="line">        robot.append(&#123;<span class="string">'dataTime'</span>:age, <span class="string">'name'</span>:name&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        animal.append(&#123;<span class="string">'age'</span>: age, <span class="string">'name'</span>: name&#125;)</span><br><span class="line">    content[<span class="string">'human'</span>] = human</span><br><span class="line">    content[<span class="string">'robot'</span>] = robot</span><br><span class="line">    content[<span class="string">'animal'</span>] = animal</span><br><span class="line"></span><br><span class="line">res = json.dumps(content, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&#123;</span><br><span class="line">    "human": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"24"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"坤坤"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"21"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"晗晗"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "robot": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"dataTime"</span>: <span class="string">"2019-01-01"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"伊娃"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "animal": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"3"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"豆豆"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">open 读取本地HTML并进行编码</span><br><span class="line">etree.HTML() 构造XPath解析对象</span><br><span class="line">利用xpath提取需要的信息</span><br><span class="line">json.dumps() 将字典转为json对象，indent 设置缩进字符个数，ensure_ascii&#x3D;False 中文不被转为unicode</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> xpath </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Xpath </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算并打印出每个字符串中排列在任意x前面的所有y的个数</title>
      <link href="/posts/21e58870.html"/>
      <url>/posts/21e58870.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Victory belongs to those that believe in it the most， and believe in it the longest. ——《珍珠港》</center></strong></em><br><em><strong><center>胜利属于那些信念坚定、永不动摇的人。</center></strong></em></p><a id="more"></a><h1><strong><center>计算并打印出每个字符串中排列在任意x前面的所有y的个数。</center></strong></h1><h2 id="问题">问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有如下数组，请计算并打印出每个字符串中排列在任意x前面的所有y的个数。 </span><br><span class="line">arr &#x3D; [&#39;xxyyxyyyyyxxx&#39;, &#39;yyxxxxy&#39;, &#39;xyyyxxyx&#39;, &#39;xxxx&#39;, &#39;xxxyyy&#39;]</span><br></pre></td></tr></table></figure><h2 id="解析">解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_s</span><span class="params">(s_list)</span>:</span></span><br><span class="line">    res_list = []</span><br><span class="line">    pattern = re.compile(<span class="string">r'(y+)x'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s_list:</span><br><span class="line">        res = pattern.findall(i)</span><br><span class="line">        res_list.append(len(<span class="string">''</span>.join(res)))</span><br><span class="line">    <span class="keyword">return</span> res_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [<span class="string">'xxyyxyyyyyxxx'</span>, <span class="string">'yyxxxxy'</span>, <span class="string">'xyyyxxyx'</span>, <span class="string">'xxxx'</span>, <span class="string">'xxxyyy'</span>]</span><br><span class="line">print(change_s(arr))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用正则匹配字符串中所有以x结尾的任意y字符串。</span><br><span class="line">compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象。</span><br><span class="line">findall 在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</span><br><span class="line">将每个字符串中符合规则的y字符串列表拼接成字符串，计算每个字符串y的个数并添加至列表中，最后返回列表。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高阶函数与lambda表达式</title>
      <link href="/posts/6f18f638.html"/>
      <url>/posts/6f18f638.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>It is okay to fail, as long as you keep trying! ——《科学怪狗》</center></strong></em><br><em><strong><center>只要你坚持尝试，失败也没有关系！</center></strong></em></p><a id="more"></a><h1><strong><center>Python高阶函数与lambda表达式</center></strong></h1><h2 id="lambda表达式">lambda表达式</h2><p>  <b>为了避免创建一次性的辅助性函数</b></p><h3 id="语法">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda &lt;argument&gt;, &lt;expression&gt;</span><br></pre></td></tr></table></figure><h2 id="map">map()</h2><p>  <b>根据提供的函数对指定序列做映射。返回包含每次函数返回值的新列表。</b></p><h3 id="语法-2">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br></pre></td></tr></table></figure><h3 id="将一个包含整数的列表转换为这些整数字符串的另一个列表">将一个包含整数的列表转换为这些整数字符串的另一个列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for循环实现</span></span><br><span class="line">oldList = list(range(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">newList = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> oldList:</span><br><span class="line">    newList.append(str(num))</span><br><span class="line">print(newList)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map实现</span></span><br><span class="line">oldList = list(range(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">newList = list(map(str, oldList))</span><br><span class="line">print(newList)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><h3 id="计算平方和">计算平方和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map + 函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line">res = list(map(square, list(range(<span class="number">1</span>, <span class="number">5</span>))))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map + lambda实现</span></span><br><span class="line">res = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, list(range(<span class="number">1</span>, <span class="number">5</span>))))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><h2 id="filter">filter()</h2><p>  <b>过滤掉序列中不符合条件的元素，返回由符合条件元素组成的新列表。返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换。</b></p><h3 id="语法-3">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(function, iterable)</span><br></pre></td></tr></table></figure><h3 id="过滤出列表中的所有奇数">过滤出列表中的所有奇数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter + 函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">tmplist = filter(is_odd, list(range(<span class="number">1</span>, <span class="number">11</span>)))</span><br><span class="line">newlist = list(tmplist)</span><br><span class="line">print(newlist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter + lambda实现</span></span><br><span class="line">tmplist = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span>, list(range(<span class="number">1</span>, <span class="number">11</span>)))</span><br><span class="line">newlist = list(tmplist)</span><br><span class="line">print(newlist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="reduce">reduce()</h2><p>  <b>对参数序列中元素进行累积。函数将一个数据集合（列表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</b></p><h3 id="语法-4">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(function, iterable[, initializer])</span><br></pre></td></tr></table></figure><h3 id="计算一个整数列表的和">计算一个整数列表的和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reduce + 函数实现</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">res = reduce(add, list(range(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reduce + lambda实现</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">res = reduce(<span class="keyword">lambda</span> x, y: x+y, list(range(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="number">10</span></span><br></pre></td></tr></table></figure><p><b>参考文章：</b><br><a href="https://www.runoob.com/python/python-func-map.html" target="_blank" rel="noopener">Python map() 函数 | 菜鸟教程</a><br><a href="https://www.runoob.com/python/python-func-filter.html" target="_blank" rel="noopener">Python filter() 函数 | 菜鸟教程</a><br><a href="https://www.runoob.com/python/python-func-reduce.html" target="_blank" rel="noopener">Python reduce() 函数 | 菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令(五) ps：显示当前进程状态</title>
      <link href="/posts/71fe7104.html"/>
      <url>/posts/71fe7104.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>The only thing that matters is what you believe. ——《达芬奇密码》</center></strong></em><br><em><strong><center>重要的是你内心的信仰。</center></strong></em></p><a id="more"></a><h1><strong><center>ps (显示当前进程状态)</center></strong></h1><h2 id="语法">语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [options] [--help]</span><br></pre></td></tr></table></figure><h2 id="参数">参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-A 列出所有的行程</span><br><span class="line">-w 显示加宽可以显示较多的资讯</span><br><span class="line">-au 显示较详细的资讯</span><br><span class="line">-aux 显示所有包含其他使用者的行程</span><br><span class="line">au(x) 输出格式 :</span><br><span class="line">        USER    PID     %CPU    %MEM    VSZ   RSS       TTY      STAT START   TIME  COMMAND</span><br><span class="line">        USER：行程拥有者</span><br><span class="line">        PID：pid</span><br><span class="line">        %CPU：占用的 CPU 使用率</span><br><span class="line">        %MEM：占用的物理内存使用率</span><br><span class="line">        VSZ：占用的虚拟内存的大小</span><br><span class="line">        RSS：占用的固定内存的大小</span><br><span class="line">        TTY：终端的次要装置号码 (minor device number of tty)</span><br><span class="line">        STAT：该行程目前的状态，主要状态有:</span><br><span class="line">                D：无法中断的休眠状态 (通常 IO 的进程)</span><br><span class="line">                R：正在执行中</span><br><span class="line">                S：静止状态</span><br><span class="line">                s：包含子进程</span><br><span class="line">                T：暂停执行</span><br><span class="line">                Z：不存在但暂时无法消除</span><br><span class="line">                W：没有足够的记忆体分页可分配</span><br><span class="line">                &lt;：高优先序的行程</span><br><span class="line">                N：低优先序的行程</span><br><span class="line">                L：将页面锁定到内存中（用于实时和自定义IO）</span><br><span class="line">                l：多线程（使用CLONE_THREAD,类似NPTL线程）</span><br><span class="line">                +：位于后台的进程组</span><br><span class="line">        START：行程开始时间</span><br><span class="line">        TIME：执行的时间</span><br><span class="line">        COMMAND：所执行的指令</span><br></pre></td></tr></table></figure><h2 id="实例">实例</h2><h3 id="查看所有进程信息">查看所有进程信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -A</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_A.png" alt></p><h3 id="查看指定用户信息">查看指定用户信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pa -u xiuxing</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_u_xiuxing.png" alt></p><h3 id="查看全格式的全部进程">查看全格式的全部进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_ef.png" alt></p><h3 id="以树状结构显示进程">以树状结构显示进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -axjf</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_axjf.png" alt></p><h3 id="配合grep查看某进程状态">配合grep查看某进程状态</h3><p>  查看MySQL进程状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep mysql</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_aux_grep_mysql.png" alt></p><h3 id="将所有进程信息输出到指定文件中">将所有进程信息输出到指定文件中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux &gt; ps01.txt      # 将所有进程信息输出到ps01.txt文件中</span><br><span class="line">head -n 10 ps01.txt     # 将ps01.txt文件的前10行输出</span><br></pre></td></tr></table></figure><p><img src="/posts/71fe7104/ps_ps01.png" alt></p><p><b>参考文章：</b><br><a href="https://www.runoob.com/linux/linux-comm-ps.html" target="_blank" rel="noopener">Linux ps命令 | 菜鸟教程</a><br><a href="http://blog.chinaunix.net/uid-8695538-id-2017726.html" target="_blank" rel="noopener">Linux下ps aux命令中STAT的参数含义</a><br><a href="https://www.cnblogs.com/xiangtingshen/p/10920236.html" target="_blank" rel="noopener">linux下ps命令-狂奔</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04挂载exfat格式的U盘</title>
      <link href="/posts/d45d30f8.html"/>
      <url>/posts/d45d30f8.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>In order to be brave, we got to be a little scared. ——《摩天营救》</center></strong></em><br><em><strong><center>感到害怕才能学会勇敢。</center></strong></em></p><a id="more"></a><h1><strong><center>Ubuntu18.04挂载exfat格式的U盘</center></strong></h1><h2 id="安装支持exfat的软件">安装支持exfat的软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install exfat-fuse</span><br></pre></td></tr></table></figure><h2 id="重启">重启</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure><p>  <b>在重启的时候就可以插上U盘，我的就是重启之后直接就挂载上了，并且显示在桌面上。</b>如果重启之后没有直接挂载上，请执行下面的步骤。</p><h2 id="列出磁盘信息">列出磁盘信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><p><img src="/posts/d45d30f8/sudofdisk_l.png" alt><br>  找到你要挂载的U盘</p><p><img src="/posts/d45d30f8/yours_u.png" alt></p><h2 id="挂载">挂载</h2><h3 id="创建挂载目录">创建挂载目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;mnt&#x2F;USB</span><br></pre></td></tr></table></figure><h3 id="执行挂载命令">执行挂载命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount &#x2F;dev&#x2F;sdc &#x2F;mnt&#x2F;USB</span><br></pre></td></tr></table></figure><p><img src="/posts/d45d30f8/sudomount.png" alt><br>  挂载完成之后，U盘里的文件就可以在/mnt/USB目录找到了。</p><h2 id="卸载">卸载</h2><p>  先执行下面的命令卸载U盘，再将其拔出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;USB</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3.7环境下Django1.11创建app时报错</title>
      <link href="/posts/784c1c7e.html"/>
      <url>/posts/784c1c7e.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Speed a little more time trying to make something of yourelf and a little less time trying to impress people. ——《早餐俱乐部》</center></strong></em><br><em><strong><center>花少点时间去取悦别人，多花时间来经营自己。</center></strong></em></p><a id="more"></a><h1><strong><center>Python3.7环境下Django1.11创建app时报错：SyntaxError: Generator expression must be parenthesized(已解决)</center></strong></h1><h2 id="错误信息">错误信息</h2><p>  在Python3.7环境下使用django1.11创建app时出现以下错误：<br><img src="/posts/784c1c7e/startapp.png" alt></p><h2 id="解决方案">解决方案</h2><h3 id="方案一：修改出现错误的文件（亲测可用）">方案一：修改出现错误的文件（亲测可用）</h3><p>  直接点击上图红色框框圈住的文件地址，或者找到你的环境下的site-packages\django\contrib\admin\widgets.py文件<br>将：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> params:</span><br><span class="line">    related_url += <span class="string">'?'</span> + <span class="string">'&amp;amp;'</span>.join(</span><br><span class="line">        <span class="string">'%s=%s'</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items(),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>更改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> params:</span><br><span class="line">    related_url += <span class="string">'?'</span> + <span class="string">'&amp;amp;'</span>.join(</span><br><span class="line">        <span class="string">'%s=%s'</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>  也就是将’%s=%s’ % (k, v) for k, v in params.items(),这句最后面的逗号去掉</p><h3 id="方案二：更新django版本">方案二：更新django版本</h3><p>  这是从网上看到的另一种解决方案,我本人没有测验过，如果第一种方法解决不了的话，可以试一试这种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;1.11.17</span><br></pre></td></tr></table></figure><p><b>参考文章：</b><br><a href="https://blog.csdn.net/qq_41850110/article/details/100116785" target="_blank" rel="noopener">https://blog.csdn.net/qq_41850110/article/details/100116785</a><br><a href="https://blog.csdn.net/tyt_xiaotao/article/details/87887482" target="_blank" rel="noopener">https://blog.csdn.net/tyt_xiaotao/article/details/87887482</a></p>]]></content>
      
      
      <categories>
          
          <category> 错误 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬取天天基金网站基金数据</title>
      <link href="/posts/38ef7f6b.html"/>
      <url>/posts/38ef7f6b.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>To always face my abversity head on. ——《冰雪奇缘2》</center></strong></em><br><em><strong><center>永远都要直面挫折。</center></strong></em></p><a id="more"></a><p><strong><center>Scrapy爬取天天基金网站基金数据</center></strong></p><h2 id="抓取目标">抓取目标</h2><p>  本次抓取目标是天天基金网的基金数据，如基金代码、基金名称、最近一个月收益率、最近六个月收益率、最近三年收益率以及基金公司、基金规模等一系列指标，这些信息抓取之后将会保存到本地的CSV文件中。</p><h2 id="思路分析">思路分析</h2><p>  我们选取的站点是：<a href="http://fund.eastmoney.com/allfund.html" target="_blank" rel="noopener">http://fund.eastmoney.com/allfund.html</a> 如下图示：<br><img src="/posts/38ef7f6b/index.png" alt><br><img src="/posts/38ef7f6b/index2.png" alt><br>  可以看出所有的基金所有的基金代码以及基金名称都在这里，但是我们想要的不止这些，所以需要进入到每一个基金的详情页去。如下图：<br><img src="/posts/38ef7f6b/parse1.png" alt><br>  那我们就以我们选取的站点：<a href="http://fund.eastmoney.com/allfund.html" target="_blank" rel="noopener">http://fund.eastmoney.com/allfund.html</a> 为起始站点，提取每个基金的详情页链接，然后在详情页中解析我们想要的数据。</p><h2 id="新建项目">新建项目</h2><p>  接下来，我们用Scrapy来实现这个抓取过程。首先创建一个项目，命令如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject fund</span><br></pre></td></tr></table></figure><p>  进入项目中，新建一个项目，名为eastmoney,命令如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider eastmoney fund.eastmoney.com</span><br></pre></td></tr></table></figure><p>  我们先修改spider，实现start_requests()方法，然后用parse_info()进行解析。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EastmoneySpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'eastmoney'</span></span><br><span class="line">    allowed_domains = [<span class="string">'fund.eastmoney.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://fund.eastmoney.com/allfund.html'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        urls = response.xpath(<span class="string">'//*[@id="code_content"]/div/ul/li/div/a[1]/@href'</span>)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            url = response.urljoin(url.extract())</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url,callback=self.parse_info)</span><br></pre></td></tr></table></figure><h2 id="创建Item">创建Item</h2><p>  接下来，我们解析基金详情页我们需要的信息并生成Item。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FundItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    code = scrapy.Field()    <span class="comment"># 基金代码</span></span><br><span class="line">    name = scrapy.Field()    <span class="comment"># 基金名称</span></span><br><span class="line">    service_Charge = scrapy.Field()    <span class="comment"># 手续费</span></span><br><span class="line">    purchase_amount = scrapy.Field()    <span class="comment"># 起购金额</span></span><br><span class="line">    recent1Month = scrapy.Field()  <span class="comment"># 最近一月</span></span><br><span class="line">    recent3Month = scrapy.Field()  <span class="comment"># 最近三月</span></span><br><span class="line">    recent6Month = scrapy.Field()  <span class="comment"># 最近六月</span></span><br><span class="line">    recent1Year = scrapy.Field()  <span class="comment"># 最近一年</span></span><br><span class="line">    recent3Year = scrapy.Field()  <span class="comment"># 最近三年</span></span><br><span class="line">    from_Build = scrapy.Field()  <span class="comment"># 成立以来</span></span><br><span class="line">    type = scrapy.Field()    <span class="comment"># 基金类型</span></span><br><span class="line">    fund_scale = scrapy.Field()    <span class="comment"># 基金规模</span></span><br><span class="line">    establishment_date = scrapy.Field()    <span class="comment"># 成立日</span></span><br><span class="line">    company = scrapy.Field()    <span class="comment"># 基金公司</span></span><br></pre></td></tr></table></figure><h2 id="提取数据">提取数据</h2><p>  开始解析基金详情页，实现parse_info()方法，因为详情页的布局并不是统一的，所以用到了try except， 如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fund.items <span class="keyword">import</span> FundItem</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_info</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = FundItem()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            item[<span class="string">'code'</span>] = response.xpath(<span class="string">'//*[@class="fundcodeInfo"]/span[1]/text()'</span>).extract()[<span class="number">0</span>]    <span class="comment"># 基金代码</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            item[<span class="string">'code'</span>] = response.xpath(<span class="string">'//*[@class="fundDetail-tit"]/div/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'name'</span>] = response.xpath(<span class="string">'//*[@class="fundDetail-tit"]/div[1]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 基金名称</span></span><br><span class="line">        item[<span class="string">'service_Charge'</span>] = response.xpath(<span class="string">'//*[@class="buyWayStatic"]/div[5]/span[2]/span[2]/text()'</span>).extract_first(<span class="string">'暂停申购'</span>)   <span class="comment"># 手续费</span></span><br><span class="line">        item[<span class="string">'purchase_amount'</span>] = response.xpath(<span class="string">'//*[@id="moneyAmountTxt"]/@data-placeholder'</span>).extract_first(<span class="string">'暂停申购'</span>)    <span class="comment"># 起购金额</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            item[<span class="string">'recent1Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem01"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 最近一月</span></span><br><span class="line">            item[<span class="string">'recent3Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem02"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 最近三月</span></span><br><span class="line">            item[<span class="string">'recent6Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem03"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 最近六月</span></span><br><span class="line">            item[<span class="string">'recent1Year'</span>] = response.xpath(<span class="string">'//*[@class="dataItem01"]/dd[3]/span[2]/text()'</span>).extract()[<span class="number">0</span>]     <span class="comment"># 最近一年</span></span><br><span class="line">            item[<span class="string">'recent3Year'</span>] = response.xpath(<span class="string">'//*[@class="dataItem02"]/dd[3]/span[2]/text()'</span>).extract()[<span class="number">0</span>]    <span class="comment"># 最近三年</span></span><br><span class="line">            item[<span class="string">'from_Build'</span>] = response.xpath(<span class="string">'//*[@class="dataItem03"]/dd[3]/span[2]/text()'</span>).extract()[<span class="number">0</span>]    <span class="comment"># 成立以来</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            item[<span class="string">'recent1Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem01"]/dd[1]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'recent3Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem02"]/dd[1]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'recent6Month'</span>] = response.xpath(<span class="string">'//*[@class="dataItem03"]/dd[1]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'recent1Year'</span>] = response.xpath(<span class="string">'//*[@class="dataItem01"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'recent3Year'</span>] = response.xpath(<span class="string">'//*[@class="dataItem02"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'from_Build'</span>] = response.xpath(<span class="string">'//*[@class="dataItem03"]/dd[2]/span[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'type'</span>] = response.xpath(<span class="string">'//*[@class="infoOfFund"]/table/tr[1]/td[1]/a/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'fund_scale'</span>] = response.xpath(<span class="string">'//*[@class="infoOfFund"]/table/tr[1]/td[2]/text()'</span>).extract()[<span class="number">0</span>].split(<span class="string">"："</span>)[<span class="number">1</span>]    <span class="comment"># 基金规模</span></span><br><span class="line">        item[<span class="string">'establishment_date'</span>] = response.xpath(<span class="string">'//*[@class="infoOfFund"]/table/tr[2]/td[1]/text()'</span>).extract()[<span class="number">0</span>].split(<span class="string">"："</span>)[<span class="number">1</span>]    <span class="comment"># 成立日期</span></span><br><span class="line">        item[<span class="string">'company'</span>] = response.xpath(<span class="string">'//*[@class="infoOfFund"]/table/tr[2]/td[2]/a/text()'</span>).extract()[<span class="number">0</span>]    <span class="comment"># 公司</span></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h2 id="数据储存">数据储存</h2><p>  最终我们的数据是要储存到本地的CSV文件中。我们在这里实现ToCSVPipeline类，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> fund.items <span class="keyword">import</span> FundItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToCSVPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.f = open(<span class="string">"fund.csv"</span>, <span class="string">"a"</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">""</span>)</span><br><span class="line">        <span class="comment"># 设置表头，要跟spider传过来的字典key名称相同</span></span><br><span class="line">        self.fieldnames = [<span class="string">"code"</span>, <span class="string">"name"</span>, <span class="string">"service_Charge"</span>, <span class="string">"purchase_amount"</span>, <span class="string">"recent1Month"</span>, <span class="string">"recent3Month"</span>, <span class="string">"recent6Month"</span>,</span><br><span class="line">                           <span class="string">"recent1Year"</span>, <span class="string">"recent3Year"</span>, <span class="string">"from_Build"</span>, <span class="string">"type"</span>, <span class="string">"fund_scale"</span>, <span class="string">"establishment_date"</span>, <span class="string">"company"</span>]</span><br><span class="line">        self.writer = csv.DictWriter(self.f, fieldnames=self.fieldnames)</span><br><span class="line">        self.writer.writeheader()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.writer.writerow(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure><h2 id="设置随机UA">设置随机UA</h2><p>  我们需要做一些防范爬虫的措施才可以顺利完成数据爬取。在Middleware中设置随机User-Agent。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UseAgentMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user_agent=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.ua = UserAgent(verify_ssl=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.ua:</span><br><span class="line">            random_ua = self.ua.random</span><br><span class="line">            request.headers[<span class="string">"User-Agent"</span>] = random_ua</span><br></pre></td></tr></table></figure><p>  fake_useragent可以随机生成User-Agent，但是这个库是需要安装的，安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fake-useragent</span><br></pre></td></tr></table></figure><p>  具体的其他方式使用有兴趣的可以度娘一下。</p><h2 id="配置setting">配置setting</h2><p>  首先我们需要关闭robots规则，否则是无法爬取数据的；我们还需要将Pipline管道以及middleware开启，不然的话，我们设置的储存方式以及随机UA就没有办法使用了。具体如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">'fund.middlewares.UseAgentMiddleware'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'fund.pipelines.ToCSVPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行">运行</h2><p>  到此为止，整个爬虫就实现完毕了。我们在项目根目录下运行如下命令启动爬虫：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl eastmoney</span><br></pre></td></tr></table></figure><p>  输出部分结果如下所示：<br><img src="/posts/38ef7f6b/spider_log.png" alt><br>  运行一段时间后，我们便可以在项目根目录下下看到CSV文件了，爬取的数据如下图所示：<br><img src="/posts/38ef7f6b/tocsv.png" alt></p><h2 id="代码地址">代码地址</h2><p>  <strong><a href="https://github.com/Mrxiuxing/Spider/tree/master/fund" target="_blank" rel="noopener">https://github.com/Mrxiuxing/Spider/tree/master/fund</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取拉钩(Selenium + pyquery + MongoDB)</title>
      <link href="/posts/7a8334ea.html"/>
      <url>/posts/7a8334ea.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>When one can see no future, all one can do is the next right thing. ——《冰雪奇缘2》</center></strong></em><br><em><strong><center>如果看不清未来，就走好当下的路。</center></strong></em></p><a id="more"></a><p><strong><center>爬取拉钩(Selenium + pyquery + MongoDB)</center></strong></p><h2 id="抓取目标">抓取目标</h2><p>  利用Selenium抓取拉钩Python相关职位并用pyquery解析得到Python相关职位的职位名称、所在城市、薪资、需要经验、教育程度以及公司名称，并将其保存到MongoDB。</p><h2 id="思路分析">思路分析</h2><p>  既然准备使用Selenium那我们就全程让他模拟人的行为去进行一些操作。初步思路如下：<br><img src="/posts/7a8334ea/mind.png" alt></p><h2 id="站点分析">站点分析</h2><p>  站点的搜索框以及搜索按钮如下：<br><img src="/posts/7a8334ea/index_1.png" alt><br>  进入职位详情页后，我们可以发现每一个职位都对应一个 li 标签中。<br><img src="/posts/7a8334ea/2index_1.png" alt><br>  点击其中一个 li 标签，可以看到职位的详细信息。<br><img src="/posts/7a8334ea/2index_2.png" alt><br>  最后我们查看一下&quot;下一页&quot;按钮的信息<br><img src="/posts/7a8334ea/2index_3.png" alt></p><h2 id="初始化代码">初始化代码</h2><p>  首先构造一个WebDriver对象，使用的是浏览器Chrome，然后模拟人的行为：在搜索框中输入想要搜索的职位，然后点击搜索。初始化MongoDB，首先创建了一个MongoDB连接对象，然后指定了Collection的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEnd = <span class="literal">False</span>    <span class="comment"># 判定是不是最后一页的Flag</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)</span><br><span class="line">        self.browser.get(<span class="string">'https://www.lagou.com/'</span>)</span><br><span class="line">        input_search = self.browser.find_element_by_id(<span class="string">'search_input'</span>)    <span class="comment"># 搜索框</span></span><br><span class="line">        input_search.send_keys(<span class="string">'Python'</span>)    <span class="comment"># 在搜索框输入职位名称</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        button = self.browser.find_element_by_class_name(<span class="string">'search_button'</span>)    <span class="comment"># 搜索按钮</span></span><br><span class="line">        button.click()    <span class="comment"># 模拟点击</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client.lagou</span><br><span class="line">        self.collection = db.Python</span><br></pre></td></tr></table></figure><h2 id="解析职位列表">解析职位列表</h2><p>  我们直接获取页面源代码，然后构造PyQuery解析对象，接着提取了职位列表，此时使用的CSS选择器是#s_position_list .item_con_list .con_list_item，它会匹配整个页面的每一个职位。因为它匹配的结果是多个，所以我们对它进行了以此遍历，用for循环将每一个结果分别进行解析，每一次循环把它赋值为item变量，每一个item变量都是一个PyQuery对象，然后调用它的find()方法，传入CSS选择器，就可以得到每一个职位的特定内容了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        doc = pq(self.browser.page_source)</span><br><span class="line">        items = doc(<span class="string">'#s_position_list .item_con_list .con_list_item'</span>).items()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            money_experience_educational = item.find(<span class="string">'.position .p_bot .li_b_l'</span>).text().split(<span class="string">' '</span>)</span><br><span class="line">            product = [&#123;</span><br><span class="line">                <span class="string">"position"</span>: item.find(<span class="string">'.p_top .position_link h3'</span>).text(),</span><br><span class="line">                <span class="string">"city"</span>: item.find(<span class="string">'.position .p_top .add em'</span>).text(),</span><br><span class="line">                <span class="string">"money"</span>: money_experience_educational[<span class="number">0</span>],</span><br><span class="line">                <span class="string">"experience"</span>: money_experience_educational[<span class="number">1</span>],</span><br><span class="line">                <span class="string">"educational"</span>: money_experience_educational[<span class="number">3</span>],</span><br><span class="line">                <span class="string">"company"</span>: item.find(<span class="string">'.company .company_name a'</span>).text(),</span><br><span class="line">            &#125;]</span><br><span class="line">            self.data.extend(product)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        self.parse_page()</span><br></pre></td></tr></table></figure><h2 id="翻页操作">翻页操作</h2><p>  首先判断是不是最后一页，不是的话才模拟点击下一页，否则的改变Flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> pq(self.browser.page_source)(<span class="string">'.pager_container span:last-child'</span>).attr(<span class="string">'class'</span>) != <span class="string">'pager_next pager_next_disabled'</span>:</span><br><span class="line">        pager_next = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'pager_next'</span>)))</span><br><span class="line">        pager_next.click()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.isEnd = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="保存到MongoDB">保存到MongoDB</h2><p>  因为在之前初始化了MongoDB，所以这里直接将数据插入到MongoDB。update_one()方法：更新或插入一条数据。这里使用update_one()方法一条一条插入是为了去重数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        print(<span class="string">'储存到MongoDB成功'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">'储存到MongoDB失败'</span>)</span><br></pre></td></tr></table></figure><h2 id="定义爬取函数">定义爬取函数</h2><p>  这里提取了每一页的当前页码，使我们可以很方便的观察爬取进度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> self.isEnd:</span><br><span class="line">        page = self.browser.find_element_by_class_name(<span class="string">'pager_is_current'</span>).text</span><br><span class="line">        print(<span class="string">'正在爬取第 '</span> + page + <span class="string">' 页 ...'</span>)</span><br><span class="line">        self.parse_page()</span><br><span class="line">        self.turn_page()</span><br><span class="line">    self.save_to_mongo()</span><br><span class="line">    print(<span class="string">'爬取结束'</span>)</span><br></pre></td></tr></table></figure><h2 id="试运行">试运行</h2><p>  此时的全部代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEnd = <span class="literal">False</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)</span><br><span class="line">        self.browser.get(<span class="string">'https://www.lagou.com/'</span>)</span><br><span class="line">        input_search = self.browser.find_element_by_id(<span class="string">'search_input'</span>)    <span class="comment"># 搜索框</span></span><br><span class="line">        input_search.send_keys(<span class="string">'Python'</span>)    <span class="comment"># 在搜索框输入职位名称</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        button = self.browser.find_element_by_class_name(<span class="string">'search_button'</span>)    <span class="comment"># 搜索按钮</span></span><br><span class="line">        button.click()    <span class="comment"># 模拟点击</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client.lagou</span><br><span class="line">        self.collection = db.Python</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析网页数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            doc = pq(self.browser.page_source)</span><br><span class="line">            items = doc(<span class="string">'#s_position_list .item_con_list .con_list_item'</span>).items()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                money_experience_educational = item.find(<span class="string">'.position .p_bot .li_b_l'</span>).text().split(<span class="string">' '</span>)</span><br><span class="line">                product = [&#123;</span><br><span class="line">                    <span class="comment"># "link": item.find('.p_top .position_link').attr('href'),</span></span><br><span class="line">                    <span class="string">"position"</span>: item.find(<span class="string">'.p_top .position_link h3'</span>).text(),</span><br><span class="line">                    <span class="string">"city"</span>: item.find(<span class="string">'.position .p_top .add em'</span>).text(),</span><br><span class="line">                    <span class="string">"money"</span>: money_experience_educational[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">"experience"</span>: money_experience_educational[<span class="number">1</span>],</span><br><span class="line">                    <span class="string">"educational"</span>: money_experience_educational[<span class="number">3</span>],</span><br><span class="line">                    <span class="string">"company"</span>: item.find(<span class="string">'.company .company_name a'</span>).text(),</span><br><span class="line">                &#125;]</span><br><span class="line">                self.data.extend(product)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            self.parse_page()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 翻页操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> pq(self.browser.page_source)(<span class="string">'.pager_container span:last-child'</span>).attr(<span class="string">'class'</span>) != <span class="string">'pager_next pager_next_disabled'</span>:</span><br><span class="line">            pager_next = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'pager_next'</span>)))</span><br><span class="line">            pager_next.click()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.isEnd = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 储存至MongoDB</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">                <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            print(<span class="string">'储存到MongoDB成功'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">'储存到MongoDB失败'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 爬取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.isEnd:</span><br><span class="line">            page = self.browser.find_element_by_class_name(<span class="string">'pager_is_current'</span>).text</span><br><span class="line">            print(<span class="string">'正在爬取第 '</span> + page + <span class="string">' 页 ...'</span>)</span><br><span class="line">            self.parse_page()</span><br><span class="line">            self.turn_page()</span><br><span class="line">        self.save_to_mongo()</span><br><span class="line">        print(<span class="string">'爬取结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    obj = LagouSpider()</span><br><span class="line">    obj.crawl()</span><br></pre></td></tr></table></figure><p>  我们运行一下代码发现出现了：<font color="red">selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable</font> 错误。我们再看一看浏览器现在是什么情况，发现浏览器出现了弹窗，如下图:<br><img src="/posts/7a8334ea/index_tanchuang.png" alt><br>  因为弹窗selenium找不到搜索框的元素，所以出现了错误。既然你出现弹窗想让我点击一下，那我就点一下呗！通过检查源代码，定位你想点击的按钮，这里我选择的是北京站。既然错误发生在输入框输入前，那就把代码添加在此之前，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEnd = <span class="literal">False</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)</span><br><span class="line">        self.browser.get(<span class="string">'https://www.lagou.com/'</span>)</span><br><span class="line">        <span class="comment"># 首页弹窗模拟点击</span></span><br><span class="line">        index_tab = self.browser.find_element_by_xpath(<span class="string">'//*[@id="changeCityBox"]/ul/li[1]/a'</span>)</span><br><span class="line">        index_tab.click()</span><br><span class="line">        input_search = self.browser.find_element_by_id(<span class="string">'search_input'</span>)    <span class="comment"># 搜索框</span></span><br><span class="line">        input_search.send_keys(<span class="string">'Python'</span>)    <span class="comment"># 在搜索框输入职位名称</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        button = self.browser.find_element_by_class_name(<span class="string">'search_button'</span>)    <span class="comment"># 搜索按钮</span></span><br><span class="line">        button.click()    <span class="comment"># 模拟点击</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client.lagou</span><br><span class="line">        self.collection = db.Python</span><br></pre></td></tr></table></figure><p>  我们再运行一下试试。然后顺利点击首页弹窗，顺利在输入框输入职位，顺利点击搜索，然后进入到职位详情页，突然就蹦出来这么一个玩意：<br><img src="/posts/7a8334ea/tanchuang2.png" alt><br>  怎么办呐！还能怎么办！点呗！！！为了防止频繁出现这样的弹窗，干脆写一个函数吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">body_btn</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        body_btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.body-btn'</span>)))</span><br><span class="line">        <span class="comment"># body_btn = self.browser.find_element_by_css_selector('div.body-btn')</span></span><br><span class="line">        <span class="keyword">if</span> body_btn:</span><br><span class="line">            body_btn.click()</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>  经过多次试验，当弹窗的class的属性为 body-container 的时候，弹窗是不会展示在页面的；当弹窗的class的属性为 body-container showData 的时候，弹窗才会展示在页面。修改抓取函数代码，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> self.isEnd:</span><br><span class="line">        page = self.browser.find_element_by_class_name(<span class="string">'pager_is_current'</span>).text</span><br><span class="line">        print(<span class="string">'正在爬取第 '</span> + page + <span class="string">' 页 ...'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            showData = self.browser.find_element_by_css_selector(<span class="string">'[class="body-container showData"]'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            showData = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> showData:</span><br><span class="line">            self.body_btn()</span><br><span class="line">        self.parse_page()</span><br><span class="line">        self.turn_page()</span><br><span class="line">    self.save_to_mongo()</span><br><span class="line">    print(<span class="string">'爬取结束'</span>)</span><br></pre></td></tr></table></figure><h2 id="整合所有代码">整合所有代码</h2><p>  经过一系列的弹窗，最终代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = list()</span><br><span class="line">        self.isEnd = <span class="literal">False</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">10</span>)</span><br><span class="line">        self.browser.get(<span class="string">'https://www.lagou.com/'</span>)</span><br><span class="line">        <span class="comment"># 首页弹窗模拟点击</span></span><br><span class="line">        index_tab = self.browser.find_element_by_xpath(<span class="string">'//*[@id="changeCityBox"]/ul/li[1]/a'</span>)</span><br><span class="line">        index_tab.click()</span><br><span class="line">        input_search = self.browser.find_element_by_id(<span class="string">'search_input'</span>)    <span class="comment"># 搜索框</span></span><br><span class="line">        input_search.send_keys(<span class="string">'Python'</span>)    <span class="comment"># 在搜索框输入职位名称</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        button = self.browser.find_element_by_class_name(<span class="string">'search_button'</span>)    <span class="comment"># 搜索按钮</span></span><br><span class="line">        button.click()    <span class="comment"># 模拟点击</span></span><br><span class="line">        client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">        db = client.lagou</span><br><span class="line">        self.collection = db.Python</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析网页数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            doc = pq(self.browser.page_source)</span><br><span class="line">            items = doc(<span class="string">'#s_position_list .item_con_list .con_list_item'</span>).items()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                money_experience_educational = item.find(<span class="string">'.position .p_bot .li_b_l'</span>).text().split(<span class="string">' '</span>)</span><br><span class="line">                product = [&#123;</span><br><span class="line">                    <span class="string">"position"</span>: item.find(<span class="string">'.p_top .position_link h3'</span>).text(),</span><br><span class="line">                    <span class="string">"city"</span>: item.find(<span class="string">'.position .p_top .add em'</span>).text(),</span><br><span class="line">                    <span class="string">"money"</span>: money_experience_educational[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">"experience"</span>: money_experience_educational[<span class="number">1</span>],</span><br><span class="line">                    <span class="string">"educational"</span>: money_experience_educational[<span class="number">3</span>],</span><br><span class="line">                    <span class="string">"company"</span>: item.find(<span class="string">'.company .company_name a'</span>).text(),</span><br><span class="line">                &#125;]</span><br><span class="line">                self.data.extend(product)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            self.parse_page()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 翻页操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> pq(self.browser.page_source)(<span class="string">'.pager_container span:last-child'</span>).attr(<span class="string">'class'</span>) != <span class="string">'pager_next pager_next_disabled'</span>:</span><br><span class="line">            pager_next = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'pager_next'</span>)))</span><br><span class="line">            pager_next.click()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.isEnd = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 职位详情页弹窗</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">body_btn</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            body_btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'div.body-btn'</span>)))</span><br><span class="line">            <span class="keyword">if</span> body_btn:</span><br><span class="line">                body_btn.click()</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 储存至MongoDB</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">                <span class="keyword">if</span> self.collection.update_one(item, &#123;<span class="string">"$setOnInsert"</span>: item&#125;, <span class="literal">True</span>):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            print(<span class="string">'储存到MongoDB成功'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">'储存到MongoDB失败'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 爬取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.isEnd:</span><br><span class="line">            page = self.browser.find_element_by_class_name(<span class="string">'pager_is_current'</span>).text</span><br><span class="line">            print(<span class="string">'正在爬取第 '</span> + page + <span class="string">' 页 ...'</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                showData = self.browser.find_element_by_css_selector(<span class="string">'[class="body-container showData"]'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                showData = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> showData:</span><br><span class="line">                self.body_btn()</span><br><span class="line">            self.parse_page()</span><br><span class="line">            self.turn_page()</span><br><span class="line">        self.browser.close()</span><br><span class="line">        self.save_to_mongo()</span><br><span class="line">        print(<span class="string">'爬取结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    obj = LagouSpider()</span><br><span class="line">    obj.crawl()</span><br></pre></td></tr></table></figure><h2 id="效果展示">效果展示</h2><h3 id="爬取效果">爬取效果</h3><p><img src="/posts/7a8334ea/end.gif" alt></p><h3 id="数据展示">数据展示</h3><p><img src="/posts/7a8334ea/end.png" alt></p><h2 id="写在最后">写在最后</h2><p>  你也可以使用Headless模式，也就是无界面模式，这样爬取的时候就不会弹出浏览器了。具体代码如下：</p><p>将初始化时的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.browser = webdriver.Chrome()</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">self.browser = webdriver.Chrome(chrome_options=chrome_options)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> requests </tag>
            
            <tag> Selenium </tag>
            
            <tag> pyquery </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据储存(TXT、JSON、CSV)</title>
      <link href="/posts/16fc5052.html"/>
      <url>/posts/16fc5052.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Do you take anyone else’s word about what is right and wrong. ——《21座桥》</center></strong></em><br><em><strong><center>不要人云亦云。</center></strong></em></p><a id="more"></a><h1><strong><center> Python数据储存(TXT、JSON、CSV)</center></strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(file, mode&#x3D;&#39;r&#39;, buffering&#x3D;None, encoding&#x3D;None, errors&#x3D;None, newline&#x3D;None, closefd&#x3D;True)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file : 包含了目标名称的字符串值。</span><br><span class="line">mode : 决定了打开文件的模式。默认文件访问模式为只读(r)。</span><br><span class="line">buffering : 如果 buffering 的值被设为 0，就不会有寄存。如果 buffering 的值取 1，访问文件时会寄存行。</span><br><span class="line">            如果将 buffering 的值设为大于 1 的整数，表明了这就是的寄存区的缓冲大小。</span><br><span class="line">            如果取负值，寄存区的缓冲大小则为系统默认。</span><br><span class="line">encoding: 对文件规定打开的编码</span><br><span class="line">newline &#x3D; &quot;&quot;：读取文件真正的换行符，在window里面为&quot;\r\n&quot;,Linux和Python里面为&quot;\n&quot;</span><br></pre></td></tr></table></figure><h2 id="打开方式">打开方式</h2><table><thead><tr><th style="text-align:center">模式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:center">rb</td><td>以二进制只读方式打开一个文件。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center">r+</td><td>以读写方式打开一个文件。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center">rb+</td><td>以二进制读写方式打开一个文件。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center">w</td><td>以写入方式打开一个文件。如果该文件已存在，则将其覆盖。如果该文件不存在，则创建新文件。</td></tr><tr><td style="text-align:center">wb</td><td>以二进制写入方式打开一个文件。如果该文件已存在，则将其覆盖。如果该文件不存在，则创建新文件。</td></tr><tr><td style="text-align:center">w+</td><td>以读写方式打开一个文件。如果该文件已存在，则会将其覆盖。如果该文件不存在，则创建新文件。</td></tr><tr><td style="text-align:center">wb+</td><td>以二进制读写格式打开一个文件。如果该文件已存在，则会将其覆盖。如果该文件不存在，则创建新文件。</td></tr><tr><td style="text-align:center">a</td><td>以追加方式打开一个文件。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，则创建新文件进行写入。</td></tr><tr><td style="text-align:center">ab</td><td>以二进制追加方式打开一个文件。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，则创建新文件进行写入。</td></tr><tr><td style="text-align:center">a+</td><td>以读写方式打开一个文件。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，则创建新文件用于读写。</td></tr><tr><td style="text-align:center">ab+</td><td>以二进制追加方式打开一个文件。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，则创建新文件用于读写。</td></tr></tbody></table><h2 id="file对象">file对象</h2><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">file.close()</td><td>关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td style="text-align:center">file.flush()</td><td>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td></tr><tr><td style="text-align:center">file.fileno()</td><td>返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td></tr><tr><td style="text-align:center">file.isatty()</td><td>如果文件连接到一个终端设备返回 True，否则返回 False。</td></tr><tr><td style="text-align:center">file.next()</td><td>返回文件下一行。</td></tr><tr><td style="text-align:center">file.read([size])</td><td>从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td style="text-align:center">file.readline([size])</td><td>读取整行，包括 “\n” 字符。</td></tr><tr><td style="text-align:center">file.readlines([sizehint])</td><td>读取所有行并返回列表，若给定sizeint&gt;0，则是设置一次读多少字节，这是为了减轻读取压力。</td></tr><tr><td style="text-align:center">file.seek(offset[, whence])</td><td>设置文件当前位置</td></tr><tr><td style="text-align:center">file.tell()</td><td>返回文件当前位置。</td></tr><tr><td style="text-align:center">file.truncate([size])</td><td>截取文件，截取的字节通过size指定，默认为当前文件位置。</td></tr><tr><td style="text-align:center">file.write(str)</td><td>将字符串写入文件，返回的是写入的字符长度。</td></tr><tr><td style="text-align:center">file.writelines(sequence)</td><td>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr></tbody></table><h2 id="TXT文本储存">TXT文本储存</h2><h3 id="将字符串写入TXT文件">将字符串写入TXT文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"Do you take anyone else's word about what is right and wrong.\n"</span></span><br><span class="line">file = open(<span class="string">'txtfile.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">file.write(str1)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><h3 id="简化写法">简化写法</h3><p>  使用with as语法。在with控制块结束时，文件会自动关闭，也就不用调用close()方法了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'txtfile.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(str1)</span><br></pre></td></tr></table></figure><h3 id="将中文字符串写入TXT文件">将中文字符串写入TXT文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'txtfile.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Python数据储存\n'</span>)</span><br></pre></td></tr></table></figure><p>  然后就发现它乱码了。<br><img src="/posts/16fc5052/Python_lm.png" alt><br>  解决方法：用utf-8的格式打开文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'txtfile.txt'</span>, <span class="string">'a+'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Python数据储存\n'</span>)</span><br></pre></td></tr></table></figure><p>  输出：<br><img src="/posts/16fc5052/nlm.png" alt><br>  同理：如果需要读取含有中文的文件的时候，也需要指定utf-8的格式来打开</p><h3 id="读取TXT文件">读取TXT文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'txtfile.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><p>  输出：<br><img src="/posts/16fc5052/r_res.png" alt><br>  <strong>其他用法请查看前面file对象的相关方法以及说明</strong></p><h2 id="JSON文件储存">JSON文件储存</h2><p>  Python为我们提供了简单易用的JSON库实现文件的读写操作，我们可以调用JSON库的loads()方法将JSON文本字符串转为JSON对象，可以通过loads()方法将JSON对象转为文本字符串。</p><h3 id="读取JSON字符串">读取JSON字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">'''[&#123;</span></span><br><span class="line"><span class="string">    "name": "SQL必知必会",</span></span><br><span class="line"><span class="string">    "publication": "2009-01"</span></span><br><span class="line"><span class="string">    &#125;, &#123;</span></span><br><span class="line"><span class="string">    "name": "C++ Primer Plus",</span></span><br><span class="line"><span class="string">    "publication": "2012-07"</span></span><br><span class="line"><span class="string">&#125;]'''</span></span><br><span class="line"></span><br><span class="line">print(type(str1))</span><br><span class="line">data = json.loads(str1)</span><br><span class="line">print(data)</span><br><span class="line">print(type(data))</span><br></pre></td></tr></table></figure><p>  输出：<br><img src="/posts/16fc5052/r_json.png" alt></p><p>  这里使用loads()方法将字符串转换为JSON对象。由于最外层是中括号，所以最终数据类型是列表。这样我们就可以用索引来获取对应的内容了。例如：获取第一个元素里的name属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(data[<span class="number">0</span>][<span class="string">'name'</span>])</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure><p>  得到的结果都是：<br><img src="/posts/16fc5052/r_json2.png" alt><br>  <strong>需要注意的是，JSON数据需要用双引号来包围，不能使用单引号，否则的话，例如：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'''[&#123;</span></span><br><span class="line"><span class="string">    'name': 'SQL必知必会',</span></span><br><span class="line"><span class="string">    'publication": "2009-01'</span></span><br><span class="line"><span class="string">    &#125;, &#123;</span></span><br><span class="line"><span class="string">    'name': 'C++ Primer Plus',</span></span><br><span class="line"><span class="string">    'publication': '2012-07'</span></span><br><span class="line"><span class="string">&#125;]'''</span></span><br><span class="line">data = json.loads(str1)</span><br></pre></td></tr></table></figure><p>  运行结果如下：<br><img src="/posts/16fc5052/error_json.png" alt><br>  <strong>这里会出现JSON解析错误，原因就是数据使用单引号包围。</strong></p><h3 id="将JSON对象写入文本">将JSON对象写入文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"SQL必知必会"</span>,</span><br><span class="line">    <span class="string">"publication"</span>: <span class="string">"2009-01"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"C++ Primer Plus"</span>,</span><br><span class="line">    <span class="string">"publication"</span>: <span class="string">"2012-07"</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>  利用dumps()方法我们可以将JSON对象转为字符串，然后再调用write()方法写入文本。如图：<br><img src="/posts/16fc5052/w_json.png" alt><br>  因为JSON对象含有中文字符，所以需要ensure_ascii=False保证不会以ASCII编码，以确保中文的正常转换。当然，如果JSON对象中不含有有中文，你可以不必指定这个参数。下面是<strong>错误</strong>的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data))</span><br></pre></td></tr></table></figure><p>  输出：<br><img src="/posts/16fc5052/w_json2.png" alt><br>  如果你想保存JSON格式，可以添加indent参数，代表缩进字符个数。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>  结果如下：<br><img src="/posts/16fc5052/w_json3.png" alt><br>  这样得到的内容会自动带缩进，格式会更加清晰。</p><h3 id="从JSON文本中读取内容">从JSON文本中读取内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    str1 = f.read()</span><br><span class="line">    data = json.loads(str1)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><p>  因为文本中含有中文所以，需要指定编码，否则会乱码。运行结果如下：<br><img src="/posts/16fc5052/r_json3.png" alt></p><h2 id="CSV文件储存">CSV文件储存</h2><h3 id="写入一行数据">写入一行数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'Mike'</span>, <span class="string">'20'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="string">'23'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="string">'21'</span>])</span><br></pre></td></tr></table></figure><p>  直接以文本打开如下：<br><img src="/posts/16fc5052/w_csv1.png" alt><br>  可以看到写入的文本默认是以逗号分割的，每调用一次writerow()方法即可写入一行数据。用Excel打开的结果如图：<br><img src="/posts/16fc5052/w_csv2.png" alt><br>  如果想修改列与列之间的分隔符，可以传入delimiter参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data2.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">' '</span>)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'Mike'</span>, <span class="string">'20'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="string">'23'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="string">'21'</span>])</span><br></pre></td></tr></table></figure><p>  结果如下：<br><img src="/posts/16fc5052/w_csv3.png" alt></p><h3 id="写入多行数据">写入多行数据</h3><p>  调用writerows()方法可以同时写入多行，而此时参数就需要为二维列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data3.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerows([[<span class="string">'10001'</span>, <span class="string">'Mike'</span>, <span class="string">'20'</span>], [<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="string">'23'</span>], [<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="string">'21'</span>]])</span><br></pre></td></tr></table></figure><p>  结果和一行一行写是相同。如下：<br><img src="/posts/16fc5052/w_csv1.png" alt></p><h3 id="将字典写入CSV文件">将字典写入CSV文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data4.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = ([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10001'</span>, <span class="string">'name'</span>: <span class="string">'Mike'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10002'</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'age'</span>: <span class="string">'23'</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10003'</span>, <span class="string">'name'</span>: <span class="string">'Jordan'</span>, <span class="string">'age'</span>: <span class="string">'21'</span>&#125;)</span><br></pre></td></tr></table></figure><p>  结果如下：<br><img src="/posts/16fc5052/w_csv1.png" alt><br>  如果是想追加写入的话，只需修改文件的打开模式，即open()函数的第二个参数修改为a。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data4.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = ([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10004'</span>, <span class="string">'name'</span>: <span class="string">'Durant'</span>, <span class="string">'age'</span>: <span class="string">'19'</span>&#125;)</span><br></pre></td></tr></table></figure><p>  在上面的基础上内容变为：<br><img src="/posts/16fc5052/w_csv4.png" alt><br>  此外，如果要写入中文内容的话，可能会遇到编码问题，需要指定编码格式。代码改写如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data4.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = ([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10005'</span>, <span class="string">'name'</span>: <span class="string">'张伟'</span>, <span class="string">'age'</span>: <span class="string">'32'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="读取CSV文件">读取CSV文件</h3><p>  因为文本中含有中文，所以指定了编码格式，否则可能会遇到乱码问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data4.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure><p>  运行结果如下：<br><img src="/posts/16fc5052/r_csv1.png" alt><br>  此外，还可以利用pandas的read_csv()方法将数据从CSV中读取出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'data4.csv'</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>  运行结果如下：<br><img src="/posts/16fc5052/r_csv2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KeyError:255--Python3连接数据库时出错</title>
      <link href="/posts/bee88420.html"/>
      <url>/posts/bee88420.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Despite knowing the journey and where it leads, I embrace it. ——《降临》</center></strong></em><br><em><strong><center>即使预见了所有的悲伤，我依然愿意前往。</center></strong></em></p><a id="more"></a><h1><strong><center>KeyError:255–Python3连接数据库时出错</center></strong></h1><p>  <em><strong>PS: 连接数据库的代码放在了在最后</strong></em><br>  在用pymysql连接MySQL8.0的时候出现了以下错误，如图：<br><img src="/posts/bee88420/KeyError255.png" alt></p><p>  查看pymysql版本<br><img src="/posts/bee88420/pymysql_v.png" alt></p><p>  查看pymysql是否有新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list --outdated    # 检查哪些包需要更新</span><br></pre></td></tr></table></figure><p><img src="/posts/bee88420/outdated.png" alt><br>  发现有新版本，那就更新试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade packagename    # pip升级指定包，packagename为需要升级的包名</span><br><span class="line">conda update packagename             # Anaconda用户使用此命令</span><br></pre></td></tr></table></figure><p><img src="/posts/bee88420/upgrade.png" alt></p><p>  再查看一下pymysql的版本，发现已经从0.7.10升级到了0.9.3<br><img src="/posts/bee88420/pymysql_09.png" alt></p><p>  让我们再次执行一下刚才的代码，发现已经可以了。<br><img src="/posts/bee88420/database_v.png" alt></p><p>Python3使用pymysql连接MySQL数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'haodaye'</span>, port=<span class="number">3306</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">'SELECT VERSION()'</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(<span class="string">"Database Version: "</span>, data)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pymysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取猫眼电影Top100</title>
      <link href="/posts/bf91ea5a.html"/>
      <url>/posts/bf91ea5a.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>For what it’s worth, it’s never too late. ——《返老还童》</center></strong></em><br><em><strong><center>有意义的事，什么时候做都不迟。</center></strong></em></p><a id="more"></a><h1><strong><center>爬取猫眼电影Top100</center></strong></h1><p>  最近因为新型冠状病毒，在家宅着实在无聊，想着找些电影看。于是乎…</p><h2 id="站点分析">站点分析</h2><p>  我们需要抓取的目标站点为 <a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a> ，打开之后便可以查看榜单。如下图，排名第一的电影是霸王别姬。</p><p><img src="/posts/bf91ea5a/board_4.png" alt><br>  将网页滑到最下方，发现有分页，点击切换到第2页，观察URL的变化。发现页面的URL变成了 <a href="https://maoyan.com/board/4?offset=10" target="_blank" rel="noopener">https://maoyan.com/board/4?offset=10</a> ，如下图：</p><p><img src="/posts/bf91ea5a/board_4_offset10.png" alt><br>  比之前的URL多了一个offset参数，而目前显示的结果是排名11 ~ 20的电影，初步推断这是一个偏移量的参数。再点击下一页，offset参数变成了20，显示的结果是排名21 ~ 30的电影。多次切换页码offset都有改变，由此得出规律，offset代表偏移量值，如果偏移量为n，则显示的是排名n+1 ~ n+10的电影。也就是说Top100我们只需要分开请求10次即可，而10次的参数分别设置为0、10、20…90即可。</p><h2 id="抓取单页源码">抓取单页源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">"http://maoyan.com/board/4?offset=&#123;0&#125;"</span>.format(<span class="number">0</span>)</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/80.0.3987.87 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="comment"># 判定响应是否成功，成功则打印响应内容，否则返回None</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            print(response.text)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    get_one_page()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>  运行即可得到网页源码。获取源码之后，就需要解析页面，提提取出我们想要的信息。</p><h2 id="解析单页源码">解析单页源码</h2><p>  我们使用Chrome浏览器，按下F12在开发者模式下的Network监听组件中查看源代码。查看其中一个条目的源代码。一部电影的信息对的是一个dd节点，我们可以使用正则表达式来提取里面电影的信息。首先排名信息是在class为board-index的i节点内；第二个img节点的data-src属性是图片的链接；再往后，电影名称在后面的p节点内，class为name；主演、发布时间、评分等内容以此类推。如图所示：</p><p><img src="/posts/bf91ea5a/Chrome_dd_dd.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(</span><br><span class="line">        <span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;.*?star.*?&gt;(.*?)&lt;/p&gt;.*?'</span></span><br><span class="line">        <span class="string">'releasetime.*?&gt;(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>,</span><br><span class="line">        re.S</span><br><span class="line">    )</span><br><span class="line">    items = re.findall(pattern, html)</span><br><span class="line">    <span class="comment"># print(items)</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'index'</span>: item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'image'</span>: item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'title'</span>: item[<span class="number">2</span>].strip(),</span><br><span class="line">            <span class="string">'actor'</span>: item[<span class="number">3</span>].strip()[<span class="number">3</span>:] <span class="keyword">if</span> len(item[<span class="number">3</span>]) &gt; <span class="number">3</span> <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">            <span class="string">'time'</span>: item[<span class="number">4</span>].strip()[<span class="number">5</span>:] <span class="keyword">if</span> len(item[<span class="number">4</span>]) &gt; <span class="number">5</span> <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">            <span class="string">'score'</span>: item[<span class="number">5</span>].strip() + item[<span class="number">6</span>].strip()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    html = get_one_page()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="保存到文件中">保存到文件中</h2><p>有两种方式：一种是保存到txt文件中，另一种是保存到csv文件中，可根据需求选择其中一中。</p><h3 id="保存到txt文件">保存到txt文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_txtFile</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 利用json.dumps()方法将字典序列化,并将ensure_ascii参数设置为False,保证结果是中文而不是Unicode码</span></span><br><span class="line">        f.write(json.dumps(content, ensure_ascii=<span class="literal">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        write_to_txtfile(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="保存到csv文件">保存到csv文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_csvFile</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"MovieResult.csv"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fieldnames = [<span class="string">"index"</span>, <span class="string">"image"</span>, <span class="string">"title"</span>, <span class="string">"actor"</span>, <span class="string">"time"</span>, <span class="string">"score"</span>]</span><br><span class="line">        writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">        writer.writeheader()</span><br><span class="line">        writer.writerows(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        rows.append(item)</span><br><span class="line">    write_to_csvfile(rows)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="抓取多个页面">抓取多个页面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    url = <span class="string">'http://maoyan.com/board/4?offset='</span> + str(offset)</span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        <span class="comment"># write_to_txtfile(item)</span></span><br><span class="line">        rows.append(item)</span><br><span class="line">    write_to_csvfile(rows)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        main(offset=i * <span class="number">10</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="整合完整代码">整合完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓取单页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/80.0.3987.87 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则提取</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(</span><br><span class="line">        <span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;.*?star.*?&gt;(.*?)&lt;/p&gt;.*?'</span></span><br><span class="line">        <span class="string">'releasetime.*?&gt;(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>,</span><br><span class="line">        re.S</span><br><span class="line">    )</span><br><span class="line">    items = re.findall(pattern, html)</span><br><span class="line">    <span class="comment"># print(items)</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'index'</span>: item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'image'</span>: item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'title'</span>: item[<span class="number">2</span>].strip(),</span><br><span class="line">            <span class="string">'actor'</span>: item[<span class="number">3</span>].strip()[<span class="number">3</span>:] <span class="keyword">if</span> len(item[<span class="number">3</span>]) &gt; <span class="number">3</span> <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">            <span class="string">'time'</span>: item[<span class="number">4</span>].strip()[<span class="number">5</span>:] <span class="keyword">if</span> len(item[<span class="number">4</span>]) &gt; <span class="number">5</span> <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">            <span class="string">'score'</span>: item[<span class="number">5</span>].strip() + item[<span class="number">6</span>].strip()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入txt文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_txtFile</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'MovieTop100.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># print(type(json.dumps(content)))</span></span><br><span class="line">        f.write(json.dumps(content, ensure_ascii=<span class="literal">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入CSV文件表头</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_csvField</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"MovieTop100.csv"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.DictWriter(f, filename)</span><br><span class="line">        writer.writeheader()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入CSV文件内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_csvRows</span><span class="params">(content, filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"MovieTop100.csv"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.DictWriter(f, filename)</span><br><span class="line">        <span class="comment"># writer.writeheader()    # 在抓取多页面时会造成表头重复</span></span><br><span class="line">        writer.writerows(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset, fieldnames)</span>:</span></span><br><span class="line">    url = <span class="string">'http://maoyan.com/board/4?offset=&#123;0&#125;'</span>.format(offset)</span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        <span class="comment"># print(item)</span></span><br><span class="line">        <span class="comment"># write_to_txtFile(item)</span></span><br><span class="line">        rows.append(item)</span><br><span class="line">    write_to_csvRows(rows, fieldnames)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fieldnames = [<span class="string">"index"</span>, <span class="string">"image"</span>, <span class="string">"title"</span>, <span class="string">"actor"</span>, <span class="string">"time"</span>, <span class="string">"score"</span>]</span><br><span class="line">    write_to_csvField(fieldnames)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        main(offset=i * <span class="number">10</span>, fieldnames=fieldnames)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="最终效果展示">最终效果展示</h2><p><img src="/posts/bf91ea5a/movietop100_csv.png" alt></p><p><em><strong>PS: 本文参考资料《Python3网络开发实战》–崔庆才。</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS普通用户添加sudo权限</title>
      <link href="/posts/bbbe5a22.html"/>
      <url>/posts/bbbe5a22.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Use knowledge to wipe out ignorance. ——《叫我第一名》</center></strong></em><br><em><strong><center>要用知识来打败无知。</center></strong></em></p><a id="more"></a><h1><strong><center>CentOS 普通用户添加sudo权限</center></strong></h1><p>  Ubuntu中默认是禁用了root账户，在安装系统时建立的用户，默认是添加到了sudoers中。在CentOS中，并没有把root之外的用户添加到sudoers中，所以在执行sudo命令时就会出现以下错误：<br><img src="/posts/bbbe5a22/sudoyumupdate0.png" alt><br>或者是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx is not in the sudoers file.This incident will be reported.</span><br></pre></td></tr></table></figure><p>既然想要添加权限的用户不在sudoers，那就把它添加进去。</p><h2 id="1-查找sudoers文件">1.查找sudoers文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis sudoers</span><br></pre></td></tr></table></figure><p><img src="/posts/bbbe5a22/whereissudoers.png" alt><br>我们发现sudoers这个文件在/etc/sudoers</p><h2 id="2-修改sudoers权限">2.修改sudoers权限</h2><p>先看一下sudoers的权限，发现是root下只读权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p><img src="/posts/bbbe5a22/lletcsudoers.png" alt><br>那就修改一下吧，切换到root用户，给sudoers文件添加写权限，并查看是否添加成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">chmod u+w &#x2F;etc&#x2F;sudoers</span><br><span class="line">ll &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p><img src="/posts/bbbe5a22/chmodetcsudoers1.png" alt></p><h2 id="3-编辑sudoers文件">3.编辑sudoers文件</h2><p>打开sudoers文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p>在大概100行的位置，即root ALL=(ALL) ALL，在它的下面加入yoursuser    ALL=(ALL)<br><img src="/posts/bbbe5a22/xxxallall.png" alt><br>ps: 在vim的命令行模式下输入: set number 可以显示文件行数。</p><p>也可以是以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yoursuser ALL&#x3D;(ALL) ALL                # 允许用户yoursuser执行sudo命令(需要输入密码)</span><br><span class="line">%yoursuser ALL&#x3D;(ALL) ALL               # 允许用户组yoursuser里面的用户执行sudo命令(需要输入密码)</span><br><span class="line">yoursuser ALL&#x3D;(ALL) NOPASSWD: ALL      # 允许用户yoursuser执行sudo命令,并且在执行的时候不输入密码</span><br><span class="line">%yoursuser ALL&#x3D;(ALL) NOPASSWD: ALL     # 允许用户组yoursuser里面的用户执行sudo命令,并且在执行的时候不输入密码</span><br></pre></td></tr></table></figure><h2 id="4-还原sudoers文件权限">4.还原sudoers文件权限</h2><p>如果不还原文件权限，系统不允许执行sudoers文件<br>还原sudoers文件权限，并查看是否还原成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u-w &#x2F;etc&#x2F;sudoers</span><br><span class="line">ll &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p><img src="/posts/bbbe5a22/chmodetcsudoers2.png" alt></p><h2 id="5-使用普通用户验证sudo权限">5.使用普通用户验证sudo权限</h2><p>切换到普通用户，使用sudo命令，发现已经可以正常执行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su yoursuser</span><br><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p><img src="/posts/bbbe5a22/sudoyumupdate1.png" alt></p><p><em><strong>PS: 本博文所有yoursuser均代表你想要修改权限的用户名。</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(一) 连接、选择、查看</title>
      <link href="/posts/ace0d300.html"/>
      <url>/posts/ace0d300.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>It’s never to late to do the right thing. ——《小事》</center></strong></em><br><em><strong><center>做正确的事永远都不会迟。</center></strong></em></p><a id="more"></a><h1><strong><center>MySQL(一) 连接、选择、查看</center></strong></h1><h2 id="终端命令行连接MySQL">终端命令行连接MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 主机名 -u 用户名 -P 端口 -p</span><br></pre></td></tr></table></figure><p><img src="/posts/ace0d300/mysqllocalhostroot3306.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-h: 主机名,表示要连接数据库的主机名或IP;如果是连接到本地MySQL服务器，为localhost</span><br><span class="line">-u: 用户名,表示要连接的数据库名</span><br><span class="line">-P: 端口，表示要连接的数据库的端口，默认是3306，可以不写，但如果使用的不是默认端口，则必须指明</span><br><span class="line">-p: 密码，表示要连接的数据库的密码，可以直接输在-p后面，但是这样明文输入密码不安全，建议在回车之后，换行输入密码</span><br></pre></td></tr></table></figure><p>如果你在自己的本机上安装了MySQL并且没有修改默认端口3306,那么通过命令行连接本机的MySQL就不用指定主机名和端口号了，可以直接采用下面的连接方式<br><img src="/posts/ace0d300/mysqlrootp.png" alt></p><h2 id="选择数据库">选择数据库</h2><p>在操作数据库之前，必须要确定使用的是哪一个库;在最初连接到MySQL的时候，没有任何数据库打开供你使用;当用 CREATE DATABASE 语句创建数据库之后，该数据库不会自动成为当前数据库。这些情况都需要USE来指定当前数据库。其语法格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE &lt;数据库名&gt;</span><br></pre></td></tr></table></figure><p>  该语句通知 MySQL 把&lt;数据库名&gt;所指示的数据库作为当前数据库。该数据库保持为默认数据库，直到语段的结尾，或者直到遇见一个不同的 USE 语句。只有使用 USE 语句来指定某个数据库作为当前数据库之后，才能对该数据库及其存储的数据对象执行操作。<br><strong>例如: 使用命令行工具将数据库 sys 设置为默认数据库</strong><br><img src="/posts/ace0d300/USEsys.png" alt><br>USE语句并不返回任何结果。依赖于使用的客户机，显示特定的通知。例如，这里显示的Database changed消息就是MySQL命令行工具在数据库选择成功后所显示的。</p><h2 id="查看数据库和表">查看数据库和表</h2><h3 id="显示所有可用数据库">显示所有可用数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="/posts/ace0d300/showdatabases.png" alt><br>show databases; 返回所有可用数据库的列表。</p><h3 id="显示一个数据库内所有的表">显示一个数据库内所有的表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="/posts/ace0d300/showtables.png" alt><br>show tables;返回当前数据库所有可用表的列表。</p><h3 id="其他的支持show语句命令">其他的支持show语句命令</h3><h4 id="展示表的字段详情">展示表的字段详情</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show columns from &lt;表名&gt;;</span><br></pre></td></tr></table></figure><p><img src="/posts/ace0d300/showcolumnsfrom.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc &lt;表名&gt;;  # 也可以展示表的字段详情</span><br></pre></td></tr></table></figure><p><img src="/posts/ace0d300/desc.png" alt></p><h4 id="显示创建数据库的MySQL语句">显示创建数据库的MySQL语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><p><img src="/posts/ace0d300/showcreatedatabase.png" alt></p><h4 id="显示创建表的MySQL语句">显示创建表的MySQL语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table &lt;表名&gt;;</span><br></pre></td></tr></table></figure><p><img src="/posts/ace0d300/showcreatetable.png" alt></p><h4 id="显示服务器错误或警告消息">显示服务器错误或警告消息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show errors; # 错误</span><br><span class="line">show warnings; # 警告</span><br></pre></td></tr></table></figure><p>例如：故意输错命令,在第二次输入正确命令后可以看到错误等级、错误码以及错误信息<br><img src="/posts/ace0d300/showwarnings.png" alt></p><h4 id="显示授权用户的安全权限">显示授权用户的安全权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants;</span><br></pre></td></tr></table></figure><p><img src="/posts/ace0d300/showgrants.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令(四) cat ：直接查看文件内容</title>
      <link href="/posts/ae5db918.html"/>
      <url>/posts/ae5db918.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Maybe sometimes good can come from bad. ——《金翅雀》</center></strong></em><br><em><strong><center>有时候，塞翁失马焉知非福。</center></strong></em></p><a id="more"></a><h1><strong><center>cat (直接查看文件内容)</center></strong></h1><h4 id="语法">语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [-AbeEnstTuv] filename</span><br></pre></td></tr></table></figure><h4 id="选项与参数：">选项与参数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-n : 从1开始对所有输出的行数编号，包括空白行。</span><br><span class="line">-b : 与-n雷类似，列出行号，但仅针对非空白行做行号显示，空白行不标行号。</span><br><span class="line">-s : 当遇到有连续两行以上的空白行，就代换为一行的空白行。</span><br><span class="line">-v : 列出一些看不出来的特殊字符。</span><br><span class="line">-E : 将结尾用$显示出来。</span><br><span class="line">-T : 将[Tab]按键用^T显示出来。</span><br><span class="line">-A : 等价于-vET，可列出一些非空白的特殊字符。</span><br><span class="line">-e : 等价于-eV选项</span><br><span class="line">-t : 等价于-vT选项</span><br></pre></td></tr></table></figure><h4 id="例一：查看-etc-issue这个文件的内容">例一：查看/etc/issue这个文件的内容</h4><p><img src="/posts/ae5db918/cat.png" alt></p><h4 id="例二：承接例一，如果需要打印行号？">例二：承接例一，如果需要打印行号？</h4><p><img src="/posts/ae5db918/-n.png" alt></p><h4 id="例三：承接例一，如果需要打印行号？-空白行不加">例三：承接例一，如果需要打印行号？(空白行不加)</h4><p><img src="/posts/ae5db918/-b.png" alt></p><h4 id="例四：将-etc-man-db-info的内容完整显示出来-包含特殊字符">例四：将/etc/man_db.info的内容完整显示出来(包含特殊字符)</h4><p><img src="/posts/ae5db918/-A.png" alt><br>  注：由于这个文件还是很长的，所以我只截取了一部分。</p><h4 id="例五：tac反向输出">例五：tac反向输出</h4><p><img src="/posts/ae5db918/tac.png" alt><br>  和例一相比，tac是将cat反转过来。也就是说：cat是由第一行到最后一行连续显示在屏幕上，而tac则是由最后一行到第一行反向在屏幕上显示出来！</p><p>  一般来说：新打开的terminal窗口大小为80x24，也就是一行最多显示80个字符，最多显示24行。所以，当你的文件内容是24行以上，就会来不及在屏幕上看到结果。</p><p><b>PS: 本文参考来自-鸟哥的Linux私房菜、菜鸟教程</b></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令(三) mv：移动</title>
      <link href="/posts/557083f0.html"/>
      <url>/posts/557083f0.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Tell yourself, “I am worthy. I can do this. I have what it takes”. ——《史努比：花生大电影》</center></strong></em><br><em><strong><center>告诉你自己：“我很棒，我能做到，我有成功所必要的条件”。</center></strong></em></p><a id="more"></a><h1><strong><center>mv (移动文件与目录，或重命名)</center></strong></h1><h4 id="语法">语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv [-fiu] source destination</span><br><span class="line">mv [options] source1 souce2 souce3 ... directory</span><br></pre></td></tr></table></figure><h4 id="选项与参数：">选项与参数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：force强制的意思，如果目标文件已经存在，不会询问直接覆盖。</span><br><span class="line">-i ：若目标文件(destination)已经存在，会先询问是否覆盖。</span><br><span class="line">-u ：若目标文件已经存在，且source比较新，才会更新</span><br></pre></td></tr></table></figure><h4 id="例一：复制一个文件，建立一个目录，将文件移动到目录中。">例一：复制一个文件，建立一个目录，将文件移动到目录中。</h4><p><img src="/posts/557083f0/cpmkmv.png" alt><br>  将某个文件移动到某个目录去，就是这样做。</p><h4 id="例二：将刚刚的目录名称更名为mvtest2">例二：将刚刚的目录名称更名为mvtest2.</h4><p><img src="/posts/557083f0/mvmvmv.png" alt><br>  在Linux下面还有个有趣的命令，为rename，该命令专职进行多个文件名的同时命名，并非针对单一文件修改，与mv不同，有兴趣的话，请man rename。</p><h4 id="例三：再建立两个文件，再全部移动到-tmp-mvtest2中。">例三：再建立两个文件，再全部移动到/tmp/mvtest2中。</h4><p><img src="/posts/557083f0/cpcpmv.png" alt><br>  注意：如果有多个源文件或目录，那么最后一个目标文件一定是【目录】。意思就是将所有的文件移动到该目录的意思。</p><p>  mv就是move(移动)的意思，当你要移动文件或目录的时候，这个命令就很重要了。你也可以用-u(update)来测试文件的新旧，看看是否需要移动。此外，另一个用途就是<b>修改文件名</b>。</p><p><b>PS: 本文参考来自-鸟哥的Linux私房菜、菜鸟教程</b></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令(二) rm：删除</title>
      <link href="/posts/fb0b165e.html"/>
      <url>/posts/fb0b165e.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>You can do anything you put your mind to. ——《惊涛飓浪》</center></strong></em><br><em><strong><center>世上无难事，只怕有心人。</center></strong></em></p><a id="more"></a><h1><strong><center>rm (删除文件或目录)</center></strong></h1><h4 id="语法">语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [rif] 文件或目录</span><br></pre></td></tr></table></figure><h4 id="选项与参数">选项与参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：就是force(暴力)的意思，忽略不存在的文件，即使目标属性为只读，也直接删除，不会发出警告信息。</span><br><span class="line">-i ：交互模式，删除前会询问使用者是否操作。</span><br><span class="line">-r ：递归删除，常用与目录的删除，这是高危选项。</span><br></pre></td></tr></table></figure><h4 id="例一：将在cp例子中建立的bashrc删除掉">例一：将在cp例子中建立的bashrc删除掉</h4><p><img src="/posts/fb0b165e/-i.png" alt><br>  加上-i的选项会主动询问，避免删除错误的文件。</p><h4 id="例二：利用通配符-，将-tmp下面开头为bashrc的文件全部删除。">例二：利用通配符*，将/tmp下面开头为bashrc的文件全部删除。</h4><p><img src="/posts/fb0b165e/-i2.png" alt><br>  *代表的是0到无穷大。因为加入了-i选项，所以每删除一个文件前都会进行询问。</p><h4 id="例三：将在cp例子中创建的-tmp-etc-这个目录删除掉。">例三：将在cp例子中创建的/tmp/etc/这个目录删除掉。</h4><p><img src="/posts/fb0b165e/-r.png" alt><br>  直接使用rmdir或者rm是删不掉非空的文件夹的，这个时候-r就可以用到了。</p><h4 id="例四：删除一个开头是-的文件">例四：删除一个开头是-的文件</h4><p><img src="/posts/fb0b165e/end.png" alt><br>  touch这个命令可以创建一个空文件。第三行第五列为0，所以这是一个空文件。第四行因为&quot;-“的选项，被系统误判了。不过好在第六行新的bash给了我们建议。其实还有一种方法，那就是【rm – -aaa-】也可以。<br>  所以说文件名最好不要用”-“号开头，因为”-&quot;后面跟的是选项。<b>不过使用rm -r这个命令之前，请千万注意，因为该目录或文件肯定会被root删除。</b>因为系统不会再次询问你是否要删除，所以那时一个非常严重的问题，需要特别注意。</p><p><b>PS: 本文参考来自-鸟哥的Linux私房菜、菜鸟教程</b></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令(一) cp：复制</title>
      <link href="/posts/d0edc1ed.html"/>
      <url>/posts/d0edc1ed.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>You’ve worked harder than everyone who’s ever doubted you. ——《高材生》</center></strong></em><br><em><strong><center>你要比任何曾经质疑过你的人都更努力。</center></strong></em></p><a id="more"></a><h1><strong><center>cp (复制文件或目录)</center></strong></h1><h4 id="语法">语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp [-adfilprsu] 源文件(source) 目标文件(destination)</span><br><span class="line">cp [options] source1 souce2 souce3 ... directory</span><br></pre></td></tr></table></figure><h4 id="选项与参数">选项与参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-a : 相当于dpr参数组合,至于dpr请参考下列说明;(常用)</span><br><span class="line">-d : 若源文件为链接文件的属性(link file),则复制链接文件属性而不是文件本身;</span><br><span class="line">-f : 若目标文件已经存在,则直接覆盖且没有提示;</span><br><span class="line">-i : 与-f参数相反,即如果目标文件存在,会询问用户是否覆盖;(常用)</span><br><span class="line">-l : 进行硬链接(hard link)的链接文件创建,而不是复制本身;</span><br><span class="line">-p : 连同文件的属性(权限、用户、时间)一起复制过去,而非使用默认属性;(备份常用)</span><br><span class="line">-r : 递归复制,用于目录的复制操作;(常用)</span><br><span class="line">-s : 软链接(不支持目录),亦称“快捷方式”文件;</span><br><span class="line">-u : 目标文件比源文件旧才可以更新,或目标文件不存在的情况下才复制;</span><br></pre></td></tr></table></figure><h4 id="例一：用root身份，将家目录下的-bashrc文件复制到-tmp下，并重命名为bashrc">例一：用root身份，将家目录下的.bashrc文件复制到/tmp下，并重命名为bashrc</h4><p><img src="/posts/d0edc1ed/-i.png" alt><br>  重复操作两次，由于/tmp已经存在bashrc了，加上-i选项后，会在覆盖前对你进行询问是否确定，可以按下n否定或者y确认。</p><h4 id="例二：切换到-tmp-并将-var-log-wtmp复制到-tmp且观察属性。">例二：切换到/tmp,并将/var/log/wtmp复制到/tmp且观察属性。</h4><p><img src="/posts/d0edc1ed/-a1.png" alt><br>  在不加任何选项的情况下，文件的某些属性/权限会改变。还有，就连文件创建的时间也改变了。如果你想将文件的所有特性都复制过来，可以加上-a，如下图：<br><img src="/posts/d0edc1ed/-a2.png" alt><br>  整个数据的所有特性完全一样。这就是-a的特性。</p><p>  <strong>在默认条件下，cp的源文件与目标文件的权限是不同的，目标文件的拥有者通常会是命令操作者本身。</strong><br>  如例二中由于我是root用户，因此复制过来的文件拥有者与用户组就变成了root所有。<br>  由于这个特性，我们在备份某些需要特别注意权限的文件时，例如密码文件(/etc/shadow)以及一些配置文件，就不能直接cp来复制，而必须加上-a或者-p等可以完整复制文件权限的才行。另外，如果你要复制文件给其他用户时，也必须要注意文件的权限(包含读、写、执行以及文件的拥有者等)，否则你的小伙伴还是无法使用啊！</p><h4 id="例三：复制-etc-这个目录下的所有内容到-tmp下面。">例三：复制/etc/这个目录下的所有内容到/tmp下面。</h4><p><img src="/posts/d0edc1ed/-r.png" alt><br>  图片这种第二行的意思是/etc/是一个目录，你需要加上-r选项。-r是可以复制目录，但是，文件与目录的权限可能会被改变。所以，也可以使用【cp -a /etc/ /tmp】来执行，尤其是在备份的时候。</p><h4 id="例四：将例一复制的bashrc建立一个符号链接文件-symbolic-link-。">例四：将例一复制的bashrc建立一个符号链接文件(symbolic link)。</h4><p><img src="/posts/d0edc1ed/-s-l.png" alt><br>  使用-l及-s都会创建所谓的链接文件(link file),但是这两种链接文件却有不一样的情况。-l就是所谓的硬链接(hard link)，而-s则是符号链接(symbolic link),即常说的软连接，简单来说bashrc_slink是一个快捷方式，这个快捷方式会链接到bashrc。所以你会看到文件右侧会有指向(-&gt;)的符号。</p><p>  至于bashrc_hlink文件与bashrc文件的属性与权限完全一模一样，与链接前的唯一差异就是第二栏的link数由1变成了2。</p><h4 id="例五：当-bashrc比-tmp-bashrc新时，才复制过来。">例五：当~/.bashrc比/tmp/bashrc新时，才复制过来。</h4><p><img src="/posts/d0edc1ed/-u.png" alt><br>  -u的特性是只有目标文件与源文件有差异时才复制。所以常用在备份工作中。</p><h4 id="例六：将例四创建的bashrc-slink复制成bashrc-slink-1与bashrc-slink-2。">例六：将例四创建的bashrc_slink复制成bashrc_slink_1与bashrc_slink_2。</h4><p><img src="/posts/d0edc1ed/-d.png" alt><br>  在不加任何参数的时候，cp复制的是源文件，而非链接文件的属性。如果想要复制链接文件的属性，就得要使用-d的选项了，如bashrc_slink_2的创建。</p><h4 id="例七：将家目录的-bashrc及-bash-history复制到-tmp下面。">例七：将家目录的.bashrc及.bash_history复制到/tmp下面。</h4><p><img src="/posts/d0edc1ed/many.png" alt><br>  可以将多个文件一次复制到同一个目录中去，记住，最后一个才是目标目录。</p><p><b>PS: 本文参考来自-鸟哥的Linux私房菜、菜鸟教程</b></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给你的域名加把锁(Ubuntu下Nginx配置SSL)</title>
      <link href="/posts/34731435.html"/>
      <url>/posts/34731435.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>You can walk as far as you want. ——《憨豆特工3》</center></strong></em><br><em><strong><center>海阔凭鱼跃，天高任鸟飞。</center></strong></em></p><a id="more"></a><p>  本文旨在用图文的方式，尽可能简单的告诉你如何去在Ubuntu18.04的环境下给Nginx配置SSL。</p><h3 id="登录腾讯云">登录腾讯云</h3><p><a href="https://console.cloud.tencent.com/ssl" target="_blank" rel="noopener">https://console.cloud.tencent.com/ssl</a><br><img src="/posts/34731435/1%E7%99%BB%E5%BD%95%E8%87%B3%E8%85%BE%E8%AE%AF%E4%BA%91%E6%8E%A7%E5%88%B6%E5%8F%B0%E9%80%89%E6%8B%A9%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6.png" alt></p><h3 id="选择你需要的证书类型">选择你需要的证书类型</h3><p>因为只是个人网站，所以在此我选择的是免费版DVSSL证书。<br><img src="/posts/34731435/2%E7%82%B9%E5%87%BB%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E7%82%B9%E5%87%BB%E7%A1%AE%E5%AE%9A.png" alt></p><h3 id="填写你的域名信息">填写你的域名信息</h3><p><img src="/posts/34731435/3%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7_%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7.png" alt></p><h3 id="按需填写域名身份验证">按需填写域名身份验证</h3><p><img src="/posts/34731435/4%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7_%E5%9F%9F%E5%90%8D%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81.png" alt></p><h3 id="点击查看证书详情">点击查看证书详情</h3><p><img src="/posts/34731435/5%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B%E8%AF%81%E4%B9%A6%E8%AF%A6%E6%83%85.png" alt><br><img src="/posts/34731435/6%E8%AF%81%E4%B9%A6%E8%AF%A6%E6%83%85.png" alt><br>腾讯云的验证速度还是可以的，大概需要10分钟左右，你就会收到验证通过的短信或者邮件了。</p><h3 id="下载证书">下载证书</h3><p><img src="/posts/34731435/7%E4%B8%8B%E8%BD%BD%E8%AF%81%E4%B9%A6.png" alt><br>你会得到一个ZIP的压缩包，里面会有各种服务器所需的配置，我们需要的是Nginx的。</p><h3 id="将证书传输至服务器">将证书传输至服务器</h3><p><img src="/posts/34731435/8%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6.png" alt><br>将刚才下载的压缩包解压，在Nginx的平级目录打开git(如果不知道如何在本地安装安装git，请自行度娘。)使用scp将文件传输至服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r Nginx&#x2F; root@192.168.80.1:&#x2F;etc&#x2F;nginx&#x2F;conf</span><br></pre></td></tr></table></figure><p>-r是递归复制整个目录，也就是说它会将Nginx下的文件包括Nginx这个文件夹一起复制下来(你也可以将Nginx下的文件挨个传输)；root服务器的用户名，可按需更改；192.168.80.1为你的服务器公网IP，按需修改；/etc/nginx/conf为将文件传输到服务器所存放的位置，如果没有conf这个文件夹，使用以下命令创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir conf</span><br></pre></td></tr></table></figure><p>至此可将证书传输至服务器。</p><h3 id="登录至服务器">登录至服务器</h3><p><img src="/posts/34731435/9%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.110.80.1</span><br></pre></td></tr></table></figure><p>使用ssh命令登录至服务器。root为用户名，按需修改；192.110.80.1为你的服务器公网IP地址，按需修改为你自己的IP。</p><h3 id="打开你的Nginx配置文件">打开你的Nginx配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;你的配置文件</span><br></pre></td></tr></table></figure><p>/etc/nginx/sites-available/为Ubuntu存放配置文件的地方，centos7的为/usr/local/nginx/。</p><p>如果你的项目是按照上篇文章部署的，可直接下面的配置（Ubuntu18.04+Hexo+Nginx）将域名修改为你自己的域名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        #SSL 访问端口号为 443</span><br><span class="line">        listen 443;</span><br><span class="line">        #填写绑定证书的域名</span><br><span class="line">        server_name www.your_server_name.cn;</span><br><span class="line">        #启用 SSL 功能</span><br><span class="line">        ssl on;</span><br><span class="line">        #证书文件名称</span><br><span class="line">        ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;Nginx&#x2F;1_your_server_name_bundle.crt;</span><br><span class="line">        #私钥文件名称</span><br><span class="line">        ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;Nginx&#x2F;2_your_server_name.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        #请按照这个协议配置</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        #请按照这个套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        root &#x2F;home&#x2F;hexo;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        error_page 404 &#x2F;404.html;</span><br><span class="line">            location &#x3D; &#x2F;40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">            location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        index index.html index.php index.htm;</span><br><span class="line">        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试配置文件是否可用">测试配置文件是否可用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>如果正常，则为下图所示。否则，需按照错误提示修改配置文件。<br><img src="/posts/34731435/10Nginx-t.png" alt></p><h3 id="将http重定向HTTPS">将http重定向HTTPS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    #填写绑定证书的域名</span><br><span class="line">    server_name www.your_server_name.com.cn;</span><br><span class="line">    #把http的域名请求转成https</span><br><span class="line">    rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将域名修改为自己的域名</p><h3 id="重启Nginx">重启Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>打开浏览器访问你的域名，你就会发现你的域名前面有了一把小锁。<br><img src="/posts/34731435/11%E5%B0%8F%E9%94%81.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Nginx </tag>
            
            <tag> SLL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Hexo博客部署至腾讯云服务器(Ubuntu18.04)</title>
      <link href="/posts/d3b909a4.html"/>
      <url>/posts/d3b909a4.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Sometimes, the correct path is the tortured one. ——《选秀日》</center></strong></em><br><em><strong><center>有时候，正确之路是苦难之路。</center></strong></em></p><a id="more"></a><p><img src="/posts/d3b909a4/hexoindex.png" alt><br>注：本文参考自https://staunchkai.com/hexo_deploy.html</p><p>  原本我的hexo是部署在Github上的。但是，就今年来说，基于美国贸易政策影响，Github已经限制了一些国家的用户访问。一名国外的开发者发表声明：Github封禁了他的账号，不能访问私有仓库，认为他在开发核武器。看到这，我不禁笑了出来，然后我就萌发了,将博客迁回国内的想法（当然，我不会告诉你，真正的原因是是因为访问速度太慢了。）</p><h1>部署环境</h1><ul><li><p>本地环境</p><ul><li>Windows10(64bit)</li><li>环境：<font face="微软雅黑" color="#FF0000" bgcolor="#A9A9A9">git</font>，<font face="微软雅黑" color="#FF0000">Node.js</font>，<font face="微软雅黑" color="#FF0000">hexo</font></li><li>生成本地静态网站</li></ul></li><li><p>服务器环境</p><ul><li>腾讯云主机(Ubuntu18.04)</li><li>环境：<font face="微软雅黑" color="#FF0000">git</font>，<font face="微软雅黑" color="#FF0000">Nginx</font></li><li>使用git自动化部署发布</li></ul></li></ul><h1>服务器配置</h1><p>安装Git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y git</span><br></pre></td></tr></table></figure><p>创建git用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser git</span><br><span class="line">sudo passwd git</span><br><span class="line">sudo chmod 740 &#x2F;etc&#x2F;sudoers   #(该文件为只读，想要增加内容必须增加权限)</span><br><span class="line">sudo vim &#x2F;etc&#x2F;sudoeres</span><br></pre></td></tr></table></figure><p>在合适的位置增加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/posts/d3b909a4/addgitall.png" alt></p><p>保存并退出，修改回权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p>本地创建密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>一路回车，直至如下图所示:</p><p><img src="/posts/d3b909a4/ssh-keygen-trsa.png" alt></p><p>切换至 git 用户，创建<font face="微软雅黑" color="#FF0000">.ssh</font>文件夹以及 authorized_keys 文件并将本地的<font face="微软雅黑" color="#FF0000">id_rsa.pub</font>文件内容粘贴到里面。(切记是id_rsa.pub，而不是id_rsa)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~&#x2F;.ssh</span><br><span class="line">vim ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">chmod 600 .ssh&#x2F;authorzied_keys</span><br><span class="line">chmod 700 .ssh</span><br></pre></td></tr></table></figure><p>测试<br>在本地Windows上，使用<font face="微软雅黑" color="#FF0000">Git Bash</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@SERVER_ip</span><br></pre></td></tr></table></figure><p>测试结果为，不需要密码直接进入。</p><p>创建网站目录<br>创建一个目录作为网站根目录，并赋予权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">mkdir &#x2F;home&#x2F;hexo  # 作为网站根目录</span><br><span class="line">chown git:git -R &#x2F;home&#x2F;hexo</span><br></pre></td></tr></table></figure><h1>安装配置Nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y nginx    # 安装</span><br><span class="line">systemctl start nginx.service    # 启动服务</span><br></pre></td></tr></table></figure><p>此时去访问服务器的公网IP地址，可以看到Nginx的欢迎页面，至此Nginx安装成功。</p><p><img src="/posts/d3b909a4/welcometonginx.png" alt></p><p>PS:原谅我忘记截图，只好从网上截取。Ubuntu下Nginx安装成功就是这样子的，不过centos的好像比这个漂亮一些，有兴趣的可以自行度娘。</p><p>配置Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default    # 编辑配置</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    #server_name  www.yours_server_name.com;    # 修改为自己的域名</span><br><span class="line">    root         &#x2F;home&#x2F;hexo;    # 修改为网站的根目录</span><br><span class="line">    index index.html index.php index.htm;</span><br><span class="line">    #Load configuration files for the default server block.</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 &#x2F;404.html;</span><br><span class="line">        location &#x3D; &#x2F;40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<font face="微软雅黑" color="#FF0000">nginx -t</font>命令检查配置文件的语法是否出错。然后使用<font face="微软雅黑" color="#FF0000">systemctl restart nginx.service </font>systemctl命令重启服务即可。</p><p>自动化部署<br>建立git裸库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">cd &#x2F;home&#x2F;git   # 在 git 用户目录下创建</span><br><span class="line">git init --bare blog.git   # 一定要加上--bare</span><br><span class="line">chown git:git -R blog.git   #赋予git用户权限</span><br></pre></td></tr></table></figure><p>这里使用的是<font face="微软雅黑" color="#FF0000">post-receive</font>这个钩子，当<font face="微软雅黑" color="#FF0000">git</font>有收发的时候就会调用这个钩子。 在<font face="微软雅黑" color="#FF0000">blog.git</font>裸库的 hooks 文件夹中，新建<font face="微软雅黑" color="#FF0000">post-receive</font>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blog.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure><p>填入以下内容，其中 /home/hexo 为网站目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">git --work-tree&#x3D;&#x2F;home&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git checkout -f</span><br></pre></td></tr></table></figure><p>添加权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x &#x2F;home&#x2F;git&#x2F;blog.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure><h1>本地配置</h1><p>在本地中，和部署到 pages 服务一样，需要先 hexo g 命令生成静态文件，通过 hexo s 命令能够正常进行本地访问，并且确保已经安装了 hexo-deployer-git。</p><p>配置<font face="微软雅黑" color="#FF0000">_config.yml</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@SERVER_IP:&#x2F;home&#x2F;git&#x2F;blog.git     # repository url</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>至此，就可以按照正常流程部署了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hexo </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 实现斐波那契数列</title>
      <link href="/posts/879ad0a2.html"/>
      <url>/posts/879ad0a2.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>It’s always the simple things that catch your breath. ——《甘地传》</center></strong></em><br><em><strong><center>让人顿悟的都是一些简单的东西。</center></strong></em></p><a id="more"></a><p><img src="/posts/879ad0a2/fibbeike.jpg" alt><br>  斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=3，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从1963年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。</p><h3 id="递归输出第n项">递归输出第n项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span> <span class="keyword">or</span> num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib1(num - <span class="number">1</span>) + fib1(num - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">res = fib1(<span class="number">10</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="number">55</span></span><br></pre></td></tr></table></figure><h3 id="递归实现输出前n项">递归实现输出前n项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    fibs = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">        fibs.append(fibs[<span class="number">-1</span>] + fibs[<span class="number">-2</span>])</span><br><span class="line">    <span class="keyword">return</span> fibs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = fib2(<span class="number">10</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境下搭建Python环境(Ubuntu)</title>
      <link href="/posts/59583f1b.html"/>
      <url>/posts/59583f1b.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>Don’t you blink, you might miss it. ——《一条狗的回家之路》</center></strong></em><br><em><strong><center>不要眨眼，机会稍纵即逝。</center></strong></em></p><a id="more"></a><p><img src="/posts/59583f1b/Python.jpg" alt><br><b>注：我使用的是虚拟机下的Ubuntu16.04，其他环境可举一反三。</b></p><p>  Ubuntu中默认安装了Python2.7以及Python3.5的版本。这两个版本不用管它更不要卸载掉，一旦卸载，直接会引起系统崩溃，后果很严重。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令行输入：</span><br><span class="line">python</span><br></pre></td></tr></table></figure><p><img src="/posts/59583f1b/Python2.7.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令行输入：</span><br><span class="line">python3</span><br></pre></td></tr></table></figure><p><img src="/posts/59583f1b/Python3.5.png" alt></p><p>  虽然Linux下默认安装了python，但是为了防止环境混乱，为开发搭建Python环境是有必要的。在这里演示的是python3.6x版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令行输入：</span><br><span class="line">sudo add-apt-repository ppa:jonathonf&#x2F;python-3.6</span><br><span class="line">然后敲回车键（ENTER）</span><br></pre></td></tr></table></figure><p><img src="/posts/59583f1b/%E6%B7%BB%E5%8A%A0Python3.6PPA.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令行输入：</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3.6</span><br><span class="line">然后它会提示你：您希望继续执行吗？ [Y&#x2F;n]</span><br><span class="line">输入Y</span><br></pre></td></tr></table></figure><p><img src="/posts/59583f1b/%E5%AE%89%E8%A3%85python3.6.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 python3.6 检查是否安装成功</span><br></pre></td></tr></table></figure><p><img src="/posts/59583f1b/inputPython3.6.png" alt><br>我们发现已经安装成功，版本号3.6.7（默认安装的是3.6下最新版）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是当输入 python 的时候</span><br></pre></td></tr></table></figure><p><img src="/posts/59583f1b/inputPython.png" alt><br>他还是系统默认的python2.7版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看 python 这条命令在哪？</span><br><span class="line">whereis python</span><br></pre></td></tr></table></figure><p><img src="/posts/59583f1b/whereispython.png" alt><br>可以看出python相关的指令都在 /usr/bin/ 目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;bin&#x2F;  进入&#x2F;usr&#x2F;bin&#x2F;目录  以下几条命令前面必须加上 sudo</span><br><span class="line">sudo rm python  删掉python默认的软连接</span><br><span class="line">sudo ln -s python3.6 python  新建一个软连接python指向python3.6</span><br><span class="line">sudo rm python3  删掉python3默认的软连接</span><br><span class="line">sudo ln -s python3.6 python3  新建一个软连接python3指向python3.6</span><br></pre></td></tr></table></figure><p>现在无论是输入 python 还是python3都可以进入到新安装的环境<br><img src="/posts/59583f1b/pythonandpython3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装pip</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line">然后它会提示你：您希望继续执行吗？ [Y&#x2F;n]</span><br><span class="line">输入Y</span><br><span class="line">更新pip</span><br><span class="line">sudo pip3 install --upgrade pip</span><br></pre></td></tr></table></figure><p><img src="/posts/59583f1b/%E5%AE%89%E8%A3%85pip.png" alt><br><img src="/posts/59583f1b/%E6%9B%B4%E6%96%B0pip.png" alt></p><p>但是当使用pip3 -V 查看pip版本的时候(如果没有报错可忽略以下步骤)<br><img src="/posts/59583f1b/pip3-V%E6%8A%A5%E9%94%99.png" alt><br>提示我们错误在/usr/bin/pip3文件中的第九行，输入sudo vi /usr/bin/pip3命令，使用vi打开该文件。<br><img src="/posts/59583f1b/%E9%94%99%E8%AF%AF%E7%AC%AC9%E8%A1%8C.png" alt><br>更改为：<br><img src="/posts/59583f1b/%E4%BF%AE%E6%94%B9%E7%AC%AC9%E8%A1%8C.png" alt><br>再次输入 pip3 -V<br><img src="/posts/59583f1b/%E6%AD%A3%E7%A1%AEpip3-V.png" alt><br>至此你就可以使用 pip install packagename 安装你需要的包了。(packagename为你需要安装的包的名字 例如 pip install pillow.)</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Louis XIV--象征尊贵与权威寓意</title>
      <link href="/posts/8c132ac1.html"/>
      <url>/posts/8c132ac1.html</url>
      
        <content type="html"><![CDATA[<p><em><strong><center>But every once in a while you find someone who is iridescent, and when you do, nothing will ever compare. ——《怦然心动》</center></strong></em><br><em><strong><center>世人万千种，浮云莫去求，斯人若彩虹，遇上方知有。</center></strong></em></p><a id="more"></a><h3 id="紫玫瑰的传说">紫玫瑰的传说</h3><p>  在遥远的古代北欧，商洛凡的未婚妻玫瑰不幸病逝，凡将她葬在月亮湖底的紫水晶里。许久以后，水晶上长出了大片的淡紫色花朵，人们也叫它玫瑰。据说，是因为玫瑰死后，害怕爱人寂寞，于是，灵魂幻化成花朵来陪伴情人。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1552061092094&amp;di=d058611155a1ac8c90b8671ff169f7b9&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.xnhyhqpx.com%2FUploadFile%2Fimage%2F20170914%2F15053686607529554.jpg" alt></p><p>  那是一个寻常美丽的世界，湖底，有璀璨的紫水晶，美人永不衰老的容颜，律动的湖水，人鱼族婉转中略带哀伤的歌，湖面，覆盖着万年不化的冰层，雪花从未停歇，微风过处，片片飞扬。　岸边，是一望无际的雪域森林，千年松衫挺拔苍翠，成群的麋鹿，在树与树中穿梭，而风中，精灵在舞蹈，湖边的黑色大理石上，永远坐着一位俊美的白衣男子，一动不动，用深情而哀伤的眼神，专注的看着沉寂的湖面，如同一尊精美的雕塑。<br>  而湖底娇艳的淡紫色玫瑰，那是永恒爱情的守护花朵……　这浪漫而凄美的故事一直流传着，直到有一天，传入了撒旦的耳朵……<br>  淡紫色玫瑰，终于被撒旦从水晶上拨出，而在它原来生长的地方，立即又长出一片无色透明的玫瑰来。<br>  商洛凡为保护紫玫瑰而死，他的血，顺着晶莹的冰层，掺到湖底的水晶上，把许多无色花朵，染成了鲜红色，这就是红玫瑰是爱情守护花的由来。<br>  至于永恒爱情的守护之花紫玫瑰，再也没有被看到过。<br>  而人间，也再未曾找到过永恒的爱情.再绚烂的情感，也会因时间的流逝，而渐渐被淡忘。</p><h3 id="花语">花语</h3><p>  象征尊贵与权威寓意——我只钟情你一个。</p><h3 id="寓意">寓意</h3><p>  我只钟情你一个，以“太阳王”路易十四的名字命名，象征尊贵与权威。</p><p>  千百年来人们一直在追寻着执子之手与子偕老那份专一的、和谐的爱情，从牵手的那一刻，就向往着相依相守的爱恋，没有人去设想分手的那一天，然而生活中风云变幻无常，又有多少热恋的情人最终不欢而散，从白玫瑰到红玫瑰……所以今天见到这朵路易十四玫瑰花——我只钟情你一个，显得尤其高贵典雅，令人仰慕。因此，不要随便牵手，更不要随便放手，今生今世，相识最美。</p><p>注：图片来源于网络，侵删;内容源于百度百科。</p>]]></content>
      
      
      <categories>
          
          <category> 植物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 植物 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
